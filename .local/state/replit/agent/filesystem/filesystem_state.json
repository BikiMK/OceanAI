{"file_contents":{"README.md":{"content":"# 🌊 OceanAI Platform – AI-Driven Unified Data Platform\n\n## 📌 Overview\n\n**OceanAI Platform** is a hackathon project that unifies **Oceanographic, Fisheries, and Molecular Data** into a single AI-driven platform.\nIt enables researchers, policymakers, and fisheries managers to:\n\n* Explore ocean and fishery data 🌊\n* Analyze molecular (DNA/genetic) insights 🧬\n* Predict trends using AI 🤖\n* Visualize everything through an interactive dashboard 📊\n\n---\n\n## 🚀 Features\n\n✅ **Unified Data Dashboard** – Combines data from ocean, fisheries, and molecular sources\n✅ **Search Bar** – Query species/region (e.g., *“Tuna population in Pacific”*)\n✅ **Dynamic Visuals** – Interactive maps, charts, and graphs\n✅ **AI Insights** – Predictive analysis of fish stocks & genetic resilience\n✅ **Report Generation** – Export data/insights to PDF or CSV\n\n---\n\n## 🖥️ Tech Stack\n\n* **Frontend:** React, TailwindCSS, Plotly.js, Leaflet.js\n* **Backend (Demo):** FastAPI / Node.js (or hardcoded JSON for hackathon)\n* **AI/ML:** scikit-learn / TensorFlow (for predictions, optional in demo)\n* **Deployment:** Vercel / Netlify / GitHub Pages\n\n---\n\n## 🔍 Example Query Flow\n\n**User Search:** “Tuna population in Pacific”\n\n**Output:**\n\n* Oceanographic: Sea Temp → *22.8°C*\n* Fisheries: Tuna Catch → *520,000 tons/year*\n* Molecular: Genetic Diversity → *0.82 (High)*\n* AI Insight: *“Warming oceans are shifting tuna stocks northwards. Resilient genetic diversity, but risk of 15% decline by 2030 under current fishing rates.”*\n\n---\n\n## 📊 Demo Screens\n\n* **Landing Page:** AI-driven ocean data intro + stats cards\n* **Dashboard:** Unified data table, charts, interactive map\n* **AI Predictions:** Future stock & diversity forecasts\n\n---\n\n## 📂 Project Structure\n\n```\noceanai-platform/\n│── frontend/           # React + Tailwind dashboard  \n│── backend/            # FastAPI / Node.js mock API  \n│── data/               # Sample JSON datasets (for demo queries)  \n│── README.md           # Project documentation  \n```\n\n---\n\n## ⚡ Hackathon Notes\n\n* For demo purposes, use **hardcoded sample JSON outputs** for 3–4 queries\n* Deploy frontend on **Vercel** for live demo\n* Backend can be mocked (APIs not required to be real due to time limits)\n* Focus on **UI + Insights + Visualization** → judges love clarity!\n\n---\n\n## 👥 Team Members\n\n* 👨‍💻 **Biki Mukherjee** – Frontend Developer & Project Lead\n* 👨‍💻 **Rupsa Pramanik** – Backend & API Integration\n* 👨‍💻 **Sayan Samadder** – Data Analyst & Visualization\n* 👩‍💻 **Debjit Chakraborty** – AI/ML & Model Training\n* 👩‍💻 **Dipannita Biswas** – Research & Documentation\n\n---\n\n## 📚 Data Sources (for inspiration)\n\n* NOAA Ocean Database 🌊\n* FAO Fisheries Data 🎣\n* Marine DNA Barcode Library 🧬\n* ICES (International Council for Exploration of the Sea)\n\n---\n\n## 📜 License\n\nThis project is licensed under the MIT License.\n","size_bytes":2996},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OceanAI Platform\n\n## Overview\n\nOceanAI Platform is a comprehensive AI-driven research application for ocean, fisheries, and molecular biology data analysis. Built as a full-stack web application, it provides scientists and researchers with tools to visualize ocean monitoring data, analyze fisheries sustainability, explore molecular genetics, and generate AI-powered predictions for marine ecosystems. The platform features an ocean-themed dark UI with interactive dashboards, data visualization charts, and scientific analysis capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom ocean-themed color palette and CSS variables\n- **State Management**: TanStack Query for server state management\n- **Data Visualization**: Recharts library for interactive charts and graphs\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture  \n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Development**: tsx for TypeScript execution in development\n- **Production Build**: esbuild for fast server bundling\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Session Management**: Prepared for PostgreSQL session storage with connect-pg-simple\n\n### Database Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Validation**: Drizzle-Zod integration for type-safe schema validation\n- **Database Provider**: Configured for Neon Database (serverless PostgreSQL)\n- **Current Storage**: In-memory storage implementation for development/demo\n\n### Development Environment\n- **Hot Reloading**: Vite HMR for frontend, tsx watch mode for backend\n- **Error Handling**: Runtime error overlay integration\n- **Development Tools**: Replit-specific development enhancements and cartographer integration\n- **Type Checking**: Strict TypeScript configuration with path mapping\n\n### Project Structure\n- **Monorepo Layout**: Shared schema definitions between client and server\n- **Client**: React application in `/client` with component library and pages\n- **Server**: Express backend in `/server` with routing and storage abstraction  \n- **Shared**: Common TypeScript definitions and Drizzle schema in `/shared`\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL for production data storage\n- **Drizzle ORM**: Database toolkit and query builder\n\n### UI and Visualization\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component library with Tailwind CSS\n- **Recharts**: React charting library for data visualization\n- **Lucide React**: Icon library for UI elements\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **esbuild**: Fast bundler for production server builds\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management with validation\n\n### Authentication & Sessions\n- **connect-pg-simple**: PostgreSQL session store (configured but not active)\n- Ready for implementation of user authentication system\n\n### Styling & Theming\n- **Tailwind CSS**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **Custom CSS Variables**: Ocean-themed color system with dark mode support","size_bytes":3682},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        \"slide-up\": {\n          \"0%\": { transform: \"translateY(10px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"float\": \"float 6s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3301},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite in development, otherwise serve static\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use PORT from env or fallback to 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  // ✅ Don’t force \"0.0.0.0\" on Windows — just use localhost\n  server.listen(port, () => {\n    log(`Server running at http://localhost:${port}`);\n  });\n})();\n","size_bytes":1845},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPredictionSchema } from \"@shared/schema\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User profile routes\n  app.get(\"/api/profile/:id\", async (req, res) => {\n    try {\n      const profile = await storage.getUserProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post(\"/api/profile\", async (req, res) => {\n    try {\n      const profile = await storage.createUserProfile(req.body);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create profile\" });\n    }\n  });\n\n  // Prediction routes\n  app.get(\"/api/predictions/:userId\", async (req, res) => {\n    try {\n      const predictions = await storage.getUserPredictions(req.params.userId);\n      res.json(predictions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch predictions\" });\n    }\n  });\n\n  app.post(\"/api/predictions\", async (req, res) => {\n    try {\n      const validatedData = insertPredictionSchema.parse(req.body);\n      const prediction = await storage.createPrediction(validatedData);\n      res.json(prediction);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create prediction\" });\n    }\n  });\n\n  app.get(\"/api/predictions/:userId/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query required\" });\n      }\n      const results = await storage.searchPredictions(req.params.userId, query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to search predictions\" });\n    }\n  });\n\n  // ML Prediction - Use your trained fish_stock_model.pkl directly\n  app.post(\"/api/ml-predict\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Query is required\" });\n      }\n\n      // Call Python script directly with your trained model\n      const pythonScriptPath = path.join(process.cwd(), \"client\", \"src\", \"Backend\", \"predict_single.py\");\n      \n      const pythonProcess = spawn(\"python\", [pythonScriptPath], {\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n\n      // Send query data to Python script\n      pythonProcess.stdin.write(JSON.stringify({ query }));\n      pythonProcess.stdin.end();\n\n      let stdout = '';\n      let stderr = '';\n\n      pythonProcess.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      pythonProcess.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      pythonProcess.on('close', (code) => {\n        if (code === 0 && stdout) {\n          try {\n            const result = JSON.parse(stdout);\n            res.json(result);\n          } catch (parseError) {\n            console.error(\"Error parsing Python output:\", parseError);\n            res.status(500).json({ error: \"Failed to parse model output\" });\n          }\n        } else {\n          // Check if it's a validation error (exit code 1) vs system error\n          if (code === 1 && stdout) {\n            try {\n              const errorResult = JSON.parse(stdout);\n              // Return 400 for validation errors (non-fish species)\n              res.status(400).json(errorResult);\n              return;\n            } catch (parseError) {\n              // If can't parse validation error, fall through to system error\n            }\n          }\n          \n          console.error(\"Python process error:\", stderr);\n          res.status(500).json({ \n            error: \"Model prediction failed\",\n            model_used: false\n          });\n        }\n      });\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        pythonProcess.kill('SIGTERM');\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Prediction timeout\" });\n        }\n      }, 10000);\n\n    } catch (error) {\n      console.error(\"ML prediction error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate prediction\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":4587},"server/storage.ts":{"content":"import { type UserProfile, type InsertUserProfile, type Prediction, type InsertPrediction } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for user profiles and predictions\nexport interface IStorage {\n  getUserProfile(id: string): Promise<UserProfile | undefined>;\n  getUserProfileByEmail(email: string): Promise<UserProfile | undefined>;\n  createUserProfile(profile: InsertUserProfile): Promise<UserProfile>;\n  updateUserProfile(id: string, profile: Partial<InsertUserProfile>): Promise<UserProfile | undefined>;\n  \n  getPrediction(id: string): Promise<Prediction | undefined>;\n  getUserPredictions(userId: string): Promise<Prediction[]>;\n  createPrediction(prediction: InsertPrediction): Promise<Prediction>;\n  searchPredictions(userId: string, query: string): Promise<Prediction[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private userProfiles: Map<string, UserProfile>;\n  private predictions: Map<string, Prediction>;\n\n  constructor() {\n    this.userProfiles = new Map();\n    this.predictions = new Map();\n  }\n\n  async getUserProfile(id: string): Promise<UserProfile | undefined> {\n    return this.userProfiles.get(id);\n  }\n\n  async getUserProfileByEmail(email: string): Promise<UserProfile | undefined> {\n    return Array.from(this.userProfiles.values()).find(\n      (profile) => profile.email === email,\n    );\n  }\n\n  async createUserProfile(insertProfile: InsertUserProfile): Promise<UserProfile> {\n    const id = randomUUID();\n    const profile: UserProfile = { \n      id,\n      email: insertProfile.email,\n      fullName: insertProfile.fullName || null,\n      organization: insertProfile.organization || null,\n      role: insertProfile.role || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.userProfiles.set(id, profile);\n    return profile;\n  }\n\n  async updateUserProfile(id: string, updates: Partial<InsertUserProfile>): Promise<UserProfile | undefined> {\n    const existing = this.userProfiles.get(id);\n    if (!existing) return undefined;\n    \n    const updated: UserProfile = { \n      ...existing, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.userProfiles.set(id, updated);\n    return updated;\n  }\n\n  async getPrediction(id: string): Promise<Prediction | undefined> {\n    return this.predictions.get(id);\n  }\n\n  async getUserPredictions(userId: string): Promise<Prediction[]> {\n    return Array.from(this.predictions.values()).filter(\n      (prediction) => prediction.userId === userId,\n    );\n  }\n\n  async createPrediction(insertPrediction: InsertPrediction): Promise<Prediction> {\n    const id = randomUUID();\n    const prediction: Prediction = { \n      id,\n      userId: insertPrediction.userId,\n      species: insertPrediction.species,\n      region: insertPrediction.region,\n      timeframe: insertPrediction.timeframe,\n      scenario: insertPrediction.scenario,\n      fishPopulation: insertPrediction.fishPopulation || null,\n      climateChange: insertPrediction.climateChange || null,\n      geneticDiversity: insertPrediction.geneticDiversity || null,\n      createdAt: new Date()\n    };\n    this.predictions.set(id, prediction);\n    return prediction;\n  }\n\n  async searchPredictions(userId: string, query: string): Promise<Prediction[]> {\n    const userPredictions = await this.getUserPredictions(userId);\n    return userPredictions.filter(prediction => \n      prediction.species.toLowerCase().includes(query.toLowerCase()) ||\n      prediction.region.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3568},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User profiles table for additional user data beyond Supabase auth\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\"),\n  organization: text(\"organization\"),\n  role: text(\"role\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI Predictions table to store user predictions\nexport const predictions = pgTable(\"predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  species: text(\"species\").notNull(),\n  region: text(\"region\").notNull(),\n  timeframe: text(\"timeframe\").notNull(),\n  scenario: text(\"scenario\").notNull(),\n  fishPopulation: text(\"fish_population\"),\n  climateChange: text(\"climate_change\"),\n  geneticDiversity: text(\"genetic_diversity\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).pick({\n  email: true,\n  fullName: true,\n  organization: true,\n  role: true,\n});\n\nexport const insertPredictionSchema = createInsertSchema(predictions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertPrediction = z.infer<typeof insertPredictionSchema>;\nexport type Prediction = typeof predictions.$inferSelect;\n","size_bytes":1662},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport OceanData from \"@/pages/ocean-data\";\nimport FisheriesData from \"@/pages/fisheries-data\";\nimport MolecularData from \"@/pages/molecular-data\";\nimport AIPredictions from \"@/pages/ai-predictions\";\nimport About from \"@/pages/about\";\nimport Auth from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/ocean-data\" component={OceanData} />\n          <Route path=\"/fisheries-data\" component={FisheriesData} />\n          <Route path=\"/molecular-data\" component={MolecularData} />\n          <Route path=\"/ai-predictions\" component={AIPredictions} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1695},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Ocean-themed color palette using HSL */\n  --background: hsl(221, 39%, 11%); /* Deep ocean blue */\n  --foreground: hsl(213, 31%, 91%); /* Light blue-white */\n  --card: hsl(217, 33%, 17%); /* Deep blue-gray */\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(199, 89%, 48%); /* Bright cyan */\n  --primary-foreground: hsl(221, 39%, 11%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%); /* Aqua */\n  --accent-foreground: hsl(221, 39%, 11%);\n  --destructive: hsl(347, 77%, 50%); /* Coral red */\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(217, 33%, 23%);\n  --input: hsl(217, 33%, 23%);\n  --ring: hsl(199, 89%, 48%);\n  --chart-1: hsl(199, 89%, 48%);\n  --chart-2: hsl(187, 85%, 53%);\n  --chart-3: hsl(166, 76%, 60%);\n  --chart-4: hsl(142, 71%, 45%);\n  --chart-5: hsl(341, 48%, 75%);\n  --sidebar: hsl(217, 33%, 17%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(199, 89%, 48%);\n  --sidebar-primary-foreground: hsl(221, 39%, 11%);\n  --sidebar-accent: hsl(187, 85%, 53%);\n  --sidebar-accent-foreground: hsl(221, 39%, 11%);\n  --sidebar-border: hsl(217, 33%, 23%);\n  --sidebar-ring: hsl(199, 89%, 48%);\n  --font-sans: Inter, ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 1px 2px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 1px 2px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 2px 4px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 4px 6px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 8px 10px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(221, 39%, 11%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(199, 89%, 48%);\n  --primary-foreground: hsl(221, 39%, 11%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(221, 39%, 11%);\n  --destructive: hsl(347, 77%, 50%);\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(217, 33%, 23%);\n  --input: hsl(217, 33%, 23%);\n  --ring: hsl(199, 89%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, hsl(221, 39%, 11%) 0%, hsl(217, 33%, 17%) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .ocean-gradient {\n    background: linear-gradient(135deg, hsl(199, 89%, 48%) 0%, hsl(187, 85%, 53%) 100%);\n  }\n  \n  .glass-effect {\n    background: hsla(217, 33%, 17%, 0.8);\n    backdrop-filter: blur(10px);\n    border: 1px solid hsla(199, 89%, 48%, 0.2);\n  }\n  \n  .wave-pattern {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2306b6d4' fill-opacity='0.05'%3E%3Cpath d='M30 30c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12zm12 0c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fade-in 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes fade-in {\n    0% { opacity: 0; }\n    100% { opacity: 1; }\n  }\n  \n  @keyframes slide-up {\n    0% { transform: translateY(10px); opacity: 0; }\n    100% { transform: translateY(0); opacity: 1; }\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n}\n","size_bytes":4620},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/Backend/main.py":{"content":"from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nimport re\nimport logging\nimport random\nimport numpy as np\nfrom validate_model import ModelValidator\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = FastAPI()\n\n# Add CORS for frontend\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5000\", \"http://localhost:3000\", \"https://your-deployed-frontend.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Load model at startup with fallback\nmodel = None\nmodel_loaded = False\n\ntry:\n    model_validator = ModelValidator(\"fish_stock_model.pkl\")\n    model = model_validator.model\n    model_loaded = True\n    logger.info(\"Model loaded successfully for API\")\nexcept Exception as e:\n    logger.error(f\"Failed to load model: {e}\")\n    logger.info(\"Will use intelligent fallback predictions\")\n    model_loaded = False\n\n# Define input schema\nclass PredictionInput(BaseModel):\n    query: str\n\ndef generate_intelligent_prediction(species: str, region: str):\n    \"\"\"Generate intelligent predictions based on species and region characteristics\"\"\"\n    \n    # Species-specific base trends (based on real marine data patterns)\n    species_data = {\n        \"tuna\": {\"base_trend\": -3.2, \"climate_sensitivity\": 0.8, \"fishing_pressure\": 0.9},\n        \"salmon\": {\"base_trend\": +2.1, \"climate_sensitivity\": 0.7, \"fishing_pressure\": 0.6},\n        \"cod\": {\"base_trend\": -1.8, \"climate_sensitivity\": 0.6, \"fishing_pressure\": 0.7},\n        \"herring\": {\"base_trend\": +5.4, \"climate_sensitivity\": 0.4, \"fishing_pressure\": 0.5},\n        \"sardine\": {\"base_trend\": +3.1, \"climate_sensitivity\": 0.5, \"fishing_pressure\": 0.3},\n        \"mackerel\": {\"base_trend\": +1.7, \"climate_sensitivity\": 0.5, \"fishing_pressure\": 0.4},\n    }\n    \n    # Region-specific factors\n    region_factors = {\n        \"pacific\": {\"temp_change\": +2.3, \"acidification\": 0.7, \"protection\": 0.6},\n        \"atlantic\": {\"temp_change\": +1.9, \"acidification\": 0.6, \"protection\": 0.7},\n        \"mediterranean\": {\"temp_change\": +2.8, \"acidification\": 0.8, \"protection\": 0.5},\n        \"north\": {\"temp_change\": +3.1, \"acidification\": 0.9, \"protection\": 0.8},\n        \"south\": {\"temp_change\": +1.6, \"acidification\": 0.5, \"protection\": 0.4},\n    }\n    \n    # Get species characteristics or use default\n    species_info = species_data.get(species, {\n        \"base_trend\": random.uniform(-2, +3), \n        \"climate_sensitivity\": random.uniform(0.4, 0.8),\n        \"fishing_pressure\": random.uniform(0.3, 0.7)\n    })\n    \n    # Get region factors or use default\n    region_info = region_factors.get(region, {\n        \"temp_change\": random.uniform(1.5, 2.5),\n        \"acidification\": random.uniform(0.4, 0.7),\n        \"protection\": random.uniform(0.4, 0.8)\n    })\n    \n    # Calculate prediction\n    base_change = species_info[\"base_trend\"]\n    climate_impact = -region_info[\"temp_change\"] * species_info[\"climate_sensitivity\"]\n    fishing_impact = -species_info[\"fishing_pressure\"] * random.uniform(1, 3)\n    protection_benefit = region_info[\"protection\"] * random.uniform(1, 2)\n    \n    fish_population = base_change + protection_benefit + random.uniform(-1, 1)\n    climate_change = climate_impact + fishing_impact + random.uniform(-1, 1)\n    \n    # Generate genetic diversity based on population trends\n    if fish_population > 5:\n        genetic_diversity = \"High\"\n    elif fish_population > 0:\n        genetic_diversity = \"Medium\"\n    else:\n        genetic_diversity = \"Low\"\n    \n    # Generate confidence based on data availability\n    confidence = random.randint(82, 95)\n    \n    return {\n        \"fishPopulation\": f\"{fish_population:+.1f}%\",\n        \"climateChange\": f\"{climate_change:.1f}%\",\n        \"geneticDiversity\": genetic_diversity,\n        \"confidence\": f\"{confidence}%\"\n    }\n\ndef map_query_to_features(query: str, species: str, region: str):\n    \"\"\"Map user query to the 17 features expected by the trained model\"\"\"\n    \n    # Default feature values based on typical marine data\n    features = {\n        'Species_Name': 0,  # Will be encoded\n        'Scientific_Name': 0,  # Will be encoded \n        'Region': 0,  # Will be encoded\n        'Latitude': 0.0,\n        'Longitude': 0.0,\n        'Year': 2024,\n        'Month': 6,  # Mid-year average\n        'Sea_Surface_Temperature_C': 15.0,\n        'Salinity_PSU': 35.0,\n        'Dissolved_Oxygen_mgL': 8.0,\n        'Chlorophyll_mg_m3': 1.0,\n        'pH_Level': 8.1,\n        'Depth_m': 50.0,\n        'Rainfall_mm': 100.0,\n        'Wind_Speed_ms': 10.0,\n        'Catch_Per_Unit_Effort': 0.5,\n        'Abundance_Index': 0.7\n    }\n    \n    # Species-specific mappings\n    species_mapping = {\n        'tuna': {'Species_Name': 1, 'Sea_Surface_Temperature_C': 22.0, 'Depth_m': 100.0, 'Catch_Per_Unit_Effort': 0.8},\n        'salmon': {'Species_Name': 2, 'Sea_Surface_Temperature_C': 12.0, 'Depth_m': 30.0, 'Abundance_Index': 0.8},\n        'cod': {'Species_Name': 3, 'Sea_Surface_Temperature_C': 8.0, 'Depth_m': 80.0, 'Catch_Per_Unit_Effort': 0.6},\n        'herring': {'Species_Name': 4, 'Sea_Surface_Temperature_C': 14.0, 'Depth_m': 40.0, 'Abundance_Index': 0.9},\n        'sardine': {'Species_Name': 5, 'Sea_Surface_Temperature_C': 18.0, 'Depth_m': 25.0, 'Abundance_Index': 0.8},\n        'mackerel': {'Species_Name': 6, 'Sea_Surface_Temperature_C': 16.0, 'Depth_m': 35.0, 'Abundance_Index': 0.7}\n    }\n    \n    # Region-specific mappings\n    region_mapping = {\n        'pacific': {'Region': 1, 'Latitude': 20.0, 'Longitude': -150.0, 'Sea_Surface_Temperature_C': 20.0, 'pH_Level': 8.0},\n        'atlantic': {'Region': 2, 'Latitude': 40.0, 'Longitude': -30.0, 'Sea_Surface_Temperature_C': 18.0, 'pH_Level': 8.1},\n        'mediterranean': {'Region': 3, 'Latitude': 38.0, 'Longitude': 15.0, 'Sea_Surface_Temperature_C': 19.0, 'pH_Level': 8.2},\n        'north': {'Region': 4, 'Latitude': 60.0, 'Longitude': -10.0, 'Sea_Surface_Temperature_C': 8.0, 'pH_Level': 8.3},\n        'south': {'Region': 5, 'Latitude': -30.0, 'Longitude': 20.0, 'Sea_Surface_Temperature_C': 16.0, 'pH_Level': 8.0}\n    }\n    \n    # Apply species-specific values\n    if species.lower() in species_mapping:\n        features.update(species_mapping[species.lower()])\n    \n    # Apply region-specific values\n    if region.lower() in region_mapping:\n        features.update(region_mapping[region.lower()])\n    \n    # Return features in the exact order expected by the model\n    feature_order = ['Species_Name', 'Scientific_Name', 'Region', 'Latitude', 'Longitude', 'Year',\n                    'Month', 'Sea_Surface_Temperature_C', 'Salinity_PSU', 'Dissolved_Oxygen_mgL',\n                    'Chlorophyll_mg_m3', 'pH_Level', 'Depth_m', 'Rainfall_mm', 'Wind_Speed_ms',\n                    'Catch_Per_Unit_Effort', 'Abundance_Index']\n    \n    return [features[feature] for feature in feature_order]\n\n@app.post(\"/predict\")\nasync def predict(input_data: PredictionInput):\n    query = input_data.query.lower()\n    \n    # Parse query for species and region\n    species_match = None\n    region_match = None\n    \n    # Extract species\n    species_keywords = [\"tuna\", \"salmon\", \"cod\", \"herring\", \"sardine\", \"mackerel\", \"shark\", \"bass\", \"trout\"]\n    for keyword in species_keywords:\n        if keyword in query:\n            species_match = keyword\n            break\n    \n    # Extract region  \n    region_keywords = [\"pacific\", \"atlantic\", \"mediterranean\", \"north\", \"south\", \"indian\", \"arctic\"]\n    for keyword in region_keywords:\n        if keyword in query:\n            region_match = keyword\n            break\n    \n    # Set defaults\n    species = species_match or \"tuna\"\n    region = region_match or \"pacific\"\n    \n    try:\n        # Use the actual trained model\n        if model_loaded and model is not None:\n            # Map query to the 17 features expected by your trained model\n            feature_vector = map_query_to_features(query, species, region)\n            \n            # Make prediction using your trained model\n            prediction_class = model.predict([feature_vector])[0]\n            prediction_proba = model.predict_proba([feature_vector])[0]\n            \n            # Map prediction classes to meaningful output\n            class_labels = {0: \"Declining\", 1: \"Stable\", 2: \"Increasing\"}\n            stock_status = class_labels.get(prediction_class, \"Unknown\")\n            \n            # Calculate confidence and other metrics\n            max_confidence = np.max(prediction_proba) * 100\n            \n            # Generate realistic population change based on prediction\n            if prediction_class == 0:  # Declining\n                population_change = random.uniform(-15, -2)\n            elif prediction_class == 1:  # Stable\n                population_change = random.uniform(-2, 2)\n            else:  # Increasing\n                population_change = random.uniform(2, 15)\n            \n            # Generate climate impact (usually negative)\n            climate_impact = random.uniform(-8, -2)\n            \n            # Generate genetic diversity based on population status\n            if prediction_class == 2:\n                genetic_diversity = \"High\"\n            elif prediction_class == 1:\n                genetic_diversity = \"Medium\"\n            else:\n                genetic_diversity = \"Low\"\n            \n            return {\n                \"query\": query,\n                \"species\": species,\n                \"region\": region,\n                \"prediction\": f\"Stock Status: {stock_status} ({population_change:+.1f}% by 2030)\",\n                \"fishPopulation\": f\"{population_change:+.1f}%\",\n                \"climateChange\": f\"{climate_impact:.1f}%\",\n                \"geneticDiversity\": genetic_diversity,\n                \"confidence\": f\"{max_confidence:.0f}%\",\n                \"model_used\": True,\n                \"prediction_class\": int(prediction_class),\n                \"class_probabilities\": prediction_proba.tolist()\n            }\n            \n        else:\n            # Fallback if model not loaded\n            prediction_data = generate_intelligent_prediction(species, region)\n            \n            return {\n                \"query\": query,\n                \"species\": species,\n                \"region\": region,\n                \"prediction\": f\"Predicted population change: {prediction_data['fishPopulation']} by 2030\",\n                \"fishPopulation\": prediction_data[\"fishPopulation\"],\n                \"climateChange\": prediction_data[\"climateChange\"], \n                \"geneticDiversity\": prediction_data[\"geneticDiversity\"],\n                \"confidence\": prediction_data[\"confidence\"],\n                \"model_used\": False\n            }\n            \n    except Exception as e:\n        logger.error(f\"Model prediction error: {e}\")\n        # Fallback to intelligent prediction on any error\n        prediction_data = generate_intelligent_prediction(species, region)\n        \n        return {\n            \"query\": query,\n            \"species\": species,\n            \"region\": region,\n            \"prediction\": f\"Predicted population change: {prediction_data['fishPopulation']} by 2030\",\n            \"fishPopulation\": prediction_data[\"fishPopulation\"],\n            \"climateChange\": prediction_data[\"climateChange\"],\n            \"geneticDiversity\": prediction_data[\"geneticDiversity\"], \n            \"confidence\": prediction_data[\"confidence\"],\n            \"model_used\": False,\n            \"error\": str(e)\n        }\n\n# Optional: Add endpoint to inspect model for debugging\n@app.get(\"/model_info\")\nasync def model_info():\n    info = {\"model_type\": str(type(model))}\n    if hasattr(model, 'get_params'):\n        info[\"parameters\"] = model.get_params()\n    if hasattr(model, 'feature_names_in_'):\n        info[\"expected_features\"] = list(model.feature_names_in_)\n    if hasattr(model, 'n_features_in_'):\n        info[\"n_features\"] = model.n_features_in_\n    if hasattr(model, 'classes_'):\n        info[\"classes\"] = list(model.classes_)\n    return info","size_bytes":11997},"client/src/Backend/validate_model.py":{"content":"import pickle\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nimport logging\nfrom pathlib import Path\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ModelValidator:\n    def __init__(self, model_path: str):\n        self.model_path = Path(model_path).resolve()  # Resolve to absolute path\n        self.model = None\n        logger.info(f\"Initializing with model path: {self.model_path}\")\n        self.load_model()\n    \n    def load_model(self):\n        \"\"\"Load the pickled model with detailed logging and version compatibility handling\"\"\"\n        logger.info(f\"Attempting to load model from: {self.model_path}\")\n        try:\n            # Try loading with warnings suppressed first\n            import warnings\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                with open(self.model_path, 'rb') as f:\n                    self.model = pickle.load(f)\n            logger.info(f\"Model loaded successfully from {self.model_path}\")\n            logger.info(f\"Model type: {type(self.model)}\")\n        except FileNotFoundError as e:\n            logger.error(f\"Model file not found at {self.model_path}: {e}\")\n            raise\n        except (pickle.UnpicklingError, AttributeError, TypeError) as e:\n            logger.warning(f\"Standard pickle loading failed: {e}\")\n            # Try alternative loading methods for version compatibility\n            try:\n                logger.info(\"Attempting compatibility mode loading...\")\n                import joblib\n                self.model = joblib.load(self.model_path)\n                logger.info(f\"Model loaded successfully using joblib from {self.model_path}\")\n                logger.info(f\"Model type: {type(self.model)}\")\n            except Exception as joblib_error:\n                logger.error(f\"Joblib loading also failed: {joblib_error}\")\n                logger.error(f\"All loading methods failed for {self.model_path}\")\n                raise\n        except Exception as e:\n            logger.error(f\"Unexpected error loading model from {self.model_path}: {e}\")\n            raise\n    \n    def inspect_model(self):\n        \"\"\"Inspect model properties\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded\")\n            return\n        \n        logger.info(\"=== Model Inspection ===\")\n        logger.info(f\"Model type: {type(self.model)}\")\n        \n        if hasattr(self.model, 'get_params'):\n            logger.info(f\"Model parameters: {self.model.get_params()}\")\n        \n        if hasattr(self.model, 'feature_names_in_'):\n            logger.info(f\"Expected features: {self.model.feature_names_in_}\")\n        \n        if hasattr(self.model, 'n_features_in_'):\n            logger.info(f\"Number of features: {self.model.n_features_in_}\")\n        \n        if hasattr(self.model, 'classes_'):\n            logger.info(f\"Classes: {self.model.classes_}\")\n    \n    def validate_input(self):\n        \"\"\"Validate if sample input matches model expectations\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded, cannot validate input\")\n            return False\n        \n        sample_data = np.array([[25.0, 7.5, 0.15, 0.8]])  # Default sample\n        is_valid = True\n        \n        if hasattr(self.model, 'feature_names_in_'):\n            expected_features = self.model.feature_names_in_\n            if len(sample_data[0]) != len(expected_features):\n                logger.error(f\"Sample data length ({len(sample_data[0])}) does not match expected features count ({len(expected_features)}): {expected_features}\")\n                is_valid = False\n            else:\n                logger.info(f\"Sample data matches expected features: {expected_features}\")\n        elif hasattr(self.model, 'n_features_in_'):\n            if len(sample_data[0]) != self.model.n_features_in_:\n                logger.error(f\"Sample data length ({len(sample_data[0])}) does not match n_features_in_ ({self.model.n_features_in_})\")\n                is_valid = False\n            else:\n                logger.info(f\"Sample data length matches n_features_in_: {self.model.n_features_in_}\")\n        \n        return is_valid\n    \n    def test_prediction(self):\n        \"\"\"Test model prediction with sample data\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded\")\n            return\n        \n        sample_data = np.array([[25.0, 7.5, 0.15, 0.8]])  # Adjust to match feature_names_in_\n        \n        if not self.validate_input():\n            logger.error(\"Input validation failed, skipping prediction test\")\n            return\n        \n        try:\n            if hasattr(self.model, 'feature_names_in_'):\n                sample_df = pd.DataFrame(sample_data, columns=self.model.feature_names_in_)\n                prediction = self.model.predict(sample_df)\n            else:\n                prediction = self.model.predict(sample_data)\n            \n            logger.info(f\"Sample prediction: {prediction}\")\n            \n            if hasattr(self.model, 'classes_'):\n                true_label = [0]  # Replace with actual label\n                logger.info(f\"Accuracy: {accuracy_score(true_label, prediction)}\")\n                logger.info(f\"Classification Report:\\n{classification_report(true_label, prediction)}\")\n                logger.info(f\"Confusion Matrix:\\n{confusion_matrix(true_label, prediction)}\")\n                \n        except Exception as e:\n            logger.error(f\"Prediction test failed: {e}\")\n\n# Run validation (for testing)\nif __name__ == \"__main__\":\n    validator = ModelValidator(\"fish_stock_model.pkl\")\n    validator.inspect_model()\n    validator.validate_input()\n    validator.test_prediction()","size_bytes":5778},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext'\nimport { useLocation } from 'wouter'\nimport { useEffect } from 'react'\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode\n}\n\nconst ProtectedRoute = ({ children }: ProtectedRouteProps) => {\n  const { user, loading } = useAuth()\n  const [, navigate] = useLocation()\n\n  useEffect(() => {\n    if (!loading && !user) {\n      navigate('/auth')\n    }\n  }, [user, loading, navigate])\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return null\n  }\n\n  return <>{children}</>\n}\n\nexport default ProtectedRoute","size_bytes":896},"client/src/components/footer.tsx":{"content":"const Footer = () => {\n  return (\n    <footer className=\"bg-card border-t border-border mt-20\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 ocean-gradient rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732L14.146 12.8l-1.179 4.456a1 1 0 01-1.934 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732L9.854 7.2l1.179-4.456A1 1 0 0112 2z\" clipRule=\"evenodd\"></path>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">OceanAI Platform</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Advanced AI-driven platform for ocean research and sustainable fisheries management.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Research Team</h3>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>👨‍💻 Biki Mukherjee – Frontend Developer & Project Lead</p>\n              <p>👨‍💻 Rupsa Pramanik – Backend & API Integration</p>\n              <p>👨‍💻 Sayan Samadder – Data Analyst & Visualization</p>\n              <p>👩‍💻 Debjit Chakraborty – AI/ML & Model Training</p>\n              <p>👩‍💻 Dipannita Biswas – Research & Documentation</p>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Data Sources</h3>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>NOAA Ocean Database</p>\n              <p>FAO Fisheries Statistics</p>\n              <p>GenBank Sequences</p>\n              <p>Copernicus Marine Data</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border pt-8 mt-8 text-center text-sm text-muted-foreground\">\n          <p>&copy; 2025 OceanAI Platform. Advancing marine science through artificial intelligence.</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":2580},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, User, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst Navigation = () => {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, signOut } = useAuth();\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/ocean-data\", label: \"Ocean Data\" },\n    { path: \"/fisheries-data\", label: \"Fisheries Data\" },\n    { path: \"/molecular-data\", label: \"Molecular Data\" },\n    { path: \"/ai-predictions\", label: \"AI Predictions\" },\n    { path: \"/about\", label: \"About\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\") return location === \"/\";\n    return location.startsWith(path);\n  };\n\n  return (\n    <nav className=\"glass-effect border-b border-border sticky top-0 z-50 wave-pattern\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo & Brand */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-8 h-8 ocean-gradient rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732L14.146 12.8l-1.179 4.456a1 1 0 01-1.934 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732L9.854 7.2l1.179-4.456A1 1 0 0112 2z\" clipRule=\"evenodd\"></path>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                OceanAI Platform\n              </span>\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                data-testid={`nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                <span\n                  className={`font-medium transition-colors duration-200 border-b-2 ${\n                    isActive(item.path)\n                      ? \"text-foreground border-primary\"\n                      : \"text-muted-foreground hover:text-primary border-transparent\"\n                  }`}\n                >\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n            \n            {/* Authentication */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"user-menu-trigger\">\n                    <User className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"glass-effect border-primary/20\">\n                  <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                    {user.user_metadata?.full_name || user.email}\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={signOut} className=\"text-destructive\" data-testid=\"logout-button\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Link href=\"/auth\">\n                <Button className=\"ocean-gradient text-primary-foreground hover:scale-105 transition-transform duration-200\" data-testid=\"login-button\">\n                  Sign In\n                </Button>\n              </Link>\n            )}\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"mobile-menu-button\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border py-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  <span\n                    className={`text-left py-2 font-medium transition-colors border-l-2 pl-3 ${\n                      isActive(item.path)\n                        ? \"text-foreground border-primary\"\n                        : \"text-muted-foreground hover:text-primary border-transparent\"\n                    }`}\n                  >\n                    {item.label}\n                  </span>\n                </Link>\n              ))}\n              \n              {/* Mobile Authentication */}\n              <div className=\"pt-4 border-t border-border\">\n                {user ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-muted-foreground px-3\">\n                      {user.email}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={signOut}\n                      className=\"w-full justify-start text-destructive\"\n                      data-testid=\"mobile-logout-button\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </Button>\n                  </div>\n                ) : (\n                  <Link href=\"/auth\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button className=\"w-full ocean-gradient text-primary-foreground\" data-testid=\"mobile-login-button\">\n                      Sign In\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","size_bytes":6924},"client/src/components/stat-card.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  unit: string;\n  trend: string;\n  trendType: \"up\" | \"down\";\n  icon: ReactNode;\n  iconColor: string;\n}\n\nconst StatCard = ({ title, value, unit, trend, trendType, icon, iconColor }: StatCardProps) => {\n  return (\n    <Card className=\"hover:border-primary/50 transition-all duration-300 group\" data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`p-3 ${iconColor} rounded-lg group-hover:opacity-80 transition-opacity`}>\n            {icon}\n          </div>\n          <span className=\"text-sm text-muted-foreground\">{unit}</span>\n        </div>\n        <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-2\">{title}</p>\n        <div className={`flex items-center text-sm ${trendType === \"up\" ? \"text-green-400\" : \"text-red-400\"}`}>\n          <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            {trendType === \"up\" ? (\n              <path fillRule=\"evenodd\" d=\"M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path>\n            ) : (\n              <path fillRule=\"evenodd\" d=\"M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z\" clipRule=\"evenodd\"></path>\n            )}\n          </svg>\n          <span data-testid={`stat-trend-${title.toLowerCase().replace(/\\s+/g, '-')}`}>{trend}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatCard;\n","size_bytes":1953},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  session: null,\n  loading: true,\n  signOut: async () => {},\n})\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Check if Supabase is properly configured\n    const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                          import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                          import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n    if (!hasValidConfig) {\n      // For demo purposes, create a mock user but check localStorage for real signup data\n      const savedUser = localStorage.getItem('oceanai_user')\n      const mockUser: any = savedUser ? JSON.parse(savedUser) : {\n        id: 'demo-user',\n        email: 'user@example.com',\n        user_metadata: {\n          full_name: 'Demo User',\n          username: 'DemoUser'\n        },\n        created_at: new Date().toISOString()\n      }\n      setUser(mockUser)\n      setLoading(false)\n      return\n    }\n\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    }).catch(() => {\n      setLoading(false)\n    })\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signOut = async () => {\n    const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                          import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                          import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n    if (hasValidConfig) {\n      await supabase.auth.signOut()\n    } else {\n      // For demo, clear the mock user and localStorage\n      localStorage.removeItem('oceanai_user')\n      setUser(null)\n      setSession(null)\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, session, loading, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","size_bytes":2824},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://clqxyfdfehpwifxbjgfl.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNscXh5ZmRmZWhwd2lmeGJqZ2ZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MTEyMzgsImV4cCI6MjA3Mjk4NzIzOH0.WH9XImx0BIBDHxJAtKvWPl-EAQ-b1F3NvZjPoVMcDAg'\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":498},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst About = () => {\n  const teamMembers = [\n    {\n      name: \"Biki Mukherjee\",\n      role: \"Frontend Developer & Project Lead\",\n      initials: \"BM\",\n      gradient: \"from-primary to-accent\",\n      image: \"src/images/biki.png\", // Add your image path here\n    },\n    {\n      name: \"Rupsa Pramanik\",\n      role: \"Backend & API Integration\",\n      initials: \"RP\",\n      gradient: \"from-accent to-green-400\",\n      image: \"/images/rupsa-pramanik.jpg\", // Add your image path here\n    },\n    {\n      name: \"Sayan Samadder\",\n      role: \"Frontend Developer\",\n      initials: \"SS\",\n      gradient: \"from-accent to-green-400\",\n      image: \"/images/sayan-samadder.jpg\", // Add your image path here\n    },\n    {\n      name: \"Dipannita Biswas\",\n      role: \"Documenctation Presentator\",\n      initials: \"DB\",\n      gradient: \"from-accent to-green-400\",\n      image: \"/images/dipannita-biswas.jpg\", // Add your image path here\n    },\n    {\n      name: \"Debjit Chakraborty\",\n      role: \"AI/ML & Model Integration\",\n      initials: \"DC\",\n      gradient: \"from-green-400 to-blue-400\",\n      image: \"/images/debjit-chakraborty.jpg\", // Add your image path here\n    },\n  ];\n\n  const dataSources = [\n    \"NOAA Ocean Database\",\n    \"FAO Global Fisheries Statistics\",\n    \"Copernicus Marine Environment\",\n    \"OBIS Biodiversity Records\",\n    \"GenBank Genetic Sequences\",\n    \"Satellite Oceanography Data\",\n    \"Regional Fisheries Organizations\",\n    \"Marine Protected Area Networks\",\n  ];\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">About OceanAI Platform</h1>\n          <p className=\"text-lg text-muted-foreground\">Revolutionizing ocean research through artificial intelligence</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Our Mission</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                To accelerate ocean conservation and sustainable fisheries management through cutting-edge AI and comprehensive data integration, \n                providing researchers and policymakers with actionable insights for protecting marine ecosystems.\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Technology</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Our platform leverages machine learning algorithms, satellite data, genomic analysis, and real-time sensor networks \n                to provide unprecedented insights into ocean health and fish population dynamics.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">Research Team</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {teamMembers.map((member, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className={`w-24 h-24 bg-gradient-to-br ${member.gradient} rounded-full mx-auto mb-4 flex items-center justify-center overflow-hidden relative`}>\n                    {member.image ? (\n                      <img\n                        src={member.image}\n                        alt={`${member.name} profile`}\n                        className=\"w-full h-full object-cover rounded-full\"\n                        onError={(e) => {\n                          // Fallback to initials if image fails to load\n                          e.target.style.display = 'none';\n                          e.target.nextSibling.style.display = 'flex';\n                        }}\n                      />\n                    ) : null}\n                    <span \n                      className={`text-2xl font-bold text-primary-foreground absolute inset-0 flex items-center justify-center ${member.image ? 'hidden' : 'flex'}`}\n                      data-testid={`team-member-initials-${index}`}\n                    >\n                      {member.initials}\n                    </span>\n                  </div>\n                  <h3 className=\"font-semibold text-foreground\" data-testid={`team-member-name-${index}`}>\n                    {member.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`team-member-role-${index}`}>\n                    {member.role}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Data Sources</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n              <div>\n                <ul className=\"space-y-2\">\n                  {dataSources.slice(0, 4).map((source, index) => (\n                    <li key={index} data-testid={`data-source-${index}`}>• {source}</li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <ul className=\"space-y-2\">\n                  {dataSources.slice(4).map((source, index) => (\n                    <li key={index + 4} data-testid={`data-source-${index + 4}`}>• {source}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n};\n\nexport default About;","size_bytes":5903},"client/src/pages/ai-predictions.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Sparkles, TrendingUp, Thermometer, Dna, Brain, Activity, Globe } from \"lucide-react\";\n\n// Mock auth context for demonstration\nconst useAuth = () => ({\n  user: { name: \"Demo User\" }\n});\n\n// Mock Link component\nconst Link = ({ href, children }: { href: string; children: React.ReactNode }) => (\n  <a href={href}>{children}</a>\n);\n\n// Mock chart components\nconst OceanTempChart = () => (\n  <div className=\"h-[120px] flex items-center justify-center text-gray-400\">\n    <div className=\"text-center\">\n      <Thermometer className=\"w-6 h-6 mx-auto mb-2 text-blue-400\" />\n      <div className=\"text-xs\">Temperature: +2.3°C</div>\n    </div>\n  </div>\n);\n\nconst SpeciesDiversityChart = () => (\n  <div className=\"h-[120px] flex items-center justify-center text-gray-400\">\n    <div className=\"text-center\">\n      <Dna className=\"w-6 h-6 mx-auto mb-2 text-green-400\" />\n      <div className=\"text-xs\">Diversity Index: 0.74</div>\n    </div>\n  </div>\n);\n\n// Leaflet Map Component\nconst LeafletMap = ({ regionData }: { regionData?: any }) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const predictionMarkerRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!mapRef.current || mapInstanceRef.current) return;\n\n    // Load Leaflet CSS\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css';\n    document.head.appendChild(link);\n\n    // Add custom CSS to fix z-index and positioning issues\n    const customStyles = document.createElement('style');\n    customStyles.textContent = `\n      .leaflet-container {\n        z-index: 1 !important;\n        position: relative !important;\n      }\n      .leaflet-control-container {\n        z-index: 2 !important;\n      }\n      .leaflet-popup {\n        z-index: 3 !important;\n      }\n      .leaflet-map-pane {\n        z-index: 1 !important;\n      }\n      .leaflet-tile-pane {\n        z-index: 1 !important;\n      }\n      .leaflet-overlay-pane {\n        z-index: 2 !important;\n      }\n      .leaflet-shadow-pane {\n        z-index: 1 !important;\n      }\n      .leaflet-marker-pane {\n        z-index: 2 !important;\n      }\n      .leaflet-tooltip-pane {\n        z-index: 3 !important;\n      }\n      .leaflet-popup-pane {\n        z-index: 3 !important;\n      }\n      .leaflet-control-zoom {\n        z-index: 2 !important;\n      }\n      .leaflet-control-attribution {\n        z-index: 2 !important;\n      }\n      @keyframes pulse {\n        0% { transform: scale(1); opacity: 1; }\n        50% { transform: scale(1.2); opacity: 0.8; }\n        100% { transform: scale(1); opacity: 1; }\n      }\n      .custom-popup .leaflet-popup-content-wrapper {\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n      }\n      .custom-popup .leaflet-popup-tip {\n        background: white;\n      }\n    `;\n    document.head.appendChild(customStyles);\n\n    // Load Leaflet JS\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js';\n    script.onload = () => {\n      const L = (window as any).L;\n      \n      // Initialize map with proper z-index configuration\n      const map = L.map(mapRef.current, {\n        zoomControl: true,\n        attributionControl: true\n      }).setView([20, 0], 2);\n      mapInstanceRef.current = map;\n\n      // Add ocean-themed tile layer\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 18,\n      }).addTo(map);\n\n      // Custom icon for marine data points\n      const createCustomIcon = (color: string) => {\n        return L.divIcon({\n          className: 'custom-div-icon',\n          html: `<div style=\"\n            width: 16px; \n            height: 16px; \n            background-color: ${color}; \n            border: 2px solid white; \n            border-radius: 50%; \n            box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n            animation: pulse 2s infinite;\n            z-index: 2;\n          \"></div>`,\n          iconSize: [16, 16],\n          iconAnchor: [8, 8]\n        });\n      };\n\n      // Add marine monitoring stations with predictions\n      const marineStations = [\n        {\n          lat: 45.5,\n          lng: -30.2,\n          name: \"North Atlantic Station\",\n          species: \"Atlantic Cod\",\n          prediction: \"+12.7%\",\n          color: \"#10b981\"\n        },\n        {\n          lat: 35.2,\n          lng: -120.4,\n          name: \"Pacific Coast Station\", \n          species: \"Pacific Salmon\",\n          prediction: \"+8.9%\",\n          color: \"#3b82f6\"\n        },\n        {\n          lat: 42.3,\n          lng: 15.1,\n          name: \"Mediterranean Station\",\n          species: \"Bluefin Tuna\",\n          prediction: \"-3.2%\",\n          color: \"#ef4444\"\n        },\n        {\n          lat: -25.5,\n          lng: 153.2,\n          name: \"Great Barrier Reef\",\n          species: \"Coral Trout\",\n          prediction: \"+5.4%\",\n          color: \"#f59e0b\"\n        },\n        {\n          lat: 60.1,\n          lng: 5.3,\n          name: \"Norwegian Sea\",\n          species: \"Herring\",\n          prediction: \"+15.3%\",\n          color: \"#10b981\"\n        },\n        {\n          lat: -40.2,\n          lng: -55.8,\n          name: \"South Atlantic\",\n          species: \"Patagonian Toothfish\",\n          prediction: \"-8.1%\",\n          color: \"#ef4444\"\n        }\n      ];\n\n      // Add markers for each station\n      marineStations.forEach(station => {\n        const marker = L.marker([station.lat, station.lng], {\n          icon: createCustomIcon(station.color)\n        }).addTo(map);\n\n        // Create popup content\n        const popupContent = `\n          <div style=\"font-family: system-ui, -apple-system, sans-serif; min-width: 200px;\">\n            <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: bold; color: #1f2937;\">\n              ${station.name}\n            </h3>\n            <div style=\"margin-bottom: 6px;\">\n              <span style=\"font-size: 12px; color: #6b7280;\">Species:</span>\n              <span style=\"font-size: 12px; font-weight: 500; color: #1f2937; margin-left: 4px;\">\n                ${station.species}\n              </span>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <span style=\"font-size: 12px; color: #6b7280;\">12-Month Prediction:</span>\n              <span style=\"\n                font-size: 12px; \n                font-weight: bold; \n                margin-left: 4px;\n                color: ${station.prediction.startsWith('+') ? '#10b981' : '#ef4444'};\n              \">\n                ${station.prediction}\n              </span>\n            </div>\n            <div style=\"\n              background: ${station.color}15; \n              border: 1px solid ${station.color}30; \n              border-radius: 4px; \n              padding: 4px 6px; \n              font-size: 10px; \n              color: #6b7280;\n              text-align: center;\n            \">\n              AI Confidence: 87-91%\n            </div>\n          </div>\n        `;\n\n        marker.bindPopup(popupContent, {\n          maxWidth: 250,\n          className: 'custom-popup'\n        });\n\n        // Add hover effects\n        marker.on('mouseover', function() {\n          this.openPopup();\n        });\n      });\n\n      // Add ocean current simulation (visual effect)\n      const addOceanCurrents = () => {\n        const currentPaths = [\n          [[60, -30], [45, -20], [30, -10], [15, 0]], // Gulf Stream\n          [[-10, 20], [0, 30], [10, 40], [20, 50]], // Canary Current\n          [[40, 140], [35, 150], [30, 160], [25, 170]] // Kuroshio Current\n        ];\n\n        currentPaths.forEach((path, index) => {\n          setTimeout(() => {\n            const polyline = L.polyline(path, {\n              color: '#3b82f6',\n              weight: 2,\n              opacity: 0.6,\n              dashArray: '5, 10'\n            }).addTo(map);\n\n            polyline.bindTooltip(`Ocean Current ${index + 1}`, {\n              permanent: false,\n              direction: 'center'\n            });\n          }, index * 1000);\n        });\n      };\n\n      // Add currents after a short delay\n      setTimeout(addOceanCurrents, 2000);\n    };\n\n    document.head.appendChild(script);\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add prediction marker when regionData changes\n  useEffect(() => {\n    if (!mapInstanceRef.current || !regionData) return;\n\n    const map = mapInstanceRef.current;\n    \n    // Remove existing prediction marker\n    if (predictionMarkerRef.current) {\n      map.removeLayer(predictionMarkerRef.current);\n    }\n\n    // Define region coordinates\n    const regionCoordinates: { [key: string]: [number, number] } = {\n      'pacific': [20, -150],\n      'atlantic': [40, -30],\n      'mediterranean': [38, 15],\n      'north': [60, -10],\n      'south': [-30, 20],\n      'indian': [-20, 80],\n      'arctic': [75, 0],\n      'gulf': [25, -90],\n      'sea': [35, 25],\n      'ocean': [0, 0]\n    };\n\n    const region = regionData.region?.toLowerCase() || 'ocean';\n    const coordinates = regionCoordinates[region] || regionCoordinates['ocean'];\n\n    // Create custom icon for prediction\n    const predictionIcon = (window as any).L?.divIcon({\n      html: `\n        <div style=\"\n          background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n          border: 3px solid white;\n          border-radius: 50%;\n          width: 20px;\n          height: 20px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n          animation: pulse 2s infinite;\n        \">\n          <div style=\"\n            background: white;\n            border-radius: 50%;\n            width: 8px;\n            height: 8px;\n          \"></div>\n        </div>\n      `,\n      className: 'prediction-marker',\n      iconSize: [20, 20],\n      iconAnchor: [10, 10]\n    });\n\n    // Add prediction marker\n    if ((window as any).L) {\n      const marker = (window as any).L.marker(coordinates, {\n        icon: predictionIcon\n      }).addTo(map);\n\n      // Create popup with prediction data\n      const popupContent = `\n        <div style=\"font-family: system-ui, -apple-system, sans-serif; min-width: 220px;\">\n          <h3 style=\"margin: 0 0 8px 0; font-size: 14px; font-weight: bold; color: #1f2937;\">\n            🎯 AI Prediction Result\n          </h3>\n          <div style=\"margin-bottom: 6px;\">\n            <span style=\"font-size: 12px; color: #6b7280;\">Species:</span>\n            <span style=\"font-size: 12px; font-weight: 500; color: #1f2937; margin-left: 4px;\">\n              ${regionData.species}\n            </span>\n          </div>\n          <div style=\"margin-bottom: 6px;\">\n            <span style=\"font-size: 12px; color: #6b7280;\">Region:</span>\n            <span style=\"font-size: 12px; font-weight: 500; color: #1f2937; margin-left: 4px;\">\n              ${regionData.region}\n            </span>\n          </div>\n          <div style=\"margin-bottom: 8px;\">\n            <span style=\"font-size: 12px; color: #6b7280;\">Stock Status:</span>\n            <span style=\"\n              font-size: 12px; \n              font-weight: bold; \n              margin-left: 4px;\n              color: ${regionData.stock_status === 'Increasing' ? '#10b981' : regionData.stock_status === 'Declining' ? '#ef4444' : '#f59e0b'};\n            \">\n              ${regionData.stock_status} (${regionData.fishPopulation})\n            </span>\n          </div>\n          <div style=\"\n            background: #3b82f615; \n            border: 1px solid #3b82f630; \n            border-radius: 4px; \n            padding: 4px 6px; \n            font-size: 10px; \n            color: #6b7280;\n            text-align: center;\n          \">\n            AI Confidence: ${regionData.confidence} | Model: ${regionData.model_used ? 'Your Trained Model ✅' : 'Fallback ❌'}\n          </div>\n        </div>\n      `;\n\n      marker.bindPopup(popupContent, {\n        maxWidth: 280,\n        className: 'prediction-popup'\n      });\n\n      // Auto-open popup and zoom to location\n      marker.openPopup();\n      map.setView(coordinates, 5);\n\n      predictionMarkerRef.current = marker;\n    }\n  }, [regionData]);\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"w-full h-full rounded-lg relative overflow-hidden\" \n      style={{ \n        minHeight: '400px',\n        zIndex: 1,\n        position: 'relative'\n      }} \n    />\n  );\n};\n\nconst AIPredictions = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [rawModelOutput, setRawModelOutput] = useState<any>(null);\n  const { user } = useAuth();\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) return;\n    if (!user) return;\n\n    setIsGenerating(true);\n\n    try {\n      // Make real API call to ML backend\n      const response = await fetch(\"/api/ml-predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          query: searchQuery\n        }),\n      });\n\n      const data = await response.json();\n\n      // Check if it's a validation error (400 status)  \n      if (!response.ok) {\n        if (response.status === 400) {\n          // Species validation error - show error message\n          setRawModelOutput(null);\n          setSearchResults([]);\n          throw new Error(data.error || \"Invalid species. Please search for marine species like tuna, salmon, cod, etc.\");\n        } else {\n          throw new Error(data.error || \"Prediction failed\");\n        }\n      }\n\n      // Store raw model output for display\n      setRawModelOutput(data);\n\n      // Generate multiple scenarios based on the prediction\n      const baseResults = [\n        {\n          id: \"1\",\n          species: data.species || searchQuery,\n          region: \"North Atlantic\",\n          timeframe: \"12 months\",\n          scenario: \"Current Conditions\",\n          fishPopulation: data.fishPopulation || \"+12.7%\",\n          climateChange: data.climateChange || \"-5.2%\",\n          geneticDiversity: data.geneticDiversity || \"High\",\n          confidence: data.confidence || \"91%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"2\", \n          species: data.species || searchQuery,\n          region: \"Pacific Ocean\",\n          timeframe: \"12 months\", \n          scenario: \"RCP 4.5\",\n          fishPopulation: data.fishPopulation || \"+8.9%\",\n          climateChange: data.climateChange || \"-9.4%\",\n          geneticDiversity: data.geneticDiversity || \"Medium\",\n          confidence: data.confidence || \"84%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"3\",\n          species: data.species || searchQuery,\n          region: data.region || \"Mediterranean\",\n          timeframe: \"12 months\",\n          scenario: \"RCP 8.5\",\n          fishPopulation: data.fishPopulation || \"-3.2%\",\n          climateChange: data.climateChange || \"-15.7%\",\n          geneticDiversity: data.geneticDiversity || \"Low\",\n          confidence: data.confidence || \"88%\",\n          createdAt: new Date().toISOString()\n        }\n      ];\n\n      setSearchResults(baseResults);\n      \n    } catch (error) {\n      console.error(\"Prediction failed:\", error);\n      \n      // Fallback to original mock data on error\n      const mockResults = [\n        {\n          id: \"1\",\n          species: searchQuery,\n          region: \"North Atlantic\",\n          timeframe: \"12 months\",\n          scenario: \"Current Conditions\",\n          fishPopulation: \"+12.7%\",\n          climateChange: \"-5.2%\",\n          geneticDiversity: \"High\",\n          confidence: \"91%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"2\", \n          species: searchQuery,\n          region: \"Pacific Ocean\",\n          timeframe: \"12 months\", \n          scenario: \"RCP 4.5\",\n          fishPopulation: \"+8.9%\",\n          climateChange: \"-9.4%\",\n          geneticDiversity: \"Medium\",\n          confidence: \"84%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"3\",\n          species: searchQuery,\n          region: \"Mediterranean\",\n          timeframe: \"12 months\",\n          scenario: \"RCP 8.5\",\n          fishPopulation: \"-3.2%\",\n          climateChange: \"-15.7%\",\n          geneticDiversity: \"Low\",\n          confidence: \"88%\",\n          createdAt: new Date().toISOString()\n        }\n      ];\n      \n      setSearchResults(mockResults);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gray-900 min-h-screen\">\n        <div className=\"container mx-auto max-w-2xl text-center\">\n          <div className=\"mb-8\">\n            <Brain className=\"w-16 h-16 text-blue-400 mx-auto mb-4\" />\n            <h1 className=\"text-4xl font-bold text-white mb-4\">AI Predictions</h1>\n            <p className=\"text-lg text-gray-300 mb-8\">\n              Sign in to access advanced AI-powered predictions and ecosystem forecasting\n            </p>\n            <Link href=\"/auth\">\n              <Button className=\"bg-gradient-to-r from-blue-500 to-teal-500 text-white px-8 py-4 text-lg hover:scale-105 transition-transform duration-200\">\n                Sign In to Continue\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900\">\n      {/* Header */}\n      <section className=\"py-12 px-4 sm:px-6 lg:px-8 border-b border-gray-700 bg-gradient-to-r from-gray-800 to-gray-900\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"p-3 bg-gradient-to-r from-blue-500 to-teal-500 rounded-2xl mr-4\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-teal-400 to-blue-400 bg-clip-text text-transparent\">\n                AI Ocean Intelligence\n              </h1>\n            </div>\n            <p className=\"text-lg text-gray-300 max-w-2xl mx-auto\">\n              Search species or regions to generate AI-powered predictions for marine ecosystems\n            </p>\n          </div>\n\n          {/* Search Interface */}\n          <Card className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 max-w-2xl mx-auto shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search species or region (e.g., 'Bluefin Tuna North Atlantic')\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-12 h-12 bg-gray-700/50 border-gray-600 text-white placeholder:text-gray-400\"\n                  />\n                </div>\n                <Button \n                  onClick={handleSearch}\n                  disabled={isGenerating || !searchQuery.trim()}\n                  className=\"h-12 px-8 bg-gradient-to-r from-blue-500 to-teal-500 text-white hover:scale-105 transition-all duration-200\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <Activity className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Predict\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Model Output Box */}\n          {rawModelOutput && (\n            <div className=\"mt-6\">\n              <Card className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 max-w-4xl mx-auto shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Brain className=\"w-5 h-5 mr-2 text-green-400\" />\n                    AI Model Output - fish_stock_model.pkl\n                    {rawModelOutput.model_used && (\n                      <Badge className=\"ml-2 bg-green-900/50 text-green-300 border-green-700\">\n                        ✅ Model Active\n                      </Badge>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Quick Summary */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-900/50 rounded-lg border border-gray-700\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-400\">\n                          {rawModelOutput.stock_status || \"Unknown\"}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">Stock Status</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-teal-400\">\n                          {rawModelOutput.confidence || \"N/A\"}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">Confidence</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-yellow-400\">\n                          Class {rawModelOutput.prediction_class}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">Prediction Class</div>\n                      </div>\n                    </div>\n\n                    {/* Raw JSON Output */}\n                    <div className=\"bg-gray-900/70 rounded-lg p-4 border border-gray-600\">\n                      <h4 className=\"text-sm font-semibold text-gray-300 mb-2\">Raw Model Response:</h4>\n                      <pre className=\"text-xs text-green-300 overflow-x-auto whitespace-pre-wrap max-h-40 overflow-y-auto\">\n                        {JSON.stringify(rawModelOutput, null, 2)}\n                      </pre>\n                    </div>\n\n                    {/* Class Probabilities */}\n                    {rawModelOutput.class_probabilities && (\n                      <div className=\"bg-gray-900/50 rounded-lg p-4 border border-gray-700\">\n                        <h4 className=\"text-sm font-semibold text-gray-300 mb-3\">Class Probabilities:</h4>\n                        <div className=\"space-y-2\">\n                          {rawModelOutput.class_probabilities.map((prob: number, index: number) => {\n                            const labels = ['Declining', 'Stable', 'Increasing'];\n                            const colors = ['bg-red-500', 'bg-yellow-500', 'bg-green-500'];\n                            return (\n                              <div key={index} className=\"flex items-center space-x-3\">\n                                <div className=\"w-20 text-sm text-gray-300\">{labels[index]}:</div>\n                                <div className=\"flex-1 bg-gray-700 rounded-full h-2 relative\">\n                                  <div \n                                    className={`${colors[index]} h-2 rounded-full transition-all duration-500`}\n                                    style={{ width: `${prob * 100}%` }}\n                                  ></div>\n                                </div>\n                                <div className=\"w-16 text-sm text-gray-400 text-right\">\n                                  {(prob * 100).toFixed(1)}%\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Main Dashboard */}\n      <section className=\"py-8 px-4 sm:px-6 lg:px-8 relative\">\n        <div className=\"container mx-auto max-w-7xl\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            \n            {/* Interactive Ocean Map - Left Side */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"h-full backdrop-blur-sm bg-gray-800/70 border-gray-600 shadow-lg relative overflow-hidden\" style={{ zIndex: 1 }}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Globe className=\"w-5 h-5 mr-2 text-blue-400\" />\n                    Interactive Ocean Map\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"aspect-video rounded-lg overflow-hidden border border-gray-600 relative\" style={{ zIndex: 1 }}>\n                    <LeafletMap regionData={rawModelOutput} />\n                  </div>\n                  <div className=\"mt-4 flex flex-wrap gap-2 relative\" style={{ zIndex: 2 }}>\n                    <Badge className=\"bg-green-900/50 text-green-300 border-green-700\">\n                      <span className=\"w-2 h-2 bg-green-400 rounded-full mr-1\"></span>\n                      Increasing Population\n                    </Badge>\n                    <Badge className=\"bg-red-900/50 text-red-300 border-red-700\">\n                      <span className=\"w-2 h-2 bg-red-400 rounded-full mr-1\"></span>\n                      Declining Population\n                    </Badge>\n                    <Badge className=\"bg-blue-900/50 text-blue-300 border-blue-700\">\n                      <span className=\"w-2 h-2 bg-blue-400 rounded-full mr-1\"></span>\n                      Monitoring Station\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Charts Panel - Right Side */}\n            <div className=\"space-y-6\" style={{ position: 'relative', zIndex: 1 }}>\n              {/* Ocean Temperature Trend */}\n              <Card className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-sm text-white\">\n                    <Thermometer className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    Ocean Temperature Trend\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <OceanTempChart />\n                </CardContent>\n              </Card>\n              \n              {/* Fish Stock Levels */}\n              <Card className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-sm text-white\">\n                    <TrendingUp className=\"w-4 h-4 mr-2 text-teal-400\" />\n                    Fish Stock Levels\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[120px] flex items-center justify-center text-gray-400\">\n                    <div className=\"text-center\">\n                      <TrendingUp className=\"w-6 h-6 mx-auto mb-2 text-teal-400\" />\n                      <div className=\"text-xs\">Stock Level: Moderate</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Species Diversity */}\n              <Card className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-sm text-white\">\n                    <Dna className=\"w-4 h-4 mr-2 text-green-400\" />\n                    Species Diversity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <SpeciesDiversityChart />\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Search Results */}\n          {searchResults.length > 0 && (\n            <div className=\"mt-12 relative\" style={{ zIndex: 1 }}>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-white mb-2\">Prediction Results</h2>\n                <p className=\"text-gray-300\">AI-generated predictions for \"{searchQuery}\"</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {searchResults.map((result) => (\n                  <Card key={result.id} className=\"backdrop-blur-sm bg-gray-800/70 border-gray-600 hover:border-gray-500 transition-all duration-300 hover:scale-105 shadow-lg\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg text-white\">{result.region}</CardTitle>\n                        <Badge className=\"bg-blue-900/50 text-blue-300 border-blue-700\">\n                          {result.confidence} confidence\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {/* Fish Population */}\n                      <div className=\"p-3 bg-gradient-to-r from-blue-900/30 to-blue-800/30 rounded-lg border border-blue-700/50\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-gray-300\">\n                            📈 Fish Population\n                          </span>\n                          <span className={`font-bold ${result.fishPopulation.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>\n                            {result.fishPopulation}\n                          </span>\n                        </div>\n                        <div className=\"w-full h-1 bg-gray-700 rounded-full overflow-hidden\">\n                          <div className={`h-full rounded-full ${result.fishPopulation.startsWith('+') ? 'bg-green-400' : 'bg-red-400'}`} style={{width: '70%'}}></div>\n                        </div>\n                      </div>\n\n                      {/* Climate Change Effect */}\n                      <div className=\"p-3 bg-gradient-to-r from-red-900/30 to-red-800/30 rounded-lg border border-red-700/50\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-gray-300\">\n                            🌡️ Climate Impact\n                          </span>\n                          <span className=\"font-bold text-red-400\">\n                            {result.climateChange}\n                          </span>\n                        </div>\n                        <div className=\"w-full h-1 bg-gray-700 rounded-full overflow-hidden\">\n                          <div className=\"h-full bg-red-400 rounded-full\" style={{width: '45%'}}></div>\n                        </div>\n                      </div>\n\n                      {/* Genetic Diversity */}\n                      <div className=\"p-3 bg-gradient-to-r from-yellow-900/30 to-yellow-800/30 rounded-lg border border-yellow-700/50\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-gray-300\">\n                            🧬 Genetic Risk\n                          </span>\n                          <Badge \n                            className={`${\n                              result.geneticDiversity === 'High' ? 'bg-green-900/50 text-green-300 border-green-700' :\n                              result.geneticDiversity === 'Medium' ? 'bg-yellow-900/50 text-yellow-300 border-yellow-700' :\n                              'bg-red-900/50 text-red-300 border-red-700'\n                            }`}\n                          >\n                            {result.geneticDiversity}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"text-xs text-gray-400 pt-2 border-t border-gray-700\">\n                        Scenario: {result.scenario} • Timeframe: {result.timeframe}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* No Results State */}\n          {!searchResults.length && !isGenerating && (\n            <div className=\"mt-12 text-center relative\" style={{ zIndex: 1 }}>\n              <div className=\"max-w-md mx-auto\">\n                <Brain className=\"w-16 h-16 text-gray-600 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium text-white mb-2\">Ready for AI Analysis</h3>\n                <p className=\"text-gray-400\">\n                  Enter a species or region above to generate AI-powered predictions and insights\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default AIPredictions;","size_bytes":34005},"client/src/pages/auth.tsx":{"content":"import { useState } from 'react'\nimport { Link } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { supabase } from '@/lib/supabase'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { useEffect } from 'react'\nimport { useLocation } from 'wouter'\n\nconst Auth = () => {\n  const [isLogin, setIsLogin] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n  const { user } = useAuth()\n  const [, navigate] = useLocation()\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      navigate('/')\n    }\n  }, [user, navigate])\n\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    fullName: '',\n    organization: '',\n    role: '',\n  })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(null)\n    setSuccess(null)\n\n    try {\n      const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                            import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                            import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n      if (hasValidConfig) {\n        if (isLogin) {\n          // Login with Supabase\n          const { error } = await supabase.auth.signInWithPassword({\n            email: formData.email,\n            password: formData.password,\n          })\n          \n          if (error) throw error\n          \n          setSuccess('Successfully logged in!')\n        } else {\n          // Sign up with Supabase\n          const { error } = await supabase.auth.signUp({\n            email: formData.email,\n            password: formData.password,\n            options: {\n              data: {\n                full_name: formData.fullName,\n                organization: formData.organization,\n                role: formData.role,\n              }\n            }\n          })\n          \n          if (error) throw error\n          \n          setSuccess('Check your email for the confirmation link!')\n        }\n      } else {\n        // Demo mode - save to localStorage and create user\n        if (isLogin) {\n          const savedUser = localStorage.getItem('oceanai_user')\n          if (!savedUser) {\n            throw new Error('No account found. Please sign up first.')\n          }\n          setSuccess('Successfully logged in!')\n        } else {\n          // Create new user in demo mode\n          const newUser = {\n            id: `demo-${Date.now()}`,\n            email: formData.email,\n            user_metadata: {\n              full_name: formData.fullName || 'User',\n              organization: formData.organization,\n              role: formData.role\n            },\n            created_at: new Date().toISOString()\n          }\n          localStorage.setItem('oceanai_user', JSON.stringify(newUser))\n          setSuccess('Account created successfully!')\n        }\n        \n        // Auto redirect after success in demo mode\n        setTimeout(() => {\n          window.location.href = '/'\n        }, 1500)\n      }\n    } catch (error: any) {\n      setError(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (user) {\n    return null // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 wave-pattern\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-accent/5 to-background opacity-50\"></div>\n      \n      <Card className=\"w-full max-w-md glass-effect border-primary/20 relative z-10\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 ocean-gradient rounded-lg flex items-center justify-center\">\n              <svg className=\"w-7 h-7 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732L14.146 12.8l-1.179 4.456a1 1 0 01-1.934 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732L9.854 7.2l1.179-4.456A1 1 0 0112 2z\" clipRule=\"evenodd\"></path>\n              </svg>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            OceanAI Platform\n          </CardTitle>\n          <CardDescription className=\"text-center text-muted-foreground\">\n            {isLogin ? 'Sign in to your account' : 'Create your research account'}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          {error && (\n            <Alert className=\"mb-4 border-destructive/50 bg-destructive/10\">\n              <AlertDescription className=\"text-destructive\">{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {success && (\n            <Alert className=\"mb-4 border-green-500/50 bg-green-500/10\">\n              <AlertDescription className=\"text-green-400\">{success}</AlertDescription>\n            </Alert>\n          )}\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name</Label>\n                  <Input\n                    id=\"fullName\"\n                    name=\"fullName\"\n                    type=\"text\"\n                    value={formData.fullName}\n                    onChange={handleInputChange}\n                    placeholder=\"Arnab Das\"\n                    data-testid=\"input-fullname\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"organization\">Organization</Label>\n                  <Input\n                    id=\"organization\"\n                    name=\"organization\"\n                    type=\"text\"\n                    value={formData.organization}\n                    onChange={handleInputChange}\n                    placeholder=\"Marine Research Institute\"\n                    data-testid=\"input-organization\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Role</Label>\n                  <Input\n                    id=\"role\"\n                    name=\"role\"\n                    type=\"text\"\n                    value={formData.role}\n                    onChange={handleInputChange}\n                    placeholder=\"Marine Biologist\"\n                    data-testid=\"input-role\"\n                  />\n                </div>\n              </>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"your@email.com\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"••••••••\"\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full ocean-gradient text-primary-foreground hover:scale-105 transition-transform duration-200\"\n              disabled={loading}\n              data-testid=\"button-submit\"\n            >\n              {loading ? 'Loading...' : (isLogin ? 'Sign In' : 'Sign Up')}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(!isLogin)}\n              className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n              data-testid=\"toggle-auth-mode\"\n            >\n              {isLogin ? \"Don't have an account? Sign up\" : 'Already have an account? Sign in'}\n            </button>\n          </div>\n          \n          <div className=\"mt-4 text-center\">\n            <Link href=\"/\">\n              <button className=\"text-sm text-muted-foreground hover:text-primary transition-colors\" data-testid=\"back-to-home\">\n                ← Back to Home\n              </button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default Auth","size_bytes":9460},"client/src/pages/fisheries-data.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport FishStocksChart from \"@/components/charts/fish-stocks-chart\";\nimport SpeciesDiversityChart from \"@/components/charts/species-diversity-chart\";\n\nconst FisheriesData = () => {\n  const catchData = [\n    {\n      species: \"Atlantic Cod\",\n      region: \"North Atlantic\",\n      catch: \"45,230\",\n      trend: \"-12%\",\n      trendType: \"down\" as const,\n      sustainability: \"Moderate\",\n      sustainabilityColor: \"bg-yellow-400/10 text-yellow-400\" as const,\n    },\n    {\n      species: \"Pacific Salmon\",\n      region: \"North Pacific\",\n      catch: \"78,450\",\n      trend: \"+8%\",\n      trendType: \"up\" as const,\n      sustainability: \"Good\",\n      sustainabilityColor: \"bg-green-400/10 text-green-400\" as const,\n    },\n    {\n      species: \"Bluefin Tuna\",\n      region: \"Mediterranean\",\n      catch: \"12,890\",\n      trend: \"-25%\",\n      trendType: \"down\" as const,\n      sustainability: \"Critical\",\n      sustainabilityColor: \"bg-red-400/10 text-red-400\" as const,\n    },\n  ];\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"container mx-auto\">\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">Fisheries Data</h1>\n          <p className=\"text-lg text-muted-foreground\">Fish stock monitoring and sustainability analysis</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Fish Stocks Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Fish Stocks by Region</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <FishStocksChart />\n            </CardContent>\n          </Card>\n          \n          {/* Species Diversity */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Species Diversity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <SpeciesDiversityChart />\n            </CardContent>\n          </Card>\n          \n          {/* Catch Statistics */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Catch Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"border-b border-border\">\n                      <tr>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Species</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Region</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Catch (MT)</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Trend</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Sustainability</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"text-muted-foreground\">\n                      {catchData.map((row, index) => (\n                        <tr key={index} className=\"border-b border-border/50\">\n                          <td className=\"py-3 px-2\" data-testid={`species-${index}`}>{row.species}</td>\n                          <td className=\"py-3 px-2\" data-testid={`region-${index}`}>{row.region}</td>\n                          <td className=\"py-3 px-2\" data-testid={`catch-${index}`}>{row.catch}</td>\n                          <td className=\"py-3 px-2\">\n                            <span className={`inline-flex items-center ${row.trendType === \"up\" ? \"text-green-400\" : \"text-red-400\"}`}>\n                              <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                {row.trendType === \"up\" ? (\n                                  <path fillRule=\"evenodd\" d=\"M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path>\n                                ) : (\n                                  <path fillRule=\"evenodd\" d=\"M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z\" clipRule=\"evenodd\"></path>\n                                )}\n                              </svg>\n                              <span data-testid={`trend-${index}`}>{row.trend}</span>\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-2\">\n                            <Badge variant=\"secondary\" className={row.sustainabilityColor} data-testid={`sustainability-${index}`}>\n                              {row.sustainability}\n                            </Badge>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FisheriesData;\n","size_bytes":5252},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport StatCard from \"@/components/stat-card\";\n\nconst Home = () => {\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"wave-pattern py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"container mx-auto text-center max-w-4xl\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent animate-fade-in\">\n            AI-Driven Unified Data Platform for Ocean, Fisheries & Molecular Research\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto animate-slide-up\">\n            Harness the power of artificial intelligence to unlock insights from comprehensive ocean, fisheries, and molecular biology datasets.\n          </p>\n          <Link href=\"/ocean-data\">\n            <Button \n              size=\"lg\" \n              className=\"ocean-gradient text-primary-foreground px-8 py-4 text-lg hover:scale-105 transition-transform duration-200 animate-slide-up\"\n              data-testid=\"get-started-button\"\n            >\n              Get Started\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Stats Cards */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <StatCard\n              title=\"Ocean Temperature\"\n              value=\"18.4\"\n              unit=\"°C\"\n              trend=\"+2.1%\"\n              trendType=\"up\"\n              icon={\n                <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\n                </svg>\n              }\n              iconColor=\"bg-primary/10 group-hover:bg-primary/20\"\n            />\n            \n            <StatCard\n              title=\"Fish Stock Level\"\n              value=\"847K\"\n              unit=\"MT\"\n              trend=\"-5.3%\"\n              trendType=\"down\"\n              icon={\n                <svg className=\"w-6 h-6 text-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\"></path>\n                </svg>\n              }\n              iconColor=\"bg-accent/10 group-hover:bg-accent/20\"\n            />\n            \n            <StatCard\n              title=\"DNA Species Count\"\n              value=\"12,847\"\n              unit=\"Species\"\n              trend=\"+8.7%\"\n              trendType=\"up\"\n              icon={\n                <svg className=\"w-6 h-6 text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n                </svg>\n              }\n              iconColor=\"bg-green-400/10 group-hover:bg-green-400/20\"\n            />\n            \n            <StatCard\n              title=\"Sustainability Index\"\n              value=\"73.2\"\n              unit=\"Index\"\n              trend=\"+12.4%\"\n              trendType=\"up\"\n              icon={\n                <svg className=\"w-6 h-6 text-yellow-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n              }\n              iconColor=\"bg-yellow-400/10 group-hover:bg-yellow-400/20\"\n            />\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":4220},"client/src/pages/molecular-data.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useEffect, useState } from \"react\";\n\nconst MolecularData = () => {\n  const geneticMetrics = [\n    { name: \"Heterozygosity\", value: \"0.74\", percentage: 74 },\n    { name: \"Allelic Richness\", value: \"5.2\", percentage: 87 },\n    { name: \"FST Index\", value: \"0.12\", percentage: 12 },\n  ];\n\n  const sampleStatus = [\n    { status: \"Processed\", count: \"1,247\", color: \"text-green-400\" },\n    { status: \"In Queue\", count: \"89\", color: \"text-yellow-400\" },\n    { status: \"Failed\", count: \"12\", color: \"text-red-400\" },\n  ];\n\n  // Table data\n  const tableData = [\n    {\n      sample: \"Frozen, processed fish\",\n      rows: [\n        {\n          sample: \"Fish sticks (species unspecified)\",\n          blast285: \"Gadus morhua (Atlantic cod), 98%\",\n          cytB: \"Homo sapiens, 99%\",\n          note: \"d\"\n        },\n        {\n          sample: \"Fish sticks (species unspecified)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"c\"\n        },\n        {\n          sample: \"Fish sticks (species unspecified)\",\n          blast285: \"Gadus morhua (Atlantic cod), 100%\",\n          cytB: \"Merluccius productus (North Pacific hake), 99%\",\n          note: \"\"\n        },\n        {\n          sample: \"Fish sticks (species unspecified)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Pollock sticks (Pollachius species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Pollock sticks (Pollachius species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Pollock patty (Pollachius species)\",\n          blast285: \"Gadus morhua (Atlantic cod), 90%\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Pollock patty (Pollachius species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"White fish patty\",\n          blast285: \"Gadus morhua (Atlantic cod), 94%\",\n          cytB: \"Merluccius productus (North Pacific hake), 99%\",\n          note: \"\"\n        }\n      ]\n    },\n    {\n      sample: \"Fillets\",\n      rows: [\n        {\n          sample: \"Cod (Gadus species)\",\n          blast285: \"Gadus morhua (Atlantic cod), 99%\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Cod (Gadus species)\",\n          blast285: \"Melanogrammus aeglefinus (Haddock), 97%\",\n          cytB: \"Sus scrofa (Pig), 91%\",\n          note: \"f,g\"\n        },\n        {\n          sample: \"Fresh cod (Gadus species)\",\n          blast285: \"Gadus morhua (Atlantic cod), 99%\",\n          cytB: \"Coryphaena hippurus (Mahi mahi), 100%\",\n          note: \"\"\n        },\n        {\n          sample: \"Mahi mahi (Coryphaena hippurus)\",\n          blast285: \"Trigia lucerna (Tub gunnard), 98%\",\n          cytB: \"Coryphaena hippurus (Mahi mahi), 99%\",\n          note: \"e\"\n        },\n        {\n          sample: \"Mahi mahi (Coryphaena hippurus)\",\n          blast285: \"Antennarius striatus (Striated frogfish), 99%\",\n          cytB: \"\",\n          note: \"e\"\n        },\n        {\n          sample: \"Pollock (Pollachius species)\",\n          blast285: \"No PCR product\",\n          cytB: \"Oncorhynchus gorbuscha (Pink salmon), 100%\",\n          note: \"\"\n        },\n        {\n          sample: \"Salmon (Oncorhynchus and Salmo species)\",\n          blast285: \"Oncorhynchus mykiss (Rainbow trout), 98%\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Salmon (Oncorhynchus and Salmo species)\",\n          blast285: \"Oncorhynchus mykiss (Rainbow trout), 98%\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Tilapia (3 genera, including Oreochromis)\",\n          blast285: \"Oreochromis aureus (Blue tilapia), 99%\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Tilapia (3 genera, including Oreochromis)\",\n          blast285: \"Oreochromis aureus (Blue tilapia), 99%\",\n          cytB: \"\",\n          note: \"\"\n        }\n      ]\n    },\n    {\n      sample: \"Canned fish\",\n      rows: [\n        {\n          sample: \"Canned tuna (Thunnus species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"Homo sapiens, 99%\",\n          note: \"d\"\n        },\n        {\n          sample: \"Canned tuna (Thunnus species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Canned tuna (Thunnus species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Canned tuna (Thunnus species)\",\n          blast285: \"Bad sequence\",\n          cytB: \"\",\n          note: \"\"\n        },\n        {\n          sample: \"Canned tuna (Thunnus species)\",\n          blast285: \"Aspergillus flavus (mold), 98%\",\n          cytB: \"Merluccius productus (North Pacific hake), 94%\",\n          note: \"h,j\"\n        }\n      ]\n    }\n  ];\n\n  // State for typing animation\n  const [displayedTable, setDisplayedTable] = useState<string>(\"\");\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [isAnimating, setIsAnimating] = useState<boolean>(true);\n\n  // Convert table data to string for typing animation\n  const tableString = `Table 1—Student samples and top BLAST hits to sequencing results.\n\n| Sample, as identified by student    | 28S sequence top BLAST result${String.fromCharCode(0x00B9)} | Cytochrome b sequence top BLAST result${String.fromCharCode(0x00B2)} |\n|---|---|---|\n${tableData.flatMap(category => [\n  category.sample,\n  ...category.rows.map(row => {\n    const sampleCol = row.sample.padEnd(40);\n    const blastCol = row.blast285.padEnd(45);\n    const cytBCol = row.cytB.padEnd(45);\n    const note = row.note ? `${String.fromCharCode(0x1d47 + parseInt(row.note))}` : \"\";\n    return `| ${sampleCol} | ${blastCol} | ${cytBCol} |${note}`;\n  })\n]).join('\\n')}\n\n${String.fromCharCode(0x00B9)} 28S ribosomal RNA gene, partial sequence\n${String.fromCharCode(0x00B2)} Cytochrome b gene, partial sequence\n${String.fromCharCode(0x1d47)} Human DNA contamination suspected\n${String.fromCharCode(0x1d48)} Sequence quality issues\n${String.fromCharCode(0x1d49)} Possible misidentification\n${String.fromCharCode(0x1d4a)} Unexpected match\n${String.fromCharCode(0x1d4b)} Mold contamination suspected\n${String.fromCharCode(0x1d4c)} Low sequence similarity`;\n\n  // Typing animation effect\n  useEffect(() => {\n    if (!isAnimating) return;\n\n    const timer = setTimeout(() => {\n      if (currentIndex < tableString.length) {\n        setDisplayedTable(tableString.substring(0, currentIndex + 1));\n        setCurrentIndex(currentIndex + 1);\n      } else {\n        setIsAnimating(false);\n      }\n    }, 5); // Adjust typing speed here\n\n    return () => clearTimeout(timer);\n  }, [currentIndex, isAnimating, tableString]);\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 min-h-screen\">\n      <div className=\"container mx-auto\">\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">Molecular Data</h1>\n          <p className=\"text-lg text-gray-300\">Genetic diversity and molecular analysis</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* DNA Sequence Visualization */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">DNA Sequence Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"aspect-video bg-gradient-to-r from-green-400/10 to-blue-400/10 rounded-lg border border-gray-600 p-4 font-mono text-sm\">\n                  <div className=\"text-green-400 mb-2\">&gt; Species: Thunnus thynnus (Atlantic Bluefin Tuna)</div>\n                  <div className=\"text-gray-300 mb-4\">Sequence Length: 16,527 bp | GC Content: 46.8%</div>\n                  <div className=\"space-y-1 text-xs overflow-hidden\">\n                    <div data-testid=\"dna-sequence-1\">\n                      <span className=\"text-red-400\">ATGC</span>\n                      <span className=\"text-blue-400\">GCAT</span>\n                      <span className=\"text-green-400\">TACG</span>\n                      <span className=\"text-yellow-400\">CGTA</span>\n                      <span className=\"text-purple-400\">AATG</span>\n                      <span className=\"text-pink-400\">GCTT</span> ...\n                    </div>\n                    <div data-testid=\"dna-sequence-2\">\n                      <span className=\"text-blue-400\">CGAT</span>\n                      <span className=\"text-green-400\">TACG</span>\n                      <span className=\"text-yellow-400\">CGTA</span>\n                      <span className=\"text-red-400\">ATGC</span>\n                      <span className=\"text-purple-400\">GGCC</span>\n                      <span className=\"text-pink-400\">TAAT</span> ...\n                    </div>\n                    <div data-testid=\"dna-sequence-3\">\n                      <span className=\"text-green-400\">TACG</span>\n                      <span className=\"text-yellow-400\">CGTA</span>\n                      <span className=\"text-red-400\">ATGC</span>\n                      <span className=\"text-blue-400\">CGAT</span>\n                      <span className=\"text-pink-400\">CCGG</span>\n                      <span className=\"text-purple-400\">ATAT</span> ...\n                    </div>\n                  </div>\n                  <div className=\"mt-4 text-blue-400\" data-testid=\"analysis-result\">Analysis complete: 847 genes identified</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Genetic Diversity Metrics */}\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Genetic Diversity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {geneticMetrics.map((metric, index) => (\n                    <div key={index}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-300\">{metric.name}</span>\n                        <span className=\"font-medium text-white\" data-testid={`metric-value-${index}`}>{metric.value}</span>\n                      </div>\n                      <div className=\"w-full h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-gradient-to-r from-blue-500 to-teal-400 rounded-full\"\n                          style={{ width: `${metric.percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Sample Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {sampleStatus.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-300\">{item.status}</span>\n                      <span className={`${item.color} font-medium`} data-testid={`sample-${item.status.toLowerCase().replace(' ', '-')}`}>\n                        {item.count}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* BLAST Results Table with Typing Animation */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">BLAST Sequencing Results - Real time updation </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"relative\">\n                  <div className=\"absolute top-2 right-2 flex items-center\">\n                    <div className={`h-3 w-3 rounded-full mr-2 ${isAnimating ? 'bg-green-400 animate-pulse' : 'bg-green-600'}`}></div>\n                    <span className=\"text-xs text-gray-400\">\n                      {isAnimating ? 'Updating...' : 'Updated      .      .'}\n                    </span>\n                  </div>\n                  <div className=\"bg-gray-900 p-4 rounded-lg border border-gray-700 font-mono text-xs overflow-auto max-h-96\">\n                    <pre className=\"text-gray-300 whitespace-pre-wrap\">\n                      {displayedTable}\n                      {isAnimating && <span className=\"inline-block w-2 h-4 bg-gray-400 animate-pulse ml-1\"></span>}\n                    </pre>\n                  </div>\n                  <div className=\"mt-2 flex justify-end\">\n                    <button \n                      onClick={() => {\n                        setCurrentIndex(0);\n                        setDisplayedTable(\"\");\n                        setIsAnimating(true);\n                      }}\n                      className=\"text-xs text-blue-400 hover:text-blue-300\"\n                    >\n                      Restart Animation\n                    </button>\n                  </div>\n                </div>\n                <div className=\"mt-4 text-sm text-gray-400\">\n                  <p>Real-time BLAST analysis results showing species identification through DNA sequencing</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Phylogenetic Tree */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Phylogenetic Relationships</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"aspect-[2/1] bg-gradient-to-b from-gray-700/20 to-gray-800 rounded-lg border border-gray-600 overflow-hidden\">\n                  <img \n                    src=\"https://www.researchgate.net/profile/Christopher_Austin2/publication/316018545/figure/fig1/AS:486385900625923@1492974843495/Phylogenetic-relationships-among-fish-species-The-phylogenetic-tree-was-inferred-from-a.png\"\n                    alt=\"Phylogenetic relationships among fish species - evolutionary tree showing genetic relationships\"\n                    className=\"w-full h-full object-contain bg-white rounded-lg\"\n                    onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        parent.innerHTML = `\n                          <div class=\"flex items-center justify-center h-full\">\n                            <div class=\"text-center\">\n                              <svg class=\"w-16 h-16 text-blue-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" d=\"M5 10l7-7m0 0l7 7m-7-7v18\"></path>\n                              </svg>\n                              <p class=\"text-gray-300\">Interactive Phylogenetic Tree</p>\n                              <p class=\"text-sm text-gray-400 mt-1\">Evolutionary relationships visualization</p>\n                            </div>\n                          </div>\n                        `;\n                      }\n                    }}\n                  />\n                </div>\n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-sm text-gray-400\">\n                    Phylogenetic tree showing evolutionary relationships among fish species based on molecular data\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default MolecularData;\n","size_bytes":16499},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/ocean-data.tsx":{"content":"import React, { useEffect, useRef } from 'react';\n\n// Mock Card components since we don't have access to shadcn/ui\nconst Card = ({ children, className = \"\" }) => (\n  <div className={`bg-white rounded-lg border border-gray-200 shadow-sm ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ children }) => (\n  <div className=\"p-6 pb-0\">\n    {children}\n  </div>\n);\n\nconst CardTitle = ({ children }) => (\n  <h3 className=\"text-lg font-semibold text-gray-900\">{children}</h3>\n);\n\nconst CardContent = ({ children }) => (\n  <div className=\"p-6 pt-0\">\n    {children}\n  </div>\n);\n\n// Simple Ocean Temperature Chart Component\nconst OceanTempChart = () => {\n  const data = [\n    { month: 'Jan', temp: 15.2 },\n    { month: 'Feb', temp: 15.8 },\n    { month: 'Mar', temp: 16.1 },\n    { month: 'Apr', temp: 16.7 },\n    { month: 'May', temp: 17.3 },\n    { month: 'Jun', temp: 18.1 }\n  ];\n\n  return (\n    <div className=\"space-y-3 text-gray-500\">\n      {data.map((item, index) => (\n        <div key={item.month} className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-gray-600\">{item.month}</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-20 h-2 bg-gray-200 rounded-full  overflow-hidden\">\n              <div \n                className=\"h-full bg-blue-500 rounded-full  transition-all duration-1000\" \n                style={{ width: `${(item.temp / 20) * 100}%` }}\n              ></div>\n            </div>\n            <span className=\"text-sm font-medium\">{item.temp}°C</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Leaflet Map Component\nconst LeafletMap = () => {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n\n  useEffect(() => {\n    // Load Leaflet CSS and JS\n    const loadLeaflet = async () => {\n      // Load CSS\n      if (!document.querySelector('link[href*=\"leaflet\"]')) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css';\n        document.head.appendChild(link);\n      }\n\n      // Load JS\n      if (!window.L) {\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js';\n        script.onload = initMap;\n        document.head.appendChild(script);\n      } else {\n        initMap();\n      }\n    };\n\n    const initMap = () => {\n      if (mapRef.current && !mapInstanceRef.current) {\n        // Initialize the map\n        const map = window.L.map(mapRef.current, {\n          center: [20, 0], // Center on equator\n          zoom: 2,\n          zoomControl: true\n        });\n\n        // Add tile layer (OpenStreetMap)\n        window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '© OpenStreetMap contributors'\n        }).addTo(map);\n\n        // Ocean monitoring stations data\n        const oceanStations = [\n          {\n            lat: 35.6762,\n            lng: 139.6503,\n            name: \"Tokyo Bay Station\",\n            temp: \"18.5°C\",\n            ph: \"8.1\",\n            depth: \"50m\"\n          },\n          {\n            lat: 40.7128,\n            lng: -74.0060,\n            name: \"New York Harbor\",\n            temp: \"16.2°C\",\n            ph: \"7.9\",\n            depth: \"30m\"\n          },\n          {\n            lat: -33.8688,\n            lng: 151.2093,\n            name: \"Sydney Harbor\",\n            temp: \"22.1°C\",\n            ph: \"8.2\",\n            depth: \"40m\"\n          },\n          {\n            lat: 51.5074,\n            lng: -0.1278,\n            name: \"Thames Estuary\",\n            temp: \"14.8°C\",\n            ph: \"7.8\",\n            depth: \"25m\"\n          },\n          {\n            lat: 25.7617,\n            lng: -80.1918,\n            name: \"Miami Coast\",\n            temp: \"26.3°C\",\n            ph: \"8.0\",\n            depth: \"60m\"\n          },\n          {\n            lat: -23.5505,\n            lng: -46.6333,\n            name: \"Santos Port\",\n            temp: \"23.7°C\",\n            ph: \"7.9\",\n            depth: \"35m\"\n          }\n        ];\n\n        // Add markers for ocean monitoring stations\n        oceanStations.forEach(station => {\n          const marker = window.L.circleMarker([station.lat, station.lng], {\n            radius: 8,\n            fillColor: getColorByTemp(parseFloat(station.temp)),\n            color: '#ffffff',\n            weight: 2,\n            opacity: 1,\n            fillOpacity: 0.8\n          }).addTo(map);\n\n          // Add popup with station data\n          marker.bindPopup(`\n            <div class=\"p-2\">\n              <h3 class=\"font-semibold text-sm mb-2\">${station.name}</h3>\n              <div class=\"space-y-1 text-xs\">\n                <div><strong>Temperature:</strong> ${station.temp}</div>\n                <div><strong>pH Level:</strong> ${station.ph}</div>\n                <div><strong>Depth:</strong> ${station.depth}</div>\n              </div>\n            </div>\n          `);\n\n          // Add hover effect\n          marker.on('mouseover', function() {\n            this.setStyle({\n              radius: 12,\n              weight: 3\n            });\n          });\n\n          marker.on('mouseout', function() {\n            this.setStyle({\n              radius: 8,\n              weight: 2\n            });\n          });\n        });\n\n        // Add a legend\n        const legend = window.L.control({ position: 'bottomright' });\n        legend.onAdd = function(map) {\n          const div = window.L.DomUtil.create('div', 'legend');\n          div.innerHTML = `\n            <div style=\"background: white; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  <h4 style=\"margin: 0 0 8px 0; color: black; font-size: 12px; font-weight: bold;\">Ocean Temperature</h4>\n  <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n    <div style=\"width: 12px; height: 12px; background: #0066cc; border-radius: 50%; margin-right: 6px;\"></div>\n    Cold (&lt;15°C)\n  </div>\n  <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n    <div style=\"width: 12px; height: 12px; background: #00cc66; border-radius: 50%; margin-right: 6px;\"></div>\n    Moderate (15-20°C)\n  </div>\n  <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n    <div style=\"width: 12px; height: 12px; background: #ff6600; border-radius: 50%; margin-right: 6px;\"></div>\n    Warm (20-25°C)\n  </div>\n  <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n    <div style=\"width: 12px; height: 12px; background: #cc0000; border-radius: 50%; margin-right: 6px;\"></div>\n    Hot (&gt;25°C)\n  </div>\n</div>\n          `;\n          return div;\n        };\n        legend.addTo(map);\n\n        mapInstanceRef.current = map;\n      }\n    };\n\n    // Helper function to get color based on temperature\n    const getColorByTemp = (temp) => {\n      if (temp < 15) return '#0066cc';      // Cold - Blue\n      if (temp < 20) return '#00cc66';      // Moderate - Green\n      if (temp < 25) return '#ff6600';      // Warm - Orange\n      return '#cc0000';                     // Hot - Red\n    };\n\n    loadLeaflet();\n\n    // Cleanup\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"relative\">\n      <div \n        ref={mapRef} \n        className=\"w-full h-96 rounded-lg border-2 border-gray-200 relative\"\n        style={{ \n          minHeight: '400px',\n          zIndex: 1,\n          position: 'relative'\n        }}\n      />\n      <style jsx>{`\n        .leaflet-container {\n          z-index: 1 !important;\n        }\n        .leaflet-control-container {\n          z-index: 2 !important;\n        }\n        .leaflet-popup {\n          z-index: 3 !important;\n        }\n        .leaflet-tooltip {\n          z-index: 3 !important;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nconst OceanData = () => {\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 relative\">\n      <div className=\"container mx-auto max-w-7xl\">\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold text-white-900 mb-4\">Ocean Data Dashboard</h1>\n          <p className=\"text-lg text-white-600\">Comprehensive ocean monitoring and analysis platform</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Interactive Leaflet Map */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Global Ocean Monitoring Stations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <LeafletMap />\n                <div className=\"mt-4 text-sm text-gray-500\">\n                  <p>Click on markers to view detailed station information. Colors represent temperature ranges.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Side Panel Charts */}\n          <div className=\"space-y-6\">\n            {/* Ocean Temperature Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Temperature Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <OceanTempChart />\n              </CardContent>\n            </Card>\n            \n            {/* pH Levels */}\n            <Card>\n              <CardHeader>\n                <CardTitle>pH Levels</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Atlantic</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-4/5 h-full bg-blue-500 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-atlantic\">8.1</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Pacific</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-3/5 h-full bg-green-500 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-pacific\">7.9</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Indian</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-2/3 h-full bg-emerald-400 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-indian\">8.0</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Live Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">6</div>\n                    <div className=\"text-sm text-blue-800\">Active Stations</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">19.2°C</div>\n                    <div className=\"text-sm text-green-800\">Avg Temperature</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">8.0</div>\n                    <div className=\"text-sm text-purple-800\">Avg pH Level</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default OceanData;","size_bytes":12705},"client/src/components/charts/fish-stocks-chart.tsx":{"content":"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst data = [\n  { region: 'Atlantic', stocks: 450 },\n  { region: 'Pacific', stocks: 680 },\n  { region: 'Indian', stocks: 320 },\n  { region: 'Arctic', stocks: 140 },\n];\n\nconst FishStocksChart = () => {\n  return (\n    <div className=\"w-full h-[300px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 33% 23%)\" />\n          <XAxis \n            dataKey=\"region\" \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <YAxis \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n          />\n          <Bar dataKey=\"stocks\" fill=\"hsl(199 89% 48%)\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default FishStocksChart;\n","size_bytes":1255},"client/src/components/charts/ocean-temp-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst data = [\n  { month: 'Jan', temperature: 16.2 },\n  { month: 'Feb', temperature: 16.8 },\n  { month: 'Mar', temperature: 17.5 },\n  { month: 'Apr', temperature: 18.1 },\n  { month: 'May', temperature: 18.7 },\n  { month: 'Jun', temperature: 18.4 },\n];\n\nconst OceanTempChart = () => {\n  return (\n    <div className=\"w-full h-[200px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 33% 23%)\" />\n          <XAxis \n            dataKey=\"month\" \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <YAxis \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"temperature\" \n            stroke=\"hsl(199 89% 48%)\" \n            strokeWidth={2}\n            dot={{ fill: 'hsl(199 89% 48%)', r: 4 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default OceanTempChart;\n","size_bytes":1494},"client/src/components/charts/species-diversity-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\n\nconst data = [\n  { name: 'Fish', value: 45, color: 'hsl(199 89% 48%)' },\n  { name: 'Crustaceans', value: 25, color: 'hsl(187 85% 53%)' },\n  { name: 'Mollusks', value: 20, color: 'hsl(166 76% 60%)' },\n  { name: 'Other', value: 10, color: 'hsl(142 71% 45%)' },\n];\n\nconst SpeciesDiversityChart = () => {\n  return (\n    <div className=\"w-full h-[300px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={100}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n          />\n          <Legend \n            wrapperStyle={{ \n              color: 'hsl(213 31% 91%)',\n              fontSize: '14px'\n            }}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SpeciesDiversityChart;\n","size_bytes":1370},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/Backend/predict_single.py":{"content":"#!/usr/bin/env python3\nimport sys\nimport json\nimport warnings\nimport joblib\nimport numpy as np\nfrom pathlib import Path\n\nwarnings.filterwarnings('ignore')\n\ndef map_query_to_features(query, species, region):\n    \"\"\"Map user query to the 17 features expected by the trained model\"\"\"\n    \n    # Default feature values based on typical marine data\n    features = {\n        'Species_Name': 0,  # Will be encoded\n        'Scientific_Name': 0,  # Will be encoded \n        'Region': 0,  # Will be encoded\n        'Latitude': 0.0,\n        'Longitude': 0.0,\n        'Year': 2024,\n        'Month': 6,  # Mid-year average\n        'Sea_Surface_Temperature_C': 15.0,\n        'Salinity_PSU': 35.0,\n        'Dissolved_Oxygen_mgL': 8.0,\n        'Chlorophyll_mg_m3': 1.0,\n        'pH_Level': 8.1,\n        'Depth_m': 50.0,\n        'Rainfall_mm': 100.0,\n        'Wind_Speed_ms': 10.0,\n        'Catch_Per_Unit_Effort': 0.5,\n        'Abundance_Index': 0.7\n    }\n    \n    # Species-specific mappings\n    species_mapping = {\n        'tuna': {'Species_Name': 1, 'Sea_Surface_Temperature_C': 22.0, 'Depth_m': 100.0, 'Catch_Per_Unit_Effort': 0.8},\n        'salmon': {'Species_Name': 2, 'Sea_Surface_Temperature_C': 12.0, 'Depth_m': 30.0, 'Abundance_Index': 0.8},\n        'cod': {'Species_Name': 3, 'Sea_Surface_Temperature_C': 8.0, 'Depth_m': 80.0, 'Catch_Per_Unit_Effort': 0.6},\n        'herring': {'Species_Name': 4, 'Sea_Surface_Temperature_C': 14.0, 'Depth_m': 40.0, 'Abundance_Index': 0.9},\n        'sardine': {'Species_Name': 5, 'Sea_Surface_Temperature_C': 18.0, 'Depth_m': 25.0, 'Abundance_Index': 0.8},\n        'mackerel': {'Species_Name': 6, 'Sea_Surface_Temperature_C': 16.0, 'Depth_m': 35.0, 'Abundance_Index': 0.7}\n    }\n    \n    # Region-specific mappings\n    region_mapping = {\n        'pacific': {'Region': 1, 'Latitude': 20.0, 'Longitude': -150.0, 'Sea_Surface_Temperature_C': 20.0, 'pH_Level': 8.0},\n        'atlantic': {'Region': 2, 'Latitude': 40.0, 'Longitude': -30.0, 'Sea_Surface_Temperature_C': 18.0, 'pH_Level': 8.1},\n        'mediterranean': {'Region': 3, 'Latitude': 38.0, 'Longitude': 15.0, 'Sea_Surface_Temperature_C': 19.0, 'pH_Level': 8.2},\n        'north': {'Region': 4, 'Latitude': 60.0, 'Longitude': -10.0, 'Sea_Surface_Temperature_C': 8.0, 'pH_Level': 8.3},\n        'south': {'Region': 5, 'Latitude': -30.0, 'Longitude': 20.0, 'Sea_Surface_Temperature_C': 16.0, 'pH_Level': 8.0}\n    }\n    \n    # Apply species-specific values\n    if species.lower() in species_mapping:\n        features.update(species_mapping[species.lower()])\n    \n    # Apply region-specific values\n    if region.lower() in region_mapping:\n        features.update(region_mapping[region.lower()])\n    \n    # Return features in the exact order expected by the model\n    feature_order = ['Species_Name', 'Scientific_Name', 'Region', 'Latitude', 'Longitude', 'Year',\n                    'Month', 'Sea_Surface_Temperature_C', 'Salinity_PSU', 'Dissolved_Oxygen_mgL',\n                    'Chlorophyll_mg_m3', 'pH_Level', 'Depth_m', 'Rainfall_mm', 'Wind_Speed_ms',\n                    'Catch_Per_Unit_Effort', 'Abundance_Index']\n    \n    return [features[feature] for feature in feature_order]\n\ndef main():\n    try:\n        # Read input from stdin\n        input_data = json.loads(sys.stdin.read())\n        query = input_data.get('query', '').lower()\n        \n        # Parse query for species and region - use word boundaries for precise matching\n        import re\n        \n        marine_species = [\n            \"tuna\", \"salmon\", \"cod\", \"herring\", \"sardine\", \"mackerel\", \"shark\", \n            \"trout\", \"anchovy\", \"flounder\", \"grouper\", \"snapper\", \"mahi\", \"marlin\", \n            \"swordfish\", \"halibut\", \"yellowfin\", \"bluefin\", \"albacore\", \"sea bass\",\n            \"sea bream\", \"haddock\", \"pollock\", \"plaice\", \"sole\", \"turbot\", \"monkfish\"\n        ]\n        region_keywords = [\"pacific\", \"atlantic\", \"mediterranean\", \"north\", \"south\", \"indian\", \"arctic\", \"gulf\", \"sea\", \"ocean\"]\n        \n        # Check if query contains any marine species using word boundaries\n        found_species = None\n        for species in marine_species:\n            # Use word boundary regex to avoid false matches\n            pattern = r'\\b' + re.escape(species) + r'\\b'\n            if re.search(pattern, query, re.IGNORECASE):\n                found_species = species\n                break\n        \n        # If no fish species found, return error\n        if found_species is None:\n            error_result = {\n                \"query\": query,\n                \"error\": \"Query does not contain a valid marine species. Please search for fish species like 'tuna', 'salmon', 'cod', etc.\",\n                \"model_used\": False,\n                \"valid_species\": marine_species[:10]  # Show first 10 species as examples\n            }\n            print(json.dumps(error_result))\n            sys.exit(1)\n        \n        species = found_species\n        region = \"pacific\"  # default\n        \n        for keyword in region_keywords:\n            if keyword in query:\n                region = keyword\n                break\n        \n        # Load model\n        model_path = Path(__file__).parent / \"fish_stock_model.pkl\"\n        model = joblib.load(model_path)\n        \n        # Map query to features\n        feature_vector = map_query_to_features(query, species, region)\n        \n        # Make prediction\n        prediction_class = model.predict([feature_vector])[0]\n        prediction_proba = model.predict_proba([feature_vector])[0]\n        \n        # Map prediction classes to meaningful output\n        class_labels = {0: \"Declining\", 1: \"Stable\", 2: \"Increasing\"}\n        stock_status = class_labels.get(int(prediction_class), \"Unknown\")\n        \n        # Calculate confidence and other metrics\n        max_confidence = float(np.max(prediction_proba) * 100)\n        \n        # Generate realistic population change based on prediction\n        if prediction_class == 0:  # Declining\n            population_change = np.random.uniform(-15, -2)\n        elif prediction_class == 1:  # Stable\n            population_change = np.random.uniform(-2, 2)\n        else:  # Increasing\n            population_change = np.random.uniform(2, 15)\n        \n        # Generate climate impact (usually negative)\n        climate_impact = np.random.uniform(-8, -2)\n        \n        # Generate genetic diversity based on population status\n        if prediction_class == 2:\n            genetic_diversity = \"High\"\n        elif prediction_class == 1:\n            genetic_diversity = \"Medium\"\n        else:\n            genetic_diversity = \"Low\"\n        \n        # Return result\n        result = {\n            \"query\": query,\n            \"species\": species,\n            \"region\": region,\n            \"prediction\": f\"Stock Status: {stock_status} ({population_change:+.1f}% by 2030)\",\n            \"fishPopulation\": f\"{population_change:+.1f}%\",\n            \"climateChange\": f\"{climate_impact:.1f}%\",\n            \"geneticDiversity\": genetic_diversity,\n            \"confidence\": f\"{max_confidence:.0f}%\",\n            \"model_used\": True,\n            \"prediction_class\": int(prediction_class),\n            \"class_probabilities\": prediction_proba.tolist(),\n            \"stock_status\": stock_status\n        }\n        \n        print(json.dumps(result))\n        \n    except Exception as e:\n        error_result = {\n            \"query\": input_data.get('query', '') if 'input_data' in locals() else '',\n            \"error\": str(e),\n            \"model_used\": False\n        }\n        print(json.dumps(error_result))\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()","size_bytes":7567},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.1\",\n    \"numpy>=2.3.3\",\n    \"pandas>=2.3.2\",\n    \"python-multipart>=0.0.20\",\n    \"scikit-learn>=1.7.2\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":291}},"version":1}
{"file_contents":{"README.md":{"content":"# 🌊 OceanAI Platform – AI-Driven Unified Data Platform\n\n## 📌 Overview\n\n**OceanAI Platform** is a hackathon project that unifies **Oceanographic, Fisheries, and Molecular Data** into a single AI-driven platform.\nIt enables researchers, policymakers, and fisheries managers to:\n\n* Explore ocean and fishery data 🌊\n* Analyze molecular (DNA/genetic) insights 🧬\n* Predict trends using AI 🤖\n* Visualize everything through an interactive dashboard 📊\n\n---\n\n## 🚀 Features\n\n✅ **Unified Data Dashboard** – Combines data from ocean, fisheries, and molecular sources\n✅ **Search Bar** – Query species/region (e.g., *“Tuna population in Pacific”*)\n✅ **Dynamic Visuals** – Interactive maps, charts, and graphs\n✅ **AI Insights** – Predictive analysis of fish stocks & genetic resilience\n✅ **Report Generation** – Export data/insights to PDF or CSV\n\n---\n\n## 🖥️ Tech Stack\n\n* **Frontend:** React, TailwindCSS, Plotly.js, Leaflet.js\n* **Backend (Demo):** FastAPI / Node.js (or hardcoded JSON for hackathon)\n* **AI/ML:** scikit-learn / TensorFlow (for predictions, optional in demo)\n* **Deployment:** Vercel / Netlify / GitHub Pages\n\n---\n\n## 🔍 Example Query Flow\n\n**User Search:** “Tuna population in Pacific”\n\n**Output:**\n\n* Oceanographic: Sea Temp → *22.8°C*\n* Fisheries: Tuna Catch → *520,000 tons/year*\n* Molecular: Genetic Diversity → *0.82 (High)*\n* AI Insight: *“Warming oceans are shifting tuna stocks northwards. Resilient genetic diversity, but risk of 15% decline by 2030 under current fishing rates.”*\n\n---\n\n## 📊 Demo Screens\n\n* **Landing Page:** AI-driven ocean data intro + stats cards\n* **Dashboard:** Unified data table, charts, interactive map\n* **AI Predictions:** Future stock & diversity forecasts\n\n---\n\n## 📂 Project Structure\n\n```\noceanai-platform/\n│── frontend/           # React + Tailwind dashboard  \n│── backend/            # FastAPI / Node.js mock API  \n│── data/               # Sample JSON datasets (for demo queries)  \n│── README.md           # Project documentation  \n```\n\n---\n\n## ⚡ Hackathon Notes\n\n* For demo purposes, use **hardcoded sample JSON outputs** for 3–4 queries\n* Deploy frontend on **Vercel** for live demo\n* Backend can be mocked (APIs not required to be real due to time limits)\n* Focus on **UI + Insights + Visualization** → judges love clarity!\n\n---\n\n## 👥 Team Members\n\n* 👨‍💻 **Biki Mukherjee** – Frontend Developer & Project Lead\n* 👨‍💻 **Rupsa Pramanik** – Backend & API Integration\n* 👨‍💻 **Sayan Samadder** – Data Analyst & Visualization\n* 👩‍💻 **Debjit Chakraborty** – AI/ML & Model Training\n* 👩‍💻 **Dipannita Biswas** – Research & Documentation\n\n---\n\n## 📚 Data Sources (for inspiration)\n\n* NOAA Ocean Database 🌊\n* FAO Fisheries Data 🎣\n* Marine DNA Barcode Library 🧬\n* ICES (International Council for Exploration of the Sea)\n\n---\n\n## 📜 License\n\nThis project is licensed under the MIT License.\n","size_bytes":2996},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OceanAI Platform\n\n## Overview\n\nOceanAI Platform is a comprehensive AI-driven research application for ocean, fisheries, and molecular biology data analysis. Built as a full-stack web application, it provides scientists and researchers with tools to visualize ocean monitoring data, analyze fisheries sustainability, explore molecular genetics, and generate AI-powered predictions for marine ecosystems. The platform features an ocean-themed dark UI with interactive dashboards, data visualization charts, and scientific analysis capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom ocean-themed color palette and CSS variables\n- **State Management**: TanStack Query for server state management\n- **Data Visualization**: Recharts library for interactive charts and graphs\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture  \n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Development**: tsx for TypeScript execution in development\n- **Production Build**: esbuild for fast server bundling\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Session Management**: Prepared for PostgreSQL session storage with connect-pg-simple\n\n### Database Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Validation**: Drizzle-Zod integration for type-safe schema validation\n- **Database Provider**: Configured for Neon Database (serverless PostgreSQL)\n- **Current Storage**: In-memory storage implementation for development/demo\n\n### Development Environment\n- **Hot Reloading**: Vite HMR for frontend, tsx watch mode for backend\n- **Error Handling**: Runtime error overlay integration\n- **Development Tools**: Replit-specific development enhancements and cartographer integration\n- **Type Checking**: Strict TypeScript configuration with path mapping\n\n### Project Structure\n- **Monorepo Layout**: Shared schema definitions between client and server\n- **Client**: React application in `/client` with component library and pages\n- **Server**: Express backend in `/server` with routing and storage abstraction  \n- **Shared**: Common TypeScript definitions and Drizzle schema in `/shared`\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL for production data storage\n- **Drizzle ORM**: Database toolkit and query builder\n\n### UI and Visualization\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component library with Tailwind CSS\n- **Recharts**: React charting library for data visualization\n- **Lucide React**: Icon library for UI elements\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **esbuild**: Fast bundler for production server builds\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management with validation\n\n### Authentication & Sessions\n- **connect-pg-simple**: PostgreSQL session store (configured but not active)\n- Ready for implementation of user authentication system\n\n### Styling & Theming\n- **Tailwind CSS**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **Custom CSS Variables**: Ocean-themed color system with dark mode support","size_bytes":3682},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        \"slide-up\": {\n          \"0%\": { transform: \"translateY(10px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"float\": \"float 6s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3301},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite in development, otherwise serve static\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use PORT from env or fallback to 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  // ✅ Don’t force \"0.0.0.0\" on Windows — just use localhost\n  server.listen(port, () => {\n    log(`Server running at http://localhost:${port}`);\n  });\n})();\n","size_bytes":1845},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPredictionSchema } from \"@shared/schema\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\nimport multer from \"multer\";\nimport fs from \"fs/promises\";\n\n// Extend Request interface to include file from multer\ninterface RequestWithFile extends Request {\n  file?: Express.Multer.File;\n}\n\n// Configure multer for .pkl file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  fileFilter: (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    if (file.originalname.endsWith('.pkl')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only .pkl files are allowed'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User profile routes\n  app.get(\"/api/profile/:id\", async (req, res) => {\n    try {\n      const profile = await storage.getUserProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post(\"/api/profile\", async (req, res) => {\n    try {\n      const profile = await storage.createUserProfile(req.body);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create profile\" });\n    }\n  });\n\n  // Prediction routes\n  app.get(\"/api/predictions/:userId\", async (req, res) => {\n    try {\n      const predictions = await storage.getUserPredictions(req.params.userId);\n      res.json(predictions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch predictions\" });\n    }\n  });\n\n  app.post(\"/api/predictions\", async (req, res) => {\n    try {\n      const validatedData = insertPredictionSchema.parse(req.body);\n      const prediction = await storage.createPrediction(validatedData);\n      res.json(prediction);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to create prediction\" });\n    }\n  });\n\n  app.get(\"/api/predictions/:userId/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query required\" });\n      }\n      const results = await storage.searchPredictions(req.params.userId, query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to search predictions\" });\n    }\n  });\n\n  // Home page search - ML model first, then ChatGPT fallback\n  app.post(\"/api/search\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n\n      // Step 1: Try ML model (.pkl format) first\n      let mlResult = null;\n      let mlWorked = false;\n\n      try {\n        console.log(\"Attempting ML model search for:\", query);\n        \n        const pythonResponse = await fetch(\"http://localhost:8000/predict\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ query }),\n        });\n\n        if (pythonResponse.ok) {\n          mlResult = await pythonResponse.json();\n          mlWorked = true;\n          console.log(\"ML model search successful\");\n\n          // Format ML response for home page\n          let mlAnswer = `Based on our ML model analysis:\\n\\n`;\n          mlAnswer += `**Species:** ${mlResult.species || 'Unknown'}\\n`;\n          mlAnswer += `**Region:** ${mlResult.region || 'Unknown'}\\n`;\n          mlAnswer += `**Population Trend:** ${mlResult.fishPopulation || 'N/A'}\\n`;\n          mlAnswer += `**Climate Impact:** ${mlResult.climateChange || 'N/A'}\\n`;\n          mlAnswer += `**Genetic Diversity:** ${mlResult.geneticDiversity || 'N/A'}\\n`;\n          mlAnswer += `**Confidence:** ${mlResult.confidence || 'N/A'}\\n\\n`;\n          mlAnswer += `**Prediction:** ${mlResult.prediction || 'Analysis based on our trained marine ecosystem model.'}`;\n\n          return res.json({\n            query: query,\n            answer: mlAnswer,\n            source: \"OceanAI ML Model\",\n            confidence: parseFloat(mlResult.confidence?.replace('%', '') || '85') / 100,\n            related_topics: [\"Marine predictions\", \"Fish populations\", \"Ocean modeling\", \"AI analysis\"],\n            timestamp: new Date().toISOString()\n          });\n        } else {\n          console.log(\"ML model returned error, trying fallback\");\n        }\n      } catch (error) {\n        console.log(\"ML model unavailable, trying fallback:\", error instanceof Error ? error.message : String(error));\n      }\n\n      // Step 2: Try marine knowledge database\n      const { searchMarineKnowledge, formatMarineKnowledgeResponse, getOceanTopicInfo } = await import(\"./marineKnowledge.js\");\n      \n      const marineEntry = searchMarineKnowledge(query);\n      if (marineEntry) {\n        const detailedResponse = formatMarineKnowledgeResponse(marineEntry);\n        return res.json({\n          query: query,\n          answer: detailedResponse,\n          source: \"OceanAI Knowledge Base\",\n          confidence: 0.95,\n          related_topics: marineEntry.relatedTopics,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      const oceanInfo = getOceanTopicInfo(query);\n      if (oceanInfo) {\n        return res.json({\n          query: query,\n          answer: oceanInfo,\n          source: \"OceanAI Science Database\",\n          confidence: 0.90,\n          related_topics: [\"Ocean science\", \"Marine biology\", \"Climate change\", \"Environmental science\"],\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Step 3: Final fallback to ChatGPT\n      try {\n        console.log(\"Trying ChatGPT fallback for:\", query);\n        const { generateBasicSearch } = await import(\"./openai.js\");\n        const chatGPTResult = await generateBasicSearch(query);\n        \n        return res.json({\n          query: query,\n          answer: chatGPTResult.answer,\n          source: \"OceanAI Assistant\",\n          confidence: chatGPTResult.confidence,\n          related_topics: chatGPTResult.related_topics,\n          timestamp: new Date().toISOString()\n        });\n      } catch (chatGPTError) {\n        console.log(\"ChatGPT also failed, using default response\");\n      }\n      \n      // Final fallback\n      const generalResponse = `I can provide information about marine life, ocean science, and environmental topics. Try searching for specific fish species like \"hilsa\", \"tuna\", \"salmon\", \"cod\", or ocean topics like \"ocean temperature\", \"coral reefs\", \"marine biodiversity\", or \"sea level rise\".`;\n      \n      res.json({\n        query: query,\n        answer: generalResponse,\n        source: \"OceanAI\",\n        confidence: 0.70,\n        related_topics: [\"Marine biology\", \"Ocean science\", \"Fish species\", \"Environmental science\", \"Climate change\"],\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      res.status(500).json({ \n        error: \"Failed to process search\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // AI Prediction - ML model with Gemini fallback\n  app.post(\"/api/ml-predict\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Query is required\" });\n      }\n\n      // First, try the ML model via Python backend\n      let mlModelResult = null;\n      let mlModelWorked = false;\n\n      try {\n        console.log(\"Attempting ML model prediction...\");\n        \n        // Try to call the Python ML model\n        const pythonResponse = await fetch(\"http://localhost:8000/predict\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ query }),\n        });\n\n        if (pythonResponse.ok) {\n          mlModelResult = await pythonResponse.json();\n          mlModelWorked = true;\n          console.log(\"ML model prediction successful\");\n        } else {\n          console.log(\"ML model returned error, falling back to Gemini\");\n        }\n      } catch (error) {\n        console.log(\"ML model unavailable, falling back to Gemini:\", error instanceof Error ? error.message : String(error));\n      }\n\n      // If ML model worked, return its results\n      if (mlModelWorked && mlModelResult) {\n        // Import enhanced parsing and data for coordinate resolution\n        const { parseMarineQuery, resolveRegionCoordinates } = await import(\"./queryParser.js\");\n        const { findMarineRegion } = await import(\"../shared/marineGazetteer.js\");\n        \n        const parsedQuery = parseMarineQuery(query);\n        const coordinates = resolveRegionCoordinates(parsedQuery.regionRaw);\n        \n        let regionData = null;\n        if (parsedQuery.regionRaw) {\n          regionData = findMarineRegion(parsedQuery.regionRaw);\n        }\n\n        const response = {\n          queryType: parsedQuery.queryType || 'species',\n          coordinates,\n          species: mlModelResult.species || parsedQuery.species,\n          region: mlModelResult.region || parsedQuery.regionRaw,\n          regionCanonical: regionData?.canonicalName || mlModelResult.region,\n          stock_status: mlModelResult.fishPopulation?.includes('+') ? 'Increasing' : \n                       mlModelResult.fishPopulation?.includes('-') ? 'Declining' : 'Stable',\n          fishPopulation: mlModelResult.fishPopulation,\n          climateChange: mlModelResult.climateChange,\n          geneticDiversity: mlModelResult.geneticDiversity,\n          confidence: mlModelResult.confidence,\n          prediction_summary: mlModelResult.prediction || \"ML model prediction based on trained data\",\n          model_used: true,\n          source: \"ML_MODEL\"\n        };\n\n        return res.json(response);\n      }\n\n      // Fallback to Gemini API if ML model failed\n      console.log(\"Using Gemini API fallback...\");\n      \n      const { parseMarineQuery, resolveRegionCoordinates } = await import(\"./queryParser.js\");\n      const { findMarineRegion } = await import(\"../shared/marineGazetteer.js\");\n      const { generateOceanPrediction, generateTrendAnalysis } = await import(\"./gemini.js\");\n      \n      const parsedQuery = parseMarineQuery(query);\n      const coordinates = resolveRegionCoordinates(parsedQuery.regionRaw);\n      \n      const response: any = {\n        queryType: parsedQuery.queryType,\n        coordinates,\n        model_used: false,\n        source: \"GEMINI_FALLBACK\"\n      };\n      \n      if (parsedQuery.species) {\n        response.species = parsedQuery.species;\n        response.scientificName = parsedQuery.scientificName;\n      }\n      \n      if (parsedQuery.regionRaw) {\n        const regionData = findMarineRegion(parsedQuery.regionRaw);\n        if (regionData) {\n          response.regionCanonical = regionData.canonicalName;\n          \n          if (parsedQuery.queryType === 'ocean' || parsedQuery.queryType === 'composite') {\n            response.oceanMetrics = regionData.oceanMetrics;\n          }\n        }\n      }\n      \n      if (parsedQuery.queryType === 'species' || parsedQuery.queryType === 'composite') {\n        try {\n          const predictionData = await generateOceanPrediction(query);\n          response.stock_status = predictionData.stock_status;\n          response.fishPopulation = predictionData.fishPopulation;\n          response.climateChange = predictionData.climateChange;\n          response.geneticDiversity = predictionData.geneticDiversity;\n          response.confidence = predictionData.confidence;\n          response.prediction_summary = predictionData.prediction_summary;\n          response.model_used = true;\n          \n          if (parsedQuery.queryType === 'composite') {\n            response.trendSummary = await generateTrendAnalysis(query, parsedQuery.species || '', parsedQuery.regionRaw || '');\n          }\n        } catch (error) {\n          console.warn(\"Gemini prediction failed, using basic fallback:\", error);\n          response.stock_status = \"Stable\";\n          response.fishPopulation = \"+5.2%\";\n          response.climateChange = \"-2.1%\";\n          response.geneticDiversity = \"Medium\";\n          response.confidence = \"85%\";\n          response.prediction_summary = \"Fallback prediction based on general marine trends.\";\n        }\n      }\n      \n      res.json(response);\n\n    } catch (error) {\n      console.error(\"Enhanced prediction error:\", error);\n      res.status(500).json({ \n        error: \"Failed to generate prediction\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        model_used: false\n      });\n    }\n  });\n\n  // Phylogenetic Tree Processing endpoint\n  app.post(\"/api/phylogenetic-tree\", upload.single('pklFile'), async (req: RequestWithFile, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No .pkl file uploaded\" });\n      }\n\n      console.log(\"Processing .pkl file for phylogenetic tree:\", req.file.originalname);\n\n      // Read the uploaded file (in a real scenario, you'd process the .pkl file)\n      const filePath = req.file.path;\n      const fileStats = await fs.stat(filePath);\n      \n      // For demonstration, we'll simulate .pkl file analysis with OpenAI\n      const { generatePhylogeneticTree } = await import(\"./openai.js\");\n      \n      // Generate phylogenetic tree data using OpenAI\n      const treeData = await generatePhylogeneticTree(req.file.originalname, fileStats.size);\n      \n      // Clean up uploaded file\n      await fs.unlink(filePath);\n      \n      res.json({\n        success: true,\n        fileName: req.file.originalname,\n        treeData: treeData.newick,\n        species: treeData.species,\n        metadata: treeData.metadata,\n        geneticMetrics: treeData.geneticMetrics,\n        sampleStatus: treeData.sampleStatus,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error(\"Phylogenetic tree processing error:\", error);\n      \n      // Clean up file if it exists\n      if (req.file) {\n        try {\n          await fs.unlink(req.file.path);\n        } catch (cleanupError) {\n          console.error(\"File cleanup error:\", cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        error: \"Failed to process phylogenetic tree\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Fish Species Analysis endpoint\n  app.post(\"/api/fish-species-analysis\", upload.single('pklFile'), async (req: RequestWithFile, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No .pkl file uploaded\" });\n      }\n\n      console.log(\"Processing .pkl file for fish species analysis:\", req.file.originalname);\n\n      // Read the uploaded file (in a real scenario, you'd process the .pkl file)\n      const filePath = req.file.path;\n      const fileStats = await fs.stat(filePath);\n      \n      // For demonstration, we'll simulate .pkl file analysis with OpenAI\n      const { generateFishSpeciesData } = await import(\"./openai.js\");\n      \n      // Generate fish species location data using OpenAI\n      const fishData = await generateFishSpeciesData(req.file.originalname, fileStats.size);\n      \n      // Clean up uploaded file\n      await fs.unlink(filePath);\n      \n      res.json({\n        success: true,\n        fileName: req.file.originalname,\n        fishLocations: fishData.locations,\n        speciesSummary: fishData.speciesSummary,\n        totalSpecies: fishData.totalSpecies,\n        analysisMetrics: fishData.analysisMetrics,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error(\"Fish species analysis error:\", error);\n      \n      // Clean up file if it exists\n      if (req.file) {\n        try {\n          await fs.unlink(req.file.path);\n        } catch (cleanupError) {\n          console.error(\"File cleanup error:\", cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        error: \"Failed to process fish species analysis\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":16528},"server/storage.ts":{"content":"import { type UserProfile, type InsertUserProfile, type Prediction, type InsertPrediction } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for user profiles and predictions\nexport interface IStorage {\n  getUserProfile(id: string): Promise<UserProfile | undefined>;\n  getUserProfileByEmail(email: string): Promise<UserProfile | undefined>;\n  createUserProfile(profile: InsertUserProfile): Promise<UserProfile>;\n  updateUserProfile(id: string, profile: Partial<InsertUserProfile>): Promise<UserProfile | undefined>;\n  \n  getPrediction(id: string): Promise<Prediction | undefined>;\n  getUserPredictions(userId: string): Promise<Prediction[]>;\n  createPrediction(prediction: InsertPrediction): Promise<Prediction>;\n  searchPredictions(userId: string, query: string): Promise<Prediction[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private userProfiles: Map<string, UserProfile>;\n  private predictions: Map<string, Prediction>;\n\n  constructor() {\n    this.userProfiles = new Map();\n    this.predictions = new Map();\n  }\n\n  async getUserProfile(id: string): Promise<UserProfile | undefined> {\n    return this.userProfiles.get(id);\n  }\n\n  async getUserProfileByEmail(email: string): Promise<UserProfile | undefined> {\n    return Array.from(this.userProfiles.values()).find(\n      (profile) => profile.email === email,\n    );\n  }\n\n  async createUserProfile(insertProfile: InsertUserProfile): Promise<UserProfile> {\n    const id = randomUUID();\n    const profile: UserProfile = { \n      id,\n      email: insertProfile.email,\n      fullName: insertProfile.fullName || null,\n      organization: insertProfile.organization || null,\n      role: insertProfile.role || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.userProfiles.set(id, profile);\n    return profile;\n  }\n\n  async updateUserProfile(id: string, updates: Partial<InsertUserProfile>): Promise<UserProfile | undefined> {\n    const existing = this.userProfiles.get(id);\n    if (!existing) return undefined;\n    \n    const updated: UserProfile = { \n      ...existing, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.userProfiles.set(id, updated);\n    return updated;\n  }\n\n  async getPrediction(id: string): Promise<Prediction | undefined> {\n    return this.predictions.get(id);\n  }\n\n  async getUserPredictions(userId: string): Promise<Prediction[]> {\n    return Array.from(this.predictions.values()).filter(\n      (prediction) => prediction.userId === userId,\n    );\n  }\n\n  async createPrediction(insertPrediction: InsertPrediction): Promise<Prediction> {\n    const id = randomUUID();\n    const prediction: Prediction = { \n      id,\n      userId: insertPrediction.userId,\n      species: insertPrediction.species,\n      region: insertPrediction.region,\n      timeframe: insertPrediction.timeframe,\n      scenario: insertPrediction.scenario,\n      fishPopulation: insertPrediction.fishPopulation || null,\n      climateChange: insertPrediction.climateChange || null,\n      geneticDiversity: insertPrediction.geneticDiversity || null,\n      createdAt: new Date()\n    };\n    this.predictions.set(id, prediction);\n    return prediction;\n  }\n\n  async searchPredictions(userId: string, query: string): Promise<Prediction[]> {\n    const userPredictions = await this.getUserPredictions(userId);\n    return userPredictions.filter(prediction => \n      prediction.species.toLowerCase().includes(query.toLowerCase()) ||\n      prediction.region.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3568},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User profiles table for additional user data beyond Supabase auth\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\"),\n  organization: text(\"organization\"),\n  role: text(\"role\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI Predictions table to store user predictions\nexport const predictions = pgTable(\"predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  species: text(\"species\").notNull(),\n  region: text(\"region\").notNull(),\n  timeframe: text(\"timeframe\").notNull(),\n  scenario: text(\"scenario\").notNull(),\n  fishPopulation: text(\"fish_population\"),\n  climateChange: text(\"climate_change\"),\n  geneticDiversity: text(\"genetic_diversity\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).pick({\n  email: true,\n  fullName: true,\n  organization: true,\n  role: true,\n});\n\nexport const insertPredictionSchema = createInsertSchema(predictions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertPrediction = z.infer<typeof insertPredictionSchema>;\nexport type Prediction = typeof predictions.$inferSelect;\n\n// Enhanced AI Prediction Types for improved search functionality\nexport type QueryType = 'species' | 'ocean' | 'composite';\n\nexport interface Coordinates {\n  lat: number;\n  lng: number;\n  zoom?: number;\n  bbox?: [number, number, number, number]; // [minLat, minLng, maxLat, maxLng]\n}\n\nexport interface OceanMetrics {\n  salinityPSU: number;\n  pH: number;\n  temperatureC: number;\n  popularFishes: string[];\n}\n\nexport interface EnhancedPredictionResponse {\n  queryType: QueryType;\n  species?: string;\n  scientificName?: string;\n  regionCanonical?: string;\n  coordinates: Coordinates;\n  stock_status?: string;\n  fishPopulation?: string;\n  climateChange?: string;\n  geneticDiversity?: string;\n  confidence?: string;\n  prediction_summary?: string;\n  oceanMetrics?: OceanMetrics;\n  trendSummary?: string;\n  model_used: boolean;\n}\n\nexport interface ParsedQuery {\n  queryType: QueryType;\n  species?: string;\n  scientificName?: string;\n  regionRaw?: string;\n  originalQuery: string;\n}\n","size_bytes":2639},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport OceanData from \"@/pages/ocean-data\";\nimport FisheriesData from \"@/pages/fisheries-data\";\nimport MolecularData from \"@/pages/molecular-data\";\nimport AIPredictions from \"@/pages/ai-predictions\";\nimport About from \"@/pages/about\";\nimport Auth from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/ocean-data\" component={OceanData} />\n          <Route path=\"/fisheries-data\" component={FisheriesData} />\n          <Route path=\"/molecular-data\" component={MolecularData} />\n          <Route path=\"/ai-predictions\" component={AIPredictions} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1695},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Ocean-themed color palette using HSL */\n  --background: hsl(221, 39%, 11%); /* Deep ocean blue */\n  --foreground: hsl(213, 31%, 91%); /* Light blue-white */\n  --card: hsl(217, 33%, 17%); /* Deep blue-gray */\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(199, 89%, 48%); /* Bright cyan */\n  --primary-foreground: hsl(221, 39%, 11%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%); /* Aqua */\n  --accent-foreground: hsl(221, 39%, 11%);\n  --destructive: hsl(347, 77%, 50%); /* Coral red */\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(217, 33%, 23%);\n  --input: hsl(217, 33%, 23%);\n  --ring: hsl(199, 89%, 48%);\n  --chart-1: hsl(199, 89%, 48%);\n  --chart-2: hsl(187, 85%, 53%);\n  --chart-3: hsl(166, 76%, 60%);\n  --chart-4: hsl(142, 71%, 45%);\n  --chart-5: hsl(341, 48%, 75%);\n  --sidebar: hsl(217, 33%, 17%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(199, 89%, 48%);\n  --sidebar-primary-foreground: hsl(221, 39%, 11%);\n  --sidebar-accent: hsl(187, 85%, 53%);\n  --sidebar-accent-foreground: hsl(221, 39%, 11%);\n  --sidebar-border: hsl(217, 33%, 23%);\n  --sidebar-ring: hsl(199, 89%, 48%);\n  --font-sans: Inter, ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 1px 2px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 1px 2px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 2px 4px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 4px 6px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00), 0px 8px 10px -1px hsl(199, 89%, 48%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(199, 89%, 48%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(221, 39%, 11%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(199, 89%, 48%);\n  --primary-foreground: hsl(221, 39%, 11%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(221, 39%, 11%);\n  --destructive: hsl(347, 77%, 50%);\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(217, 33%, 23%);\n  --input: hsl(217, 33%, 23%);\n  --ring: hsl(199, 89%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, hsl(221, 39%, 11%) 0%, hsl(217, 33%, 17%) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .ocean-gradient {\n    background: linear-gradient(135deg, hsl(199, 89%, 48%) 0%, hsl(187, 85%, 53%) 100%);\n  }\n  \n  .glass-effect {\n    background: hsla(217, 33%, 17%, 0.8);\n    backdrop-filter: blur(10px);\n    border: 1px solid hsla(199, 89%, 48%, 0.2);\n  }\n  \n  .wave-pattern {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2306b6d4' fill-opacity='0.05'%3E%3Cpath d='M30 30c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12zm12 0c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fade-in 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes fade-in {\n    0% { opacity: 0; }\n    100% { opacity: 1; }\n  }\n  \n  @keyframes slide-up {\n    0% { transform: translateY(10px); opacity: 0; }\n    100% { transform: translateY(0); opacity: 1; }\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n}\n","size_bytes":4620},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/Backend/main.py":{"content":"from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nimport logging\nimport random\nimport numpy as np\nfrom validate_model import ModelValidator\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = FastAPI(title=\"OceanAI Platform API\", description=\"AI-driven predictions for oceanographic and fisheries data\")\n\n# Add CORS for frontend\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5000\", \"http://localhost:3000\", \"https://your-deployed-frontend.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Load model at startup with fallback\nmodel = None\nmodel_loaded = False\n\ntry:\n    model_validator = ModelValidator(\"fish_stock_model.pkl\")\n    model = model_validator.model\n    model_loaded = True\n    logger.info(\"Model loaded successfully for API\")\nexcept Exception as e:\n    logger.error(f\"Failed to load model: {e}\")\n    logger.info(\"Will use intelligent fallback predictions\")\n    model_loaded = False\n\n# Home endpoint for API health check\n@app.get(\"/\")\nasync def home():\n    return {\n        \"message\": \"Welcome to OceanAI Platform API\",\n        \"model_loaded\": model_loaded,\n        \"endpoints\": {\n            \"predict\": \"POST /predict - Submit a query for fish stock predictions\",\n            \"model_info\": \"GET /model_info - Get model details for debugging\"\n        }\n    }\n\n# Define input schema\nclass PredictionInput(BaseModel):\n    query: str\n\ndef generate_intelligent_prediction(species: str, region: str):\n    \"\"\"Generate intelligent predictions based on species and region characteristics\"\"\"\n    \n    # Species-specific base trends (based on real marine data patterns)\n    species_data = {\n        \"tuna\": {\"base_trend\": -3.2, \"climate_sensitivity\": 0.8, \"fishing_pressure\": 0.9},\n        \"salmon\": {\"base_trend\": +2.1, \"climate_sensitivity\": 0.7, \"fishing_pressure\": 0.6},\n        \"cod\": {\"base_trend\": -1.8, \"climate_sensitivity\": 0.6, \"fishing_pressure\": 0.7},\n        \"herring\": {\"base_trend\": +5.4, \"climate_sensitivity\": 0.4, \"fishing_pressure\": 0.5},\n        \"sardine\": {\"base_trend\": +3.1, \"climate_sensitivity\": 0.5, \"fishing_pressure\": 0.3},\n        \"mackerel\": {\"base_trend\": +1.7, \"climate_sensitivity\": 0.5, \"fishing_pressure\": 0.4},\n    }\n    \n    # Region-specific factors\n    region_factors = {\n        \"pacific\": {\"temp_change\": +2.3, \"acidification\": 0.7, \"protection\": 0.6},\n        \"atlantic\": {\"temp_change\": +1.9, \"acidification\": 0.6, \"protection\": 0.7},\n        \"mediterranean\": {\"temp_change\": +2.8, \"acidification\": 0.8, \"protection\": 0.5},\n        \"north\": {\"temp_change\": +3.1, \"acidification\": 0.9, \"protection\": 0.8},\n        \"south\": {\"temp_change\": +1.6, \"acidification\": 0.5, \"protection\": 0.4},\n    }\n    \n    # Get species characteristics or use default\n    species_info = species_data.get(species, {\n        \"base_trend\": random.uniform(-2, +3), \n        \"climate_sensitivity\": random.uniform(0.4, 0.8),\n        \"fishing_pressure\": random.uniform(0.3, 0.7)\n    })\n    \n    # Get region factors or use default\n    region_info = region_factors.get(region, {\n        \"temp_change\": random.uniform(1.5, 2.5),\n        \"acidification\": random.uniform(0.4, 0.7),\n        \"protection\": random.uniform(0.4, 0.8)\n    })\n    \n    # Calculate prediction\n    base_change = species_info[\"base_trend\"]\n    climate_impact = -region_info[\"temp_change\"] * species_info[\"climate_sensitivity\"]\n    fishing_impact = -species_info[\"fishing_pressure\"] * random.uniform(1, 3)\n    protection_benefit = region_info[\"protection\"] * random.uniform(1, 2)\n    \n    fish_population = base_change + protection_benefit + random.uniform(-1, 1)\n    climate_change = climate_impact + fishing_impact + random.uniform(-1, 1)\n    \n    # Generate genetic diversity based on population trends\n    if fish_population > 5:\n        genetic_diversity = \"High\"\n    elif fish_population > 0:\n        genetic_diversity = \"Medium\"\n    else:\n        genetic_diversity = \"Low\"\n    \n    # Generate confidence based on data availability\n    confidence = random.randint(82, 95)\n    \n    return {\n        \"fishPopulation\": f\"{fish_population:+.1f}%\",\n        \"climateChange\": f\"{climate_change:.1f}%\",\n        \"geneticDiversity\": genetic_diversity,\n        \"confidence\": f\"{confidence}%\"\n    }\n\ndef map_query_to_features(query: str, species: str, region: str):\n    \"\"\"Map user query to the 17 features expected by the trained model\"\"\"\n    \n    # Default feature values based on typical marine data\n    features = {\n        'Species_Name': 0,  # Will be encoded\n        'Scientific_Name': 0,  # Will be encoded (default; can be extended if needed)\n        'Region': 0,  # Will be encoded\n        'Latitude': 0.0,\n        'Longitude': 0.0,\n        'Year': 2024,\n        'Month': 6,  # Mid-year average\n        'Sea_Surface_Temperature_C': 15.0,\n        'Salinity_PSU': 35.0,\n        'Dissolved_Oxygen_mgL': 8.0,\n        'Chlorophyll_mg_m3': 1.0,\n        'pH_Level': 8.1,\n        'Depth_m': 50.0,\n        'Rainfall_mm': 100.0,\n        'Wind_Speed_ms': 10.0,\n        'Catch_Per_Unit_Effort': 0.5,\n        'Abundance_Index': 0.7\n    }\n    \n    # Species-specific mappings\n    species_mapping = {\n        'tuna': {'Species_Name': 1, 'Sea_Surface_Temperature_C': 22.0, 'Depth_m': 100.0, 'Catch_Per_Unit_Effort': 0.8},\n        'salmon': {'Species_Name': 2, 'Sea_Surface_Temperature_C': 12.0, 'Depth_m': 30.0, 'Abundance_Index': 0.8},\n        'cod': {'Species_Name': 3, 'Sea_Surface_Temperature_C': 8.0, 'Depth_m': 80.0, 'Catch_Per_Unit_Effort': 0.6},\n        'herring': {'Species_Name': 4, 'Sea_Surface_Temperature_C': 14.0, 'Depth_m': 40.0, 'Abundance_Index': 0.9},\n        'sardine': {'Species_Name': 5, 'Sea_Surface_Temperature_C': 18.0, 'Depth_m': 25.0, 'Abundance_Index': 0.8},\n        'mackerel': {'Species_Name': 6, 'Sea_Surface_Temperature_C': 16.0, 'Depth_m': 35.0, 'Abundance_Index': 0.7}\n    }\n    \n    # Region-specific mappings\n    region_mapping = {\n        'pacific': {'Region': 1, 'Latitude': 20.0, 'Longitude': -150.0, 'Sea_Surface_Temperature_C': 20.0, 'pH_Level': 8.0},\n        'atlantic': {'Region': 2, 'Latitude': 40.0, 'Longitude': -30.0, 'Sea_Surface_Temperature_C': 18.0, 'pH_Level': 8.1},\n        'mediterranean': {'Region': 3, 'Latitude': 38.0, 'Longitude': 15.0, 'Sea_Surface_Temperature_C': 19.0, 'pH_Level': 8.2},\n        'north': {'Region': 4, 'Latitude': 60.0, 'Longitude': -10.0, 'Sea_Surface_Temperature_C': 8.0, 'pH_Level': 8.3},\n        'south': {'Region': 5, 'Latitude': -30.0, 'Longitude': 20.0, 'Sea_Surface_Temperature_C': 16.0, 'pH_Level': 8.0}\n    }\n    \n    # Apply species-specific values\n    if species.lower() in species_mapping:\n        features.update(species_mapping[species.lower()])\n    \n    # Apply region-specific values\n    if region.lower() in region_mapping:\n        features.update(region_mapping[region.lower()])\n    \n    # Return features in the exact order expected by the model\n    feature_order = ['Species_Name', 'Scientific_Name', 'Region', 'Latitude', 'Longitude', 'Year',\n                    'Month', 'Sea_Surface_Temperature_C', 'Salinity_PSU', 'Dissolved_Oxygen_mgL',\n                    'Chlorophyll_mg_m3', 'pH_Level', 'Depth_m', 'Rainfall_mm', 'Wind_Speed_ms',\n                    'Catch_Per_Unit_Effort', 'Abundance_Index']\n    \n    return [features[feature] for feature in feature_order]\n\n@app.post(\"/predict\")\nasync def predict(input_data: PredictionInput):\n    query = input_data.query.lower()\n    \n    # Parse query for species and region\n    species_match = None\n    region_match = None\n    \n    # Extract species\n    species_keywords = [\"tuna\", \"salmon\", \"cod\", \"herring\", \"sardine\", \"mackerel\", \"shark\", \"bass\", \"trout\"]\n    for keyword in species_keywords:\n        if keyword in query:\n            species_match = keyword\n            break\n    \n    # Extract region  \n    region_keywords = [\"pacific\", \"atlantic\", \"mediterranean\", \"north\", \"south\", \"indian\", \"arctic\"]\n    for keyword in region_keywords:\n        if keyword in query:\n            region_match = keyword\n            break\n    \n    # Set defaults\n    species = species_match or \"tuna\"\n    region = region_match or \"pacific\"\n    \n    try:\n        # Use the actual trained model\n        if model_loaded and model is not None:\n            # Map query to the 17 features expected by your trained model\n            feature_vector = map_query_to_features(query, species, region)\n            \n            # Make prediction using your trained model\n            prediction_class = model.predict([feature_vector])[0]\n            prediction_proba = model.predict_proba([feature_vector])[0]\n            \n            # Map prediction classes to meaningful output\n            class_labels = {0: \"Declining\", 1: \"Stable\", 2: \"Increasing\"}\n            stock_status = class_labels.get(prediction_class, \"Unknown\")\n            \n            # Calculate confidence and other metrics\n            max_confidence = np.max(prediction_proba) * 100\n            \n            # Generate realistic population change based on prediction\n            if prediction_class == 0:  # Declining\n                population_change = random.uniform(-15, -2)\n            elif prediction_class == 1:  # Stable\n                population_change = random.uniform(-2, 2)\n            else:  # Increasing\n                population_change = random.uniform(2, 15)\n            \n            # Generate climate impact (usually negative)\n            climate_impact = random.uniform(-8, -2)\n            \n            # Generate genetic diversity based on population status\n            if prediction_class == 2:\n                genetic_diversity = \"High\"\n            elif prediction_class == 1:\n                genetic_diversity = \"Medium\"\n            else:\n                genetic_diversity = \"Low\"\n            \n            return {\n                \"query\": query,\n                \"species\": species,\n                \"region\": region,\n                \"prediction\": f\"Stock Status: {stock_status} ({population_change:+.1f}% by 2030)\",\n                \"fishPopulation\": f\"{population_change:+.1f}%\",\n                \"climateChange\": f\"{climate_impact:.1f}%\",\n                \"geneticDiversity\": genetic_diversity,\n                \"confidence\": f\"{max_confidence:.0f}%\",\n                \"model_used\": True,\n                \"prediction_class\": int(prediction_class),\n                \"class_probabilities\": prediction_proba.tolist()\n            }\n            \n        else:\n            # Fallback if model not loaded\n            prediction_data = generate_intelligent_prediction(species, region)\n            \n            return {\n                \"query\": query,\n                \"species\": species,\n                \"region\": region,\n                \"prediction\": f\"Predicted population change: {prediction_data['fishPopulation']} by 2030\",\n                \"fishPopulation\": prediction_data[\"fishPopulation\"],\n                \"climateChange\": prediction_data[\"climateChange\"], \n                \"geneticDiversity\": prediction_data[\"geneticDiversity\"],\n                \"confidence\": prediction_data[\"confidence\"],\n                \"model_used\": False\n            }\n            \n    except Exception as e:\n        logger.error(f\"Model prediction error: {e}\")\n        # Fallback to intelligent prediction on any error\n        prediction_data = generate_intelligent_prediction(species, region)\n        \n        return {\n            \"query\": query,\n            \"species\": species,\n            \"region\": region,\n            \"prediction\": f\"Predicted population change: {prediction_data['fishPopulation']} by 2030\",\n            \"fishPopulation\": prediction_data[\"fishPopulation\"],\n            \"climateChange\": prediction_data[\"climateChange\"],\n            \"geneticDiversity\": prediction_data[\"geneticDiversity\"], \n            \"confidence\": prediction_data[\"confidence\"],\n            \"model_used\": False,\n            \"error\": str(e)\n        }\n\n# Optional: Add endpoint to inspect model for debugging\n@app.get(\"/model_info\")\nasync def model_info():\n    info = {\"model_type\": str(type(model)) if model else \"None (fallback mode)\"}\n    if model and hasattr(model, 'get_params'):\n        info[\"parameters\"] = model.get_params()\n    if model and hasattr(model, 'feature_names_in_'):\n        info[\"expected_features\"] = list(model.feature_names_in_)\n    if model and hasattr(model, 'n_features_in_'):\n        info[\"n_features\"] = model.n_features_in_\n    if model and hasattr(model, 'classes_'):\n        info[\"classes\"] = list(model.classes_)\n    return info\n\n# Run the app if executed directly\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)","size_bytes":12721},"client/src/Backend/validate_model.py":{"content":"import pickle\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nimport logging\nfrom pathlib import Path\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ModelValidator:\n    def __init__(self, model_path: str):\n        self.model_path = Path(model_path).resolve()  # Resolve to absolute path\n        self.model = None\n        logger.info(f\"Initializing with model path: {self.model_path}\")\n        self.load_model()\n    \n    def load_model(self):\n        \"\"\"Load the pickled model with detailed logging and version compatibility handling\"\"\"\n        logger.info(f\"Attempting to load model from: {self.model_path}\")\n        try:\n            # Try loading with warnings suppressed first\n            import warnings\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                with open(self.model_path, 'rb') as f:\n                    self.model = pickle.load(f)\n            logger.info(f\"Model loaded successfully from {self.model_path}\")\n            logger.info(f\"Model type: {type(self.model)}\")\n        except FileNotFoundError as e:\n            logger.error(f\"Model file not found at {self.model_path}: {e}\")\n            raise\n        except (pickle.UnpicklingError, AttributeError, TypeError) as e:\n            logger.warning(f\"Standard pickle loading failed: {e}\")\n            # Try alternative loading methods for version compatibility\n            try:\n                logger.info(\"Attempting compatibility mode loading...\")\n                import joblib\n                self.model = joblib.load(self.model_path)\n                logger.info(f\"Model loaded successfully using joblib from {self.model_path}\")\n                logger.info(f\"Model type: {type(self.model)}\")\n            except Exception as joblib_error:\n                logger.error(f\"Joblib loading also failed: {joblib_error}\")\n                logger.error(f\"All loading methods failed for {self.model_path}\")\n                raise\n        except Exception as e:\n            logger.error(f\"Unexpected error loading model from {self.model_path}: {e}\")\n            raise\n    \n    def inspect_model(self):\n        \"\"\"Inspect model properties\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded\")\n            return\n        \n        logger.info(\"=== Model Inspection ===\")\n        logger.info(f\"Model type: {type(self.model)}\")\n        \n        if hasattr(self.model, 'get_params'):\n            logger.info(f\"Model parameters: {self.model.get_params()}\")\n        \n        if hasattr(self.model, 'feature_names_in_'):\n            logger.info(f\"Expected features: {self.model.feature_names_in_}\")\n        \n        if hasattr(self.model, 'n_features_in_'):\n            logger.info(f\"Number of features: {self.model.n_features_in_}\")\n        \n        if hasattr(self.model, 'classes_'):\n            logger.info(f\"Classes: {self.model.classes_}\")\n    \n    def validate_input(self):\n        \"\"\"Validate if sample input matches model expectations\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded, cannot validate input\")\n            return False\n        \n        sample_data = np.array([[25.0, 7.5, 0.15, 0.8]])  # Default sample\n        is_valid = True\n        \n        if hasattr(self.model, 'feature_names_in_'):\n            expected_features = self.model.feature_names_in_\n            if len(sample_data[0]) != len(expected_features):\n                logger.error(f\"Sample data length ({len(sample_data[0])}) does not match expected features count ({len(expected_features)}): {expected_features}\")\n                is_valid = False\n            else:\n                logger.info(f\"Sample data matches expected features: {expected_features}\")\n        elif hasattr(self.model, 'n_features_in_'):\n            if len(sample_data[0]) != self.model.n_features_in_:\n                logger.error(f\"Sample data length ({len(sample_data[0])}) does not match n_features_in_ ({self.model.n_features_in_})\")\n                is_valid = False\n            else:\n                logger.info(f\"Sample data length matches n_features_in_: {self.model.n_features_in_}\")\n        \n        return is_valid\n    \n    def test_prediction(self):\n        \"\"\"Test model prediction with sample data\"\"\"\n        if self.model is None:\n            logger.error(\"Model not loaded\")\n            return\n        \n        sample_data = np.array([[25.0, 7.5, 0.15, 0.8]])  # Adjust to match feature_names_in_\n        \n        if not self.validate_input():\n            logger.error(\"Input validation failed, skipping prediction test\")\n            return\n        \n        try:\n            if hasattr(self.model, 'feature_names_in_'):\n                sample_df = pd.DataFrame(sample_data, columns=self.model.feature_names_in_)\n                prediction = self.model.predict(sample_df)\n            else:\n                prediction = self.model.predict(sample_data)\n            \n            logger.info(f\"Sample prediction: {prediction}\")\n            \n            if hasattr(self.model, 'classes_'):\n                true_label = [0]  # Replace with actual label\n                logger.info(f\"Accuracy: {accuracy_score(true_label, prediction)}\")\n                logger.info(f\"Classification Report:\\n{classification_report(true_label, prediction)}\")\n                logger.info(f\"Confusion Matrix:\\n{confusion_matrix(true_label, prediction)}\")\n                \n        except Exception as e:\n            logger.error(f\"Prediction test failed: {e}\")\n\n# Run validation (for testing)\nif __name__ == \"__main__\":\n    validator = ModelValidator(\"fish_stock_model.pkl\")\n    validator.inspect_model()\n    validator.validate_input()\n    validator.test_prediction()","size_bytes":5778},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext'\nimport { useLocation } from 'wouter'\nimport { useEffect } from 'react'\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode\n}\n\nconst ProtectedRoute = ({ children }: ProtectedRouteProps) => {\n  const { user, loading } = useAuth()\n  const [, navigate] = useLocation()\n\n  useEffect(() => {\n    if (!loading && !user) {\n      navigate('/auth')\n    }\n  }, [user, loading, navigate])\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return null\n  }\n\n  return <>{children}</>\n}\n\nexport default ProtectedRoute","size_bytes":896},"client/src/components/footer.tsx":{"content":"const Footer = () => {\n  return (\n    <footer className=\"bg-card border-t border-border mt-20\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 ocean-gradient rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732L14.146 12.8l-1.179 4.456a1 1 0 01-1.934 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732L9.854 7.2l1.179-4.456A1 1 0 0112 2z\" clipRule=\"evenodd\"></path>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">OceanAI Platform</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Advanced AI-driven platform for ocean research and sustainable fisheries management.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Research Team</h3>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>👨‍💻 Biki Mukherjee – Full-Stack Developer & Project Lead</p>\n              <p>👨‍💻 Rupsa Pramanik – Backend & API Integration</p>\n              <p>👨‍💻 Sayan Samadder – Data Analyst & Visualization</p>\n              <p>👩‍💻 Debjit Chakraborty – AI/ML & Model Training</p>\n              <p>👩‍💻 Dipannita Biswas – Research & Documentation</p>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Data Sources</h3>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>NOAA Ocean Database</p>\n              <p>FAO Fisheries Statistics</p>\n              <p>GenBank Sequences</p>\n              <p>Copernicus Marine Data</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border pt-8 mt-8 text-center text-sm text-muted-foreground\">\n          <p>&copy; 2025 OceanAI Platform. Advancing marine science through artificial intelligence.</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":2582},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, User, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst Navigation = () => {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, signOut } = useAuth();\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/ocean-data\", label: \"Ocean Data\" },\n    { path: \"/fisheries-data\", label: \"Fisheries Data\" },\n    { path: \"/molecular-data\", label: \"Molecular Data\" },\n    { path: \"/ai-predictions\", label: \"AI Predictions\" },\n    { path: \"/about\", label: \"About\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\") return location === \"/\";\n    return location.startsWith(path);\n  };\n\n  return (\n    <nav className=\"glass-effect border-b border-border sticky top-0 z-50 wave-pattern\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo & Brand */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-8 h-8 ocean-gradient rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732L14.146 12.8l-1.179 4.456a1 1 0 01-1.934 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732L9.854 7.2l1.179-4.456A1 1 0 0112 2z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              </div>\n              <div className=\"flex flex-col min-w-0\">\n                <span className=\"text-xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent\">\n                  OceanAI Platform\n                </span>\n                <span className=\"text-xs text-cyan-300/70 font-mono tracking-wider hidden sm:block\">\n                  NEURAL OCEAN ENGINE\n                </span>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                data-testid={`nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                <span\n                  className={`font-medium transition-colors duration-200 border-b-2 ${\n                    isActive(item.path)\n                      ? \"text-foreground border-primary\"\n                      : \"text-muted-foreground hover:text-primary border-transparent\"\n                  }`}\n                >\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n\n            {/* Authentication */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"user-menu-trigger\">\n                    <User className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"glass-effect border-primary/20\">\n                  <DropdownMenuItem disabled className=\"text-muted-foreground\">\n                    {user.user_metadata?.full_name || user.email}\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={signOut}\n                    className=\"text-destructive\"\n                    data-testid=\"logout-button\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Link href=\"/auth\">\n                <Button\n                  className=\"ocean-gradient text-primary-foreground hover:scale-105 transition-transform duration-200\"\n                  data-testid=\"login-button\"\n                >\n                  Sign In\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"mobile-menu-button\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border py-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  <span\n                    className={`text-left py-2 font-medium transition-colors border-l-2 pl-3 ${\n                      isActive(item.path)\n                        ? \"text-foreground border-primary\"\n                        : \"text-muted-foreground hover:text-primary border-transparent\"\n                    }`}\n                  >\n                    {item.label}\n                  </span>\n                </Link>\n              ))}\n\n              {/* Mobile Authentication */}\n              <div className=\"pt-4 border-t border-border\">\n                {user ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-muted-foreground px-3\">{user.email}</div>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={signOut}\n                      className=\"w-full justify-start text-destructive\"\n                      data-testid=\"mobile-logout-button\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </Button>\n                  </div>\n                ) : (\n                  <Link href=\"/auth\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button\n                      className=\"w-full ocean-gradient text-primary-foreground\"\n                      data-testid=\"mobile-login-button\"\n                    >\n                      Sign In\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;","size_bytes":7348},"client/src/components/stat-card.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  unit: string;\n  trend: string;\n  trendType: \"up\" | \"down\";\n  icon: ReactNode;\n  iconColor: string;\n}\n\nconst StatCard = ({ title, value, unit, trend, trendType, icon, iconColor }: StatCardProps) => {\n  return (\n    <Card className=\"hover:border-primary/50 transition-all duration-300 group\" data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`p-3 ${iconColor} rounded-lg group-hover:opacity-80 transition-opacity`}>\n            {icon}\n          </div>\n          <span className=\"text-sm text-muted-foreground\">{unit}</span>\n        </div>\n        <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-2\">{title}</p>\n        <div className={`flex items-center text-sm ${trendType === \"up\" ? \"text-green-400\" : \"text-red-400\"}`}>\n          <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            {trendType === \"up\" ? (\n              <path fillRule=\"evenodd\" d=\"M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path>\n            ) : (\n              <path fillRule=\"evenodd\" d=\"M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z\" clipRule=\"evenodd\"></path>\n            )}\n          </svg>\n          <span data-testid={`stat-trend-${title.toLowerCase().replace(/\\s+/g, '-')}`}>{trend}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatCard;\n","size_bytes":1953},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  session: null,\n  loading: true,\n  signOut: async () => {},\n})\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Check if Supabase is properly configured\n    const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                          import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                          import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n    if (!hasValidConfig) {\n      // For demo purposes, create a mock user but check localStorage for real signup data\n      const savedUser = localStorage.getItem('oceanai_user')\n      const mockUser: any = savedUser ? JSON.parse(savedUser) : {\n        id: 'demo-user',\n        email: 'user@example.com',\n        user_metadata: {\n          full_name: 'Demo User',\n          username: 'DemoUser'\n        },\n        created_at: new Date().toISOString()\n      }\n      setUser(mockUser)\n      setLoading(false)\n      return\n    }\n\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    }).catch(() => {\n      setLoading(false)\n    })\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signOut = async () => {\n    const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                          import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                          import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n    if (hasValidConfig) {\n      await supabase.auth.signOut()\n    } else {\n      // For demo, clear the mock user and localStorage\n      localStorage.removeItem('oceanai_user')\n      setUser(null)\n      setSession(null)\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, session, loading, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","size_bytes":2824},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://clqxyfdfehpwifxbjgfl.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNscXh5ZmRmZWhwd2lmeGJqZ2ZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MTEyMzgsImV4cCI6MjA3Mjk4NzIzOH0.WH9XImx0BIBDHxJAtKvWPl-EAQ-b1F3NvZjPoVMcDAg'\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":498},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst About = () => {\n  const teamMembers = [\n    {\n      name: \"Biki Mukherjee\",\n      role: \"Full-stack Developer & Project Lead\",\n      initials: \"BM\",\n      gradient: \"from-primary to-accent\",\n      image: \"src/images/biki.jpg\", // Add your image path here\n    },\n    {\n      name: \"Rupsa Pramanik\",\n      role: \"Backend & API Integration\",\n      initials: \"RP\",\n      gradient: \"from-accent to-green-400\",\n      image: \"src/images/rupsa.jpg\", // Add your image path here\n    },\n    {\n      name: \"Sayan Samadder\",\n      role: \"Frontend Developer\",\n      initials: \"SS\",\n      gradient: \"from-accent to-green-400\",\n      image: \"src/images/sayan.jpg\", // Add your image path here\n    },\n    {\n      name: \"Dipannita Biswas\",\n      role: \"Documenctation Presentator\",\n      initials: \"DB\",\n      gradient: \"from-accent to-green-400\",\n      image: \"src/images/dipannita.jpg\", // Add your image path here\n    },\n    {\n      name: \"Debjit Chakraborty\",\n      role: \"AI/ML & Model Integration\",\n      initials: \"DC\",\n      gradient: \"from-green-400 to-blue-400\",\n      image: \"src/images/debjit.jpg\", // Add your image path here\n    },\n  ];\n\n  const dataSources = [\n    \"NOAA Ocean Database\",\n    \"FAO Global Fisheries Statistics\",\n    \"Copernicus Marine Environment\",\n    \"OBIS Biodiversity Records\",\n    \"GenBank Genetic Sequences\",\n    \"Satellite Oceanography Data\",\n    \"Regional Fisheries Organizations\",\n    \"Marine Protected Area Networks\",\n  ];\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">About OceanAI Platform</h1>\n          <p className=\"text-lg text-muted-foreground\">Revolutionizing ocean research through artificial intelligence</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Our Mission</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                To accelerate ocean conservation and sustainable fisheries management through cutting-edge AI and comprehensive data integration, \n                providing researchers and policymakers with actionable insights for protecting marine ecosystems.\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Technology</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Our platform leverages machine learning algorithms, satellite data, genomic analysis, and real-time sensor networks \n                to provide unprecedented insights into ocean health and fish population dynamics.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">Research Team</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {teamMembers.map((member, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className={`w-24 h-24 bg-gradient-to-br ${member.gradient} rounded-full mx-auto mb-4 flex items-center justify-center overflow-hidden relative`}>\n                    {member.image ? (\n                      <img\n                        src={member.image}\n                        alt={`${member.name} profile`}\n                        className=\"w-full h-full object-cover rounded-full\"\n                        onError={(e) => {\n                          // Fallback to initials if image fails to load\n                          e.target.style.display = 'none';\n                          e.target.nextSibling.style.display = 'flex';\n                        }}\n                      />\n                    ) : null}\n                    <span \n                      className={`text-2xl font-bold text-primary-foreground absolute inset-0 flex items-center justify-center ${member.image ? 'hidden' : 'flex'}`}\n                      data-testid={`team-member-initials-${index}`}\n                    >\n                      {member.initials}\n                    </span>\n                  </div>\n                  <h3 className=\"font-semibold text-foreground\" data-testid={`team-member-name-${index}`}>\n                    {member.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`team-member-role-${index}`}>\n                    {member.role}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Data Sources</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n              <div>\n                <ul className=\"space-y-2\">\n                  {dataSources.slice(0, 4).map((source, index) => (\n                    <li key={index} data-testid={`data-source-${index}`}>• {source}</li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <ul className=\"space-y-2\">\n                  {dataSources.slice(4).map((source, index) => (\n                    <li key={index + 4} data-testid={`data-source-${index + 4}`}>• {source}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n};\n\nexport default About;","size_bytes":5880},"client/src/pages/ai-predictions.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Sparkles, TrendingUp, Thermometer, Dna, Brain, Activity, Globe, Zap, Cpu, Database, Network } from \"lucide-react\";\nimport Plot from 'react-plotly.js';\n\n// Mock auth context for demonstration\nconst useAuth = () => ({\n  user: { name: \"Demo User\" }\n});\n\n// Mock Link component\nconst Link = ({ href, children }: { href: string; children: React.ReactNode }) => (\n  <a href={href}>{children}</a>\n);\n\n// Enhanced Futuristic Background Component\nconst FuturisticBackground = () => {\n  return (\n    <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n      {/* Base Gradient */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-950 via-blue-950 to-black\" />\n      \n      {/* Animated Grid */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div \n          className=\"absolute inset-0\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px)\n            `,\n            backgroundSize: '50px 50px',\n            animation: 'gridMove 20s linear infinite'\n          }}\n        />\n      </div>\n      \n      {/* Neural Network Connections */}\n      <div className=\"absolute inset-0 opacity-30\">\n        <svg className=\"w-full h-full\" viewBox=\"0 0 1000 1000\">\n          {Array.from({ length: 15 }, (_, i) => {\n            const x1 = Math.random() * 1000;\n            const y1 = Math.random() * 1000;\n            const x2 = Math.random() * 1000;\n            const y2 = Math.random() * 1000;\n            return (\n              <g key={i}>\n                <line\n                  x1={x1}\n                  y1={y1}\n                  x2={x2}\n                  y2={y2}\n                  stroke=\"url(#neuralGradient)\"\n                  strokeWidth=\"1\"\n                  opacity=\"0.6\"\n                  className=\"animate-pulse\"\n                  style={{ animationDelay: `${i * 0.3}s` }}\n                />\n                <circle\n                  cx={x1}\n                  cy={y1}\n                  r=\"3\"\n                  fill=\"#00ffff\"\n                  opacity=\"0.8\"\n                  className=\"animate-pulse\"\n                  style={{ animationDelay: `${i * 0.3}s` }}\n                />\n              </g>\n            );\n          })}\n          <defs>\n            <linearGradient id=\"neuralGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor=\"#00ffff\" />\n              <stop offset=\"50%\" stopColor=\"#0066ff\" />\n              <stop offset=\"100%\" stopColor=\"#ff00ff\" />\n            </linearGradient>\n          </defs>\n        </svg>\n      </div>\n      \n      {/* Floating Data Particles */}\n      <div className=\"absolute inset-0\">\n        {Array.from({ length: 30 }, (_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-1 h-1 bg-cyan-400 rounded-full animate-pulse\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 5}s`,\n              animationDuration: `${2 + Math.random() * 4}s`,\n              boxShadow: '0 0 10px currentColor'\n            }}\n          />\n        ))}\n      </div>\n      \n      {/* Holographic Overlays */}\n      <div className=\"absolute top-0 left-0 w-full h-full\">\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '8s' }} />\n        <div className=\"absolute bottom-1/4 right-1/4 w-80 h-80 bg-purple-500/5 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '10s', animationDelay: '-2s' }} />\n        <div className=\"absolute top-1/2 right-1/3 w-64 h-64 bg-blue-500/5 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '12s', animationDelay: '-4s' }} />\n      </div>\n      \n      {/* Scan Lines Effect */}\n      <div \n        className=\"absolute inset-0 pointer-events-none opacity-10\"\n        style={{\n          background: 'repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 255, 0.1) 3px)',\n          animation: 'scanlines 2s linear infinite'\n        }}\n      />\n      \n      {/* Custom CSS for animations */}\n      <style jsx>{`\n        @keyframes gridMove {\n          0% { transform: translate(0, 0); }\n          100% { transform: translate(50px, 50px); }\n        }\n        \n        @keyframes scanlines {\n          0% { transform: translateY(0); }\n          100% { transform: translateY(4px); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\n// Prediction Chart Component using Plotly.js\nconst PredictionChart = ({ searchResults }: { searchResults: any[] }) => {\n  if (!searchResults.length) return null;\n\n  // Parse fishPopulation to numbers for plotting\n  const regions = searchResults.map((result) => result.region);\n  const populations = searchResults.map((result) => {\n    const val = result.fishPopulation.replace('%', '').replace('+', '').replace('-', '-');\n    return parseFloat(val) || 0;\n  });\n  const colors = populations.map((p) => (p > 0 ? '#10b981' : '#ef4444')); // Green for positive, red for negative\n\n  const data = [\n    {\n      x: regions,\n      y: populations,\n      type: 'bar',\n      marker: {\n        color: colors,\n        line: {\n          color: 'white',\n          width: 1\n        }\n      },\n      hovertemplate: '<b>%{x}</b><br>Population Change: %{y}%<extra></extra>'\n    }\n  ];\n\n  const layout = {\n    title: {\n      text: 'Fish Population Predictions by Region',\n      font: {\n        size: 18,\n        color: '#ffffff'\n      }\n    },\n    xaxis: {\n      title: {\n        text: 'Regions',\n        color: '#e2e8f0'\n      },\n      tickfont: {\n        color: '#e2e8f0'\n      },\n      gridcolor: 'rgba(255,255,255,0.1)'\n    },\n    yaxis: {\n      title: {\n        text: 'Population Change (%)',\n        color: '#e2e8f0'\n      },\n      tickfont: {\n        color: '#e2e8f0'\n      },\n      gridcolor: 'rgba(255,255,255,0.1)'\n    },\n    paper_bgcolor: 'rgba(0,0,0,0)',\n    plot_bgcolor: 'rgba(17,24,39,0.8)',\n    font: {\n      color: '#e2e8f0'\n    },\n    margin: {\n      l: 50,\n      r: 20,\n      b: 50,\n      t: 50\n    },\n    showlegend: false\n  };\n\n  return (\n    <Plot\n      data={data}\n      layout={layout}\n      config={{\n        responsive: true,\n        displayModeBar: true,\n        modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d']\n      }}\n      style={{\n        width: '100%',\n        height: '400px'\n      }}\n      className=\"rounded-lg border border-white/20\"\n    />\n  );\n};\n\n// Leaflet Map Component with white mode styling\nconst LeafletMap = ({ regionData }: { regionData?: any }) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const predictionMarkerRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!mapRef.current || mapInstanceRef.current) return;\n\n    // Load Leaflet CSS\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css';\n    document.head.appendChild(link);\n\n    // Add custom CSS for white mode styling\n    const customStyles = document.createElement('style');\n    customStyles.textContent = `\n      .leaflet-container {\n        z-index: 1 !important;\n        position: relative !important;\n        background: #ffffff !important;\n        border: 1px solid #e2e8f0 !important;\n        border-radius: 12px !important;\n        box-shadow: 0 0 30px rgba(0, 0, 0, 0.1) !important;\n      }\n      .leaflet-tile {\n        filter: brightness(1) contrast(1) !important;\n      }\n      .leaflet-control-zoom a {\n        background: rgba(255, 255, 255, 0.9) !important;\n        border: 1px solid #cbd5e1 !important;\n        color: #475569 !important;\n      }\n      .leaflet-control-zoom a:hover {\n        background: rgba(255, 255, 255, 1) !important;\n        color: #1e293b !important;\n      }\n      .leaflet-control-attribution {\n        background: rgba(255, 255, 255, 0.9) !important;\n        color: #64748b !important;\n        font-family: 'Inter', sans-serif !important;\n      }\n      @keyframes pulse {\n        0% { transform: scale(1); opacity: 1; box-shadow: 0 0 10px currentColor; }\n        50% { transform: scale(1.2); opacity: 0.8; box-shadow: 0 0 20px currentColor; }\n        100% { transform: scale(1); opacity: 1; box-shadow: 0 0 10px currentColor; }\n      }\n      .custom-popup .leaflet-popup-content-wrapper {\n        background: rgba(255, 255, 255, 0.95) !important;\n        border: 1px solid #cbd5e1 !important;\n        border-radius: 8px !important;\n        color: #1e293b !important;\n        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15) !important;\n      }\n      .custom-popup .leaflet-popup-tip {\n        background: rgba(255, 255, 255, 0.95) !important;\n        border: 1px solid #cbd5e1 !important;\n      }\n    `;\n    document.head.appendChild(customStyles);\n\n    // Load Leaflet JS\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js';\n    script.onload = () => {\n      const L = (window as any).L;\n      \n      const map = L.map(mapRef.current, {\n        zoomControl: true,\n        attributionControl: true\n      }).setView([20, 0], 2);\n      mapInstanceRef.current = map;\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© AI Ocean Engine | OpenStreetMap',\n        maxZoom: 18,\n      }).addTo(map);\n\n      const createCustomIcon = (color: string) => {\n        return L.divIcon({\n          className: 'custom-div-icon',\n          html: `<div style=\"\n            width: 20px; \n            height: 20px; \n            background: radial-gradient(circle, ${color} 0%, transparent 70%); \n            border: 2px solid ${color}; \n            border-radius: 50%; \n            animation: pulse 2s infinite;\n            box-shadow: 0 0 15px ${color};\n          \"></div>`,\n          iconSize: [20, 20],\n          iconAnchor: [10, 10]\n        });\n      };\n\n      const marineStations = [\n        {\n          lat: 45.5,\n          lng: -30.2,\n          name: \"NORTH_ATLANTIC_ALPHA\",\n          species: \"Atlantic Cod\",\n          prediction: \"+12.7%\",\n          color: \"#00ff88\"\n        },\n        {\n          lat: 35.2,\n          lng: -120.4,\n          name: \"PACIFIC_BETA\", \n          species: \"Pacific Salmon\",\n          prediction: \"+8.9%\",\n          color: \"#0088ff\"\n        },\n        {\n          lat: 42.3,\n          lng: 15.1,\n          name: \"MEDITERRANEAN_GAMMA\",\n          species: \"Bluefin Tuna\",\n          prediction: \"-3.2%\",\n          color: \"#ff4444\"\n        },\n        {\n          lat: -25.5,\n          lng: 153.2,\n          name: \"BARRIER_REEF_DELTA\",\n          species: \"Coral Trout\",\n          prediction: \"+5.4%\",\n          color: \"#ffaa00\"\n        },\n        {\n          lat: 60.1,\n          lng: 5.3,\n          name: \"NORWEGIAN_EPSILON\",\n          species: \"Herring\",\n          prediction: \"+15.3%\",\n          color: \"#00ff88\"\n        },\n        {\n          lat: -40.2,\n          lng: -55.8,\n          name: \"SOUTH_ATLANTIC_ZETA\",\n          species: \"Patagonian Toothfish\",\n          prediction: \"-8.1%\",\n          color: \"#ff4444\"\n        }\n      ];\n\n      marineStations.forEach(station => {\n        const marker = L.marker([station.lat, station.lng], {\n          icon: createCustomIcon(station.color)\n        }).addTo(map);\n\n        const popupContent = `\n          <div style=\"font-family: 'Inter', sans-serif; min-width: 200px; background: rgba(255, 255, 255, 0.95); color: #1e293b;\">\n            <div style=\"border-bottom: 1px solid #cbd5e1; padding-bottom: 8px; margin-bottom: 8px;\">\n              <div style=\"font-size: 10px; color: #64748b;\">STATION_ID:</div>\n              <div style=\"font-size: 12px; font-weight: bold; color: #1e293b;\">${station.name}</div>\n            </div>\n            <div style=\"margin-bottom: 6px;\">\n              <span style=\"font-size: 10px; color: #64748b;\">TARGET_SPECIES:</span>\n              <div style=\"font-size: 11px; color: #334155;\">${station.species}</div>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <span style=\"font-size: 10px; color: #64748b;\">PREDICTION_DELTA:</span>\n              <span style=\"\n                font-size: 12px; \n                font-weight: bold; \n                color: ${station.prediction.startsWith('+') ? '#059669' : '#dc2626'};\n              \">\n                ${station.prediction}\n              </span>\n            </div>\n            <div style=\"\n              background: linear-gradient(90deg, #f1f5f9, #e2e8f0); \n              border: 1px solid #cbd5e1; \n              border-radius: 4px; \n              padding: 4px 6px; \n              font-size: 9px; \n              color: #64748b;\n              text-align: center;\n            \">\n              AI_CONFIDENCE: 87-91% | STATUS: ACTIVE\n            </div>\n          </div>\n        `;\n\n        marker.bindPopup(popupContent, {\n          maxWidth: 250,\n          className: 'custom-popup'\n        });\n\n        marker.on('mouseover', function() {\n          this.openPopup();\n        });\n      });\n\n      const addOceanCurrents = () => {\n        const currentPaths = [\n          [[60, -30], [45, -20], [30, -10], [15, 0]],\n          [[-10, 20], [0, 30], [10, 40], [20, 50]],\n          [[40, 140], [35, 150], [30, 160], [25, 170]]\n        ];\n\n        currentPaths.forEach((path, index) => {\n          setTimeout(() => {\n            const polyline = L.polyline(path, {\n              color: '#3b82f6',\n              weight: 2,\n              opacity: 0.6,\n              dashArray: '5, 10'\n            }).addTo(map);\n\n            polyline.bindTooltip(`DATA_STREAM_${index + 1}`, {\n              permanent: false,\n              direction: 'center',\n              className: 'futuristic-tooltip'\n            });\n          }, index * 1000);\n        });\n      };\n\n      setTimeout(addOceanCurrents, 2000);\n    };\n\n    document.head.appendChild(script);\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!mapInstanceRef.current || !regionData) return;\n    \n    console.log('Map update triggered with regionData:', regionData);\n    console.log('Coordinates:', regionData.coordinates);\n\n    const map = mapInstanceRef.current;\n    const L = (window as any).L;\n\n    if (!L) return; // Ensure Leaflet is loaded\n\n    // Remove existing prediction marker if it exists\n    if (predictionMarkerRef.current) {\n      map.removeLayer(predictionMarkerRef.current);\n      predictionMarkerRef.current = null;\n    }\n\n    // Use coordinates from backend API response or fallback\n    const coordinates: [number, number] = regionData.coordinates ? \n      [regionData.coordinates.lat, regionData.coordinates.lng] : [0, 0];\n    const zoom = regionData.coordinates?.zoom || 5;\n    const bbox = regionData.coordinates?.bbox;\n\n    // Update map view to new coordinates with animation\n    if (bbox && bbox.length === 4) {\n      // Use bounding box for better fit\n      const bounds = [[bbox[0], bbox[1]], [bbox[2], bbox[3]]];\n      map.fitBounds(bounds, { animate: true, duration: 1.5 });\n    } else {\n      // Fallback to center coordinates\n      map.flyTo(coordinates, zoom, {\n        animate: true,\n        duration: 1.5\n      });\n    }\n\n    // Create custom prediction marker icon\n    const predictionIcon = L.divIcon({\n      html: `\n        <div style=\"\n          background: radial-gradient(circle, #8b5cf6 0%, #3b82f6 100%);\n          border: 3px solid #1e293b;\n          border-radius: 50%;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          box-shadow: 0 0 20px rgba(139, 92, 246, 0.5), 0 0 40px rgba(59, 130, 246, 0.3);\n          animation: pulse 2s infinite;\n        \">\n          <div style=\"\n            background: #fff;\n            border-radius: 50%;\n            width: 8px;\n            height: 8px;\n            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n          \"></div>\n        </div>\n      `,\n      className: 'prediction-marker',\n      iconSize: [24, 24],\n      iconAnchor: [12, 12]\n    });\n\n    // Add new prediction marker\n    const marker = L.marker(coordinates, {\n      icon: predictionIcon\n    }).addTo(map);\n\n    // Create popup content\n    const popupContent = `\n      <div style=\"font-family: 'Inter', sans-serif; min-width: 220px; background: rgba(255, 255, 255, 0.98); color: #1e293b;\">\n        <div style=\"border-bottom: 1px solid #8b5cf6; padding-bottom: 8px; margin-bottom: 8px;\">\n          <div style=\"font-size: 10px; color: #64748b;\">AI_PREDICTION_ENGINE:</div>\n          <div style=\"font-size: 12px; font-weight: bold; color: #8b5cf6;\">NEURAL_FORECAST_ALPHA</div>\n        </div>\n        <div style=\"margin-bottom: 6px;\">\n          <span style=\"font-size: 10px; color: #64748b;\">SPECIES_TARGET:</span>\n          <div style=\"font-size: 11px; color: #334155;\">${regionData.species || 'Unknown'}</div>\n        </div>\n        <div style=\"margin-bottom: 6px;\">\n          <span style=\"font-size: 10px; color: #64748b;\">REGION_SCOPE:</span>\n          <div style=\"font-size: 11px; color: #334155;\">${regionData.regionCanonical || regionData.region || 'Unknown'}</div>\n        </div>\n        <div style=\"margin-bottom: 8px;\">\n          <span style=\"font-size: 10px; color: #64748b;\">STOCK_STATUS:</span>\n          <span style=\"\n            font-size: 12px; \n            font-weight: bold; \n            color: ${regionData.stock_status === 'Increasing' ? '#059669' : regionData.stock_status === 'Declining' ? '#dc2626' : '#d97706'};\n          \">\n            ${regionData.stock_status || 'Unknown'} (${regionData.fishPopulation || 'N/A'})\n          </span>\n        </div>\n        <div style=\"\n          background: linear-gradient(90deg, #f8fafc, #e2e8f0); \n          border: 1px solid #cbd5e1; \n          border-radius: 4px; \n          padding: 4px 6px; \n          font-size: 9px; \n          color: #64748b;\n          text-align: center;\n        \">\n          CONFIDENCE: ${regionData.confidence || 'N/A'} | MODEL: ${regionData.model_used ? 'NEURAL_ACTIVE' : 'FALLBACK'}\n        </div>\n      </div>\n    `;\n\n    // Bind and open popup\n    marker.bindPopup(popupContent, {\n      maxWidth: 280,\n      className: 'prediction-popup'\n    }).openPopup();\n\n    // Store marker reference\n    predictionMarkerRef.current = marker;\n  }, [regionData]);\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"w-full h-full rounded-lg relative overflow-hidden border border-gray-200\" \n      style={{ \n        minHeight: '400px',\n        zIndex: 1,\n        position: 'relative',\n        background: 'linear-gradient(135deg, rgba(255, 255, 255, 1) 0%, rgba(248, 250, 252, 1) 100%)'\n      }} \n    />\n  );\n};\n\nconst AIPredictions = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [rawModelOutput, setRawModelOutput] = useState<any>(null);\n  const { user } = useAuth();\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) return;\n    if (!user) return;\n\n    setIsGenerating(true);\n\n    try {\n      const response = await fetch(\"/api/ml-predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          query: searchQuery\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        if (response.status === 400) {\n          setRawModelOutput(null);\n          setSearchResults([]);\n          throw new Error(data.error || \"Invalid species. Please search for marine species like tuna, salmon, cod, etc.\");\n        } else {\n          throw new Error(data.error || \"Prediction failed\");\n        }\n      }\n\n      setRawModelOutput(data);\n\n      const baseResults = [\n        {\n          id: \"1\",\n          species: data.species || searchQuery,\n          region: \"North Atlantic\",\n          timeframe: \"12 months\",\n          scenario: \"Current Conditions\",\n          fishPopulation: data.fishPopulation || \"+12.7%\",\n          climateChange: data.climateChange || \"-5.2%\",\n          geneticDiversity: data.geneticDiversity || \"High\",\n          confidence: data.confidence || \"91%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"2\", \n          species: data.species || searchQuery,\n          region: \"Pacific Ocean\",\n          timeframe: \"12 months\", \n          scenario: \"RCP 4.5\",\n          fishPopulation: data.fishPopulation || \"+8.9%\",\n          climateChange: data.climateChange || \"-9.4%\",\n          geneticDiversity: data.geneticDiversity || \"Medium\",\n          confidence: data.confidence || \"84%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"3\",\n          species: data.species || searchQuery,\n          region: data.region || \"Mediterranean\",\n          timeframe: \"12 months\",\n          scenario: \"RCP 8.5\",\n          fishPopulation: data.fishPopulation || \"-3.2%\",\n          climateChange: data.climateChange || \"-15.7%\",\n          geneticDiversity: data.geneticDiversity || \"Low\",\n          confidence: data.confidence || \"88%\",\n          createdAt: new Date().toISOString()\n        }\n      ];\n\n      setSearchResults(baseResults);\n      \n    } catch (error) {\n      console.error(\"Prediction failed:\", error);\n      \n      const mockResults = [\n        {\n          id: \"1\",\n          species: searchQuery,\n          region: \"North Atlantic\",\n          timeframe: \"12 months\",\n          scenario: \"Current Conditions\",\n          fishPopulation: \"+12.7%\",\n          climateChange: \"-5.2%\",\n          geneticDiversity: \"High\",\n          confidence: \"91%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"2\", \n          species: searchQuery,\n          region: \"Pacific Ocean\",\n          timeframe: \"12 months\", \n          scenario: \"RCP 4.5\",\n          fishPopulation: \"+8.9%\",\n          climateChange: \"-9.4%\",\n          geneticDiversity: \"Medium\",\n          confidence: \"84%\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"3\",\n          species: searchQuery,\n          region: \"Mediterranean\",\n          timeframe: \"12 months\",\n          scenario: \"RCP 8.5\",\n          fishPopulation: \"-3.2%\",\n          climateChange: \"-15.7%\",\n          geneticDiversity: \"Low\",\n          confidence: \"88%\",\n          createdAt: new Date().toISOString()\n        }\n      ];\n      \n      setSearchResults(mockResults);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"relative min-h-screen overflow-hidden\">\n        <FuturisticBackground />\n        <section className=\"relative z-10 py-16 px-4 sm:px-6 lg:px-8 min-h-screen flex items-center justify-center\">\n          <div className=\"container mx-auto max-w-2xl text-center\">\n            <div className=\"mb-8 backdrop-blur-md bg-black/40 border-cyan-500/30 shadow-2xl rounded-3xl p-12 border-2\">\n              <div className=\"relative mb-6\">\n                <Cpu className=\"w-20 h-20 text-cyan-400 mx-auto animate-pulse\" />\n                <div className=\"absolute inset-0 bg-cyan-400/20 rounded-full blur-xl animate-pulse\" />\n              </div>\n              <h1 className=\"text-5xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent mb-6 font-mono\">\n                NEURAL ENGINE\n              </h1>\n              <div className=\"text-lg text-cyan-300 mb-8 font-mono\">\n                [ AUTHENTICATION REQUIRED ]<br/>\n                ACCESS_LEVEL: RESTRICTED\n              </div>\n              <Link href=\"/auth\">\n                <Button className=\"bg-gradient-to-r from-cyan-500 to-purple-500 text-black px-10 py-4 text-lg hover:scale-105 transition-all duration-300 shadow-lg shadow-cyan-500/25 font-mono font-bold border border-cyan-400/50\">\n                  INITIALIZE_SESSION\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative min-h-screen overflow-hidden bg-black\">\n      <FuturisticBackground />\n      \n      {/* Header */}\n      <section className=\"relative z-10 py-8 px-4 sm:px-6 lg:px-8 border-b border-cyan-500/20\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"relative p-4 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-xl mr-6 border border-cyan-400/30\">\n                <Brain className=\"w-12 h-12 text-cyan-400 animate-pulse\" />\n                <div className=\"absolute inset-0 bg-cyan-400/10 rounded-xl blur-lg animate-pulse\" />\n              </div>\n              <div className=\"text-left\">\n                <h1 className=\"text-5xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent font-mono\">\n                  NEURAL_ENGINE\n                </h1>\n                <div className=\"text-cyan-300 font-mono text-sm mt-2\">v2.1.4 | QUANTUM_READY</div>\n              </div>\n            </div>\n            <p className=\"text-lg text-slate-300 max-w-2xl mx-auto font-mono\">\n              [ OCEAN_INTELLIGENCE_SYSTEM ] Deep learning predictions for marine ecosystems\n            </p>\n          </div>\n\n          {/* Search Interface */}\n          <Card className=\"backdrop-blur-md bg-white/10 border-white/20 shadow-2xl max-w-2xl mx-auto\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-300\" />\n                  <Input\n                    placeholder=\"Search species or region (e.g., 'Bluefin Tuna North Atlantic')\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-12 h-12 bg-white/10 border-white/20 text-white placeholder:text-blue-200 focus:border-blue-400 focus:ring-blue-400/25 backdrop-blur-sm\"\n                  />\n                </div>\n                <Button \n                  onClick={handleSearch}\n                  disabled={isGenerating || !searchQuery.trim()}\n                  className=\"h-12 px-8 bg-gradient-to-r from-blue-500 to-teal-500 text-white hover:scale-105 transition-all duration-200 shadow-lg shadow-blue-500/25\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <Activity className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Predict\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Model Output Box */}\n          {rawModelOutput && (\n            <div className=\"mt-6\">\n              <Card className=\"backdrop-blur-md bg-white/10 border-white/20 shadow-2xl max-w-4xl mx-auto\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Brain className=\"w-5 h-5 mr-2 text-green-400\" />\n                    AI Model Output - fish_stock_model.pkl\n                    {rawModelOutput.model_used && (\n                      <Badge className=\"ml-2 bg-green-900/50 text-green-300 border-green-700\">\n                        ✅ Model Active\n                      </Badge>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Quick Summary */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-white/10 rounded-lg border border-white/20 backdrop-blur-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-400\">\n                          {rawModelOutput.stock_status || \"Unknown\"}\n                        </div>\n                        <div className=\"text-sm text-blue-200\">Stock Status</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-teal-400\">\n                          {rawModelOutput.confidence || \"N/A\"}\n                        </div>\n                        <div className=\"text-sm text-blue-200\">Confidence</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-yellow-400\">\n                          Class {rawModelOutput.prediction_class}\n                        </div>\n                        <div className=\"text-sm text-blue-200\">Prediction Class</div>\n                      </div>\n                    </div>\n\n                    {/* Raw JSON Output */}\n                    <div className=\"bg-black/30 rounded-lg p-4 border border-white/20 backdrop-blur-sm\">\n                      <h4 className=\"text-sm font-semibold text-blue-200 mb-2\">Raw Model Response:</h4>\n                      <pre className=\"text-xs text-green-300 overflow-x-auto whitespace-pre-wrap max-h-40 overflow-y-auto\">\n                        {JSON.stringify(rawModelOutput, null, 2)}\n                      </pre>\n                    </div>\n\n                    {/* Class Probabilities */}\n                    {rawModelOutput.class_probabilities && (\n                      <div className=\"bg-white/10 rounded-lg p-4 border border-white/20 backdrop-blur-sm\">\n                        <h4 className=\"text-sm font-semibold text-blue-200 mb-3\">Class Probabilities:</h4>\n                        <div className=\"space-y-2\">\n                          {rawModelOutput.class_probabilities.map((prob: number, index: number) => {\n                            const labels = ['Declining', 'Stable', 'Increasing'];\n                            const colors = ['bg-red-500', 'bg-yellow-500', 'bg-green-500'];\n                            return (\n                              <div key={index} className=\"flex items-center space-x-3\">\n                                <div className=\"w-20 text-sm text-blue-200\">{labels[index]}:</div>\n                                <div className=\"flex-1 bg-white/20 rounded-full h-2 relative overflow-hidden\">\n                                  <div \n                                    className={`${colors[index]} h-2 rounded-full transition-all duration-500`}\n                                    style={{ width: `${prob * 100}%` }}\n                                  ></div>\n                                </div>\n                                <div className=\"w-16 text-sm text-blue-200 text-right\">\n                                  {(prob * 100).toFixed(1)}%\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Main Dashboard */}\n      <section className=\"relative z-10 py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"container mx-auto max-w-7xl\">\n          <div className=\"grid grid-cols-1 gap-8\">\n            \n            {/* Interactive Ocean Map - Full Width */}\n            <div className=\"w-full\">\n              <Card className=\"h-full backdrop-blur-md bg-white/10 border-white/20 shadow-2xl relative overflow-hidden\" style={{ zIndex: 1 }}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Globe className=\"w-5 h-5 mr-2 text-blue-400\" />\n                    Interactive Ocean Map\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"aspect-video rounded-lg overflow-hidden border border-white/20 relative backdrop-blur-sm\" style={{ zIndex: 1 }}>\n                    <LeafletMap regionData={rawModelOutput} />\n                  </div>\n                  <div className=\"mt-4 flex flex-wrap gap-2 relative\" style={{ zIndex: 2 }}>\n                    <Badge className=\"bg-green-900/50 text-green-300 border-green-700/50 backdrop-blur-sm\">\n                      <span className=\"w-2 h-2 bg-green-400 rounded-full mr-1\"></span>\n                      Increasing Population\n                    </Badge>\n                    <Badge className=\"bg-red-900/50 text-red-300 border-red-700/50 backdrop-blur-sm\">\n                      <span className=\"w-2 h-2 bg-red-400 rounded-full mr-1\"></span>\n                      Declining Population\n                    </Badge>\n                    <Badge className=\"bg-blue-900/50 text-blue-300 border-blue-700/50 backdrop-blur-sm\">\n                      <span className=\"w-2 h-2 bg-blue-400 rounded-full mr-1\"></span>\n                      Monitoring Station\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Ocean Metrics Display for Ocean/Composite Queries */}\n            {rawModelOutput?.oceanMetrics && (\n              <div className=\"w-full\">\n                <Card className=\"h-full backdrop-blur-md bg-white/10 border-white/20 shadow-2xl relative overflow-hidden\" style={{ zIndex: 1 }}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-white\">\n                      <Thermometer className=\"w-5 h-5 mr-2 text-blue-400\" />\n                      Ocean Environmental Data\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"text-center p-4 rounded-lg bg-white/5 border border-white/20\">\n                        <div className=\"text-2xl font-bold text-cyan-400\">{rawModelOutput.oceanMetrics.temperatureC}°C</div>\n                        <div className=\"text-xs text-white/70\">Temperature</div>\n                      </div>\n                      <div className=\"text-center p-4 rounded-lg bg-white/5 border border-white/20\">\n                        <div className=\"text-2xl font-bold text-green-400\">{rawModelOutput.oceanMetrics.salinityPSU}</div>\n                        <div className=\"text-xs text-white/70\">Salinity (PSU)</div>\n                      </div>\n                      <div className=\"text-center p-4 rounded-lg bg-white/5 border border-white/20\">\n                        <div className=\"text-2xl font-bold text-purple-400\">{rawModelOutput.oceanMetrics.pH}</div>\n                        <div className=\"text-xs text-white/70\">pH Level</div>\n                      </div>\n                      <div className=\"text-center p-4 rounded-lg bg-white/5 border border-white/20\">\n                        <div className=\"text-lg font-bold text-yellow-400\">{rawModelOutput.oceanMetrics.popularFishes?.length || 0}</div>\n                        <div className=\"text-xs text-white/70\">Popular Species</div>\n                      </div>\n                    </div>\n                    {rawModelOutput.oceanMetrics.popularFishes && rawModelOutput.oceanMetrics.popularFishes.length > 0 && (\n                      <div>\n                        <h4 className=\"text-white font-semibold mb-3\">Popular Fish Species in this Region</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {rawModelOutput.oceanMetrics.popularFishes.map((fish: string, index: number) => (\n                            <Badge key={index} className=\"bg-blue-900/50 text-blue-300 border-blue-700/50 backdrop-blur-sm\">\n                              {fish}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Trend Analysis for Composite Queries */}\n            {rawModelOutput?.trendSummary && (\n              <div className=\"w-full\">\n                <Card className=\"h-full backdrop-blur-md bg-white/10 border-white/20 shadow-2xl relative overflow-hidden\" style={{ zIndex: 1 }}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-white\">\n                      <Activity className=\"w-5 h-5 mr-2 text-orange-400\" />\n                      Population Trend Analysis\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <p className=\"text-white/90 leading-relaxed\">{rawModelOutput.trendSummary}</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Interactive Prediction Chart - Full Width */}\n            {searchResults.length > 0 && rawModelOutput?.fishPopulation && (\n              <div className=\"w-full\">\n                <Card className=\"h-full backdrop-blur-md bg-white/10 border-white/20 shadow-2xl relative overflow-hidden\" style={{ zIndex: 1 }}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-white\">\n                      <TrendingUp className=\"w-5 h-5 mr-2 text-green-400\" />\n                      Interactive Prediction Chart\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <div className=\"w-full rounded-lg overflow-hidden border border-white/20 relative backdrop-blur-sm\" style={{ zIndex: 1 }}>\n                      <PredictionChart searchResults={searchResults} />\n                    </div>\n                    <div className=\"mt-4 text-xs text-blue-300 text-center\">\n                      Hover over bars for detailed predictions | Data updates with each search\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Results */}\n          {searchResults.length > 0 && (\n            <div className=\"mt-12 relative\" style={{ zIndex: 1 }}>\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-white mb-2 drop-shadow-lg\">Prediction Results</h2>\n                <p className=\"text-blue-100 drop-shadow-md\">AI-generated predictions for \"{searchQuery}\"</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {searchResults.map((result) => (\n                  <Card key={result.id} className=\"backdrop-blur-md bg-white/10 border-white/20 hover:border-white/30 transition-all duration-300 hover:scale-105 shadow-2xl hover:shadow-blue-500/20\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg text-white\">{result.region}</CardTitle>\n                        <Badge className=\"bg-blue-900/50 text-blue-300 border-blue-700/50 backdrop-blur-sm\">\n                          {result.confidence} confidence\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {/* Fish Population */}\n                      <div className=\"p-3 bg-gradient-to-r from-blue-900/20 to-blue-800/20 rounded-lg border border-blue-700/30 backdrop-blur-sm\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-blue-200\">\n                            📈 Fish Population\n                          </span>\n                          <span className={`font-bold ${result.fishPopulation.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>\n                            {result.fishPopulation}\n                          </span>\n                        </div>\n                        <div className=\"w-full h-1 bg-white/20 rounded-full overflow-hidden\">\n                          <div className={`h-full rounded-full ${result.fishPopulation.startsWith('+') ? 'bg-green-400' : 'bg-red-400'}`} style={{width: '70%'}}></div>\n                        </div>\n                      </div>\n\n                      {/* Climate Change Effect */}\n                      <div className=\"p-3 bg-gradient-to-r from-red-900/20 to-red-800/20 rounded-lg border border-red-700/30 backdrop-blur-sm\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-blue-200\">\n                            🌡️ Climate Impact\n                          </span>\n                          <span className=\"font-bold text-red-400\">\n                            {result.climateChange}\n                          </span>\n                        </div>\n                        <div className=\"w-full h-1 bg-white/20 rounded-full overflow-hidden\">\n                          <div className=\"h-full bg-red-400 rounded-full\" style={{width: '45%'}}></div>\n                        </div>\n                      </div>\n\n                      {/* Genetic Diversity */}\n                      <div className=\"p-3 bg-gradient-to-r from-yellow-900/20 to-yellow-800/20 rounded-lg border border-yellow-700/30 backdrop-blur-sm\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm font-medium flex items-center text-blue-200\">\n                            🧬 Genetic Risk\n                          </span>\n                          <Badge \n                            className={`${\n                              result.geneticDiversity === 'High' ? 'bg-green-900/50 text-green-300 border-green-700/50' :\n                              result.geneticDiversity === 'Medium' ? 'bg-yellow-900/50 text-yellow-300 border-yellow-700/50' :\n                              'bg-red-900/50 text-red-300 border-red-700/50'\n                            } backdrop-blur-sm`}\n                          >\n                            {result.geneticDiversity}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"text-xs text-blue-200 pt-2 border-t border-white/20\">\n                        Scenario: {result.scenario} • Timeframe: {result.timeframe}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* No Results State */}\n          {!searchResults.length && !isGenerating && (\n            <div className=\"mt-12 text-center relative\" style={{ zIndex: 1 }}>\n              <div className=\"max-w-md mx-auto backdrop-blur-md bg-white/10 border-white/20 shadow-2xl rounded-2xl p-8\">\n                <Brain className=\"w-16 h-16 text-slate-400 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium text-white mb-2 drop-shadow-lg\">Ready for AI Analysis</h3>\n                <p className=\"text-blue-200 drop-shadow-md\">\n                  Enter a species or region above to generate AI-powered predictions and insights\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default AIPredictions;","size_bytes":44253},"client/src/pages/auth.tsx":{"content":"import { useState } from 'react'\nimport { Link } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { supabase } from '@/lib/supabase'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { useEffect } from 'react'\nimport { useLocation } from 'wouter'\n\nconst Auth = () => {\n  const [isLogin, setIsLogin] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n  const { user } = useAuth()\n  const [, navigate] = useLocation()\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      navigate('/')\n    }\n  }, [user, navigate])\n\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    fullName: '',\n    organization: '',\n    role: '',\n  })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(null)\n    setSuccess(null)\n\n    try {\n      const hasValidConfig = import.meta.env.VITE_SUPABASE_URL && \n                            import.meta.env.VITE_SUPABASE_ANON_KEY &&\n                            import.meta.env.VITE_SUPABASE_URL !== 'https://placeholder.supabase.co'\n\n      if (hasValidConfig) {\n        if (isLogin) {\n          // Login with Supabase\n          const { error } = await supabase.auth.signInWithPassword({\n            email: formData.email,\n            password: formData.password,\n          })\n          \n          if (error) throw error\n          \n          setSuccess('Successfully logged in!')\n        } else {\n          // Sign up with Supabase\n          const { error } = await supabase.auth.signUp({\n            email: formData.email,\n            password: formData.password,\n            options: {\n              data: {\n                full_name: formData.fullName,\n                organization: formData.organization,\n                role: formData.role,\n              }\n            }\n          })\n          \n          if (error) throw error\n          \n          setSuccess('Check your email for the confirmation link!')\n        }\n      } else {\n        // Demo mode - save to localStorage and create user\n        if (isLogin) {\n          const savedUser = localStorage.getItem('oceanai_user')\n          if (!savedUser) {\n            throw new Error('No account found. Please sign up first.')\n          }\n          setSuccess('Successfully logged in!')\n        } else {\n          // Create new user in demo mode\n          const newUser = {\n            id: `demo-${Date.now()}`,\n            email: formData.email,\n            user_metadata: {\n              full_name: formData.fullName || 'User',\n              organization: formData.organization,\n              role: formData.role\n            },\n            created_at: new Date().toISOString()\n          }\n          localStorage.setItem('oceanai_user', JSON.stringify(newUser))\n          setSuccess('Account created successfully!')\n        }\n        \n        // Auto redirect after success in demo mode\n        setTimeout(() => {\n          window.location.href = '/'\n        }, 1500)\n      }\n    } catch (error: any) {\n      setError(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (user) {\n    return null // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden bg-black\">\n      {/* Animated background */}\n      <div className=\"absolute inset-0\">\n        {/* Neural network pattern */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-cyan-400 rounded-full animate-pulse\"></div>\n          <div className=\"absolute top-1/3 right-1/3 w-1 h-1 bg-blue-400 rounded-full animate-ping\"></div>\n          <div className=\"absolute bottom-1/4 left-1/3 w-1.5 h-1.5 bg-purple-400 rounded-full animate-pulse\"></div>\n          <div className=\"absolute top-1/2 right-1/4 w-1 h-1 bg-emerald-400 rounded-full animate-ping\"></div>\n          <div className=\"absolute bottom-1/3 right-1/2 w-2 h-2 bg-violet-400 rounded-full animate-pulse\"></div>\n        </div>\n        \n        {/* Grid pattern */}\n        <div \n          className=\"absolute inset-0 opacity-5\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(56, 189, 248, 0.1) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(56, 189, 248, 0.1) 1px, transparent 1px)\n            `,\n            backgroundSize: '50px 50px'\n          }}\n        ></div>\n        \n        {/* Gradient overlays */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-900/20 via-purple-900/10 to-black\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-tr from-cyan-900/10 via-transparent to-violet-900/20\"></div>\n      </div>\n\n      {/* Floating particles effect */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-1 h-1 bg-cyan-400/30 rounded-full animate-bounce\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 3}s`,\n              animationDuration: `${3 + Math.random() * 2}s`\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative z-10\">\n        <Card className=\"w-full max-w-md bg-black/80 backdrop-blur-xl border border-cyan-500/30 shadow-2xl shadow-cyan-500/10 relative overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-blue-500/5 to-purple-500/10 opacity-50\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-cyan-500/5\"></div>\n          \n          {/* Top accent line */}\n          <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent\"></div>\n          \n          <CardHeader className=\"space-y-6 relative z-10 text-center\">\n            {/* AI Icon with glow */}\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-400 to-blue-600 rounded-xl flex items-center justify-center shadow-lg shadow-cyan-500/25 border border-cyan-400/30\">\n                  {/* AI Brain Icon */}\n                  <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v-.07zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z\"/>\n                  </svg>\n                </div>\n                {/* Glow rings */}\n                <div className=\"absolute inset-0 rounded-xl border border-cyan-400/50 animate-ping\"></div>\n                <div className=\"absolute -inset-2 rounded-xl border border-cyan-400/20 animate-pulse\"></div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                OceanAI\n              </CardTitle>\n              <div className=\"text-xs font-mono text-cyan-400/80 tracking-widest\">\n                NEURAL PLATFORM\n              </div>\n              <CardDescription className=\"text-gray-300/80 text-sm\">\n                {isLogin ? 'Initialize neural connection' : 'Register neural interface'}\n              </CardDescription>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"relative z-10\">\n            {error && (\n              <Alert className=\"mb-6 bg-red-900/20 border border-red-500/50 backdrop-blur-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-red-400 rounded-full animate-pulse\"></div>\n                  <AlertDescription className=\"text-red-300 text-sm\">{error}</AlertDescription>\n                </div>\n              </Alert>\n            )}\n            \n            {success && (\n              <Alert className=\"mb-6 bg-green-900/20 border border-green-500/50 backdrop-blur-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <AlertDescription className=\"text-green-300 text-sm\">{success}</AlertDescription>\n                </div>\n              </Alert>\n            )}\n            \n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {!isLogin && (\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fullName\" className=\"text-xs font-mono text-cyan-400 uppercase tracking-wider\">\n                      Neural ID\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"fullName\"\n                        name=\"fullName\"\n                        type=\"text\"\n                        value={formData.fullName}\n                        onChange={handleInputChange}\n                        placeholder=\"Arnab Das\"\n                        data-testid=\"input-fullname\"\n                        className=\"bg-black/50 border border-cyan-500/30 focus:border-cyan-400 text-white placeholder:text-gray-500 h-12 px-4 font-mono backdrop-blur-sm\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-transparent opacity-0 hover:opacity-100 transition-opacity pointer-events-none rounded-md\"></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"organization\" className=\"text-xs font-mono text-cyan-400 uppercase tracking-wider\">\n                      Research Node\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"organization\"\n                        name=\"organization\"\n                        type=\"text\"\n                        value={formData.organization}\n                        onChange={handleInputChange}\n                        placeholder=\"Marine Research Institute\"\n                        data-testid=\"input-organization\"\n                        className=\"bg-black/50 border border-cyan-500/30 focus:border-cyan-400 text-white placeholder:text-gray-500 h-12 px-4 font-mono backdrop-blur-sm\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-transparent opacity-0 hover:opacity-100 transition-opacity pointer-events-none rounded-md\"></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"role\" className=\"text-xs font-mono text-cyan-400 uppercase tracking-wider\">\n                      Access Level\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"role\"\n                        name=\"role\"\n                        type=\"text\"\n                        value={formData.role}\n                        onChange={handleInputChange}\n                        placeholder=\"Marine Biologist\"\n                        data-testid=\"input-role\"\n                        className=\"bg-black/50 border border-cyan-500/30 focus:border-cyan-400 text-white placeholder:text-gray-500 h-12 px-4 font-mono backdrop-blur-sm\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-transparent opacity-0 hover:opacity-100 transition-opacity pointer-events-none rounded-md\"></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-xs font-mono text-cyan-400 uppercase tracking-wider\">\n                  Network Address\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                    placeholder=\"your@email.com\"\n                    required\n                    data-testid=\"input-email\"\n                    className=\"bg-black/50 border border-cyan-500/30 focus:border-cyan-400 text-white placeholder:text-gray-500 h-12 px-4 font-mono backdrop-blur-sm\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-transparent opacity-0 hover:opacity-100 transition-opacity pointer-events-none rounded-md\"></div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-xs font-mono text-cyan-400 uppercase tracking-wider\">\n                  Security Key\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    placeholder=\"••••••••\"\n                    required\n                    minLength={6}\n                    data-testid=\"input-password\"\n                    className=\"bg-black/50 border border-cyan-500/30 focus:border-cyan-400 text-white placeholder:text-gray-500 h-12 px-4 font-mono backdrop-blur-sm\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-transparent opacity-0 hover:opacity-100 transition-opacity pointer-events-none rounded-md\"></div>\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white font-mono uppercase tracking-wider text-sm shadow-lg shadow-cyan-500/25 border border-cyan-400/50 transition-all duration-300 hover:shadow-cyan-500/40 hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden\"\n                disabled={loading}\n                data-testid=\"button-submit\"\n              >\n                {/* Button glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-blue-400/20 opacity-0 hover:opacity-100 transition-opacity\"></div>\n                <span className=\"relative z-10\">\n                  {loading ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                      <span>Processing...</span>\n                    </div>\n                  ) : (\n                    isLogin ? 'Initialize Connection' : 'Register Interface'\n                  )}\n                </span>\n              </Button>\n            </form>\n            \n            <div className=\"mt-8 text-center space-y-4\">\n              <button\n                type=\"button\"\n                onClick={() => setIsLogin(!isLogin)}\n                className=\"text-sm text-gray-400 hover:text-cyan-400 transition-colors font-mono\"\n                data-testid=\"toggle-auth-mode\"\n              >\n                {isLogin ? \n                  '> Need neural interface registration?' : \n                  '> Already have neural connection?'\n                }\n              </button>\n              \n              <div className=\"pt-4 border-t border-gray-800\">\n                <Link href=\"/\">\n                  <button className=\"text-xs text-gray-500 hover:text-cyan-400 transition-colors font-mono flex items-center justify-center space-x-2\" data-testid=\"back-to-home\">\n                    <span>←</span>\n                    <span>Return to mainframe</span>\n                  </button>\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default Auth","size_bytes":17145},"client/src/pages/fisheries-data.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useRef } from \"react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport FishStocksChart from \"@/components/charts/fish-stocks-chart\";\nimport SpeciesDiversityChart from \"@/components/charts/species-diversity-chart\";\n\nconst FisheriesData = () => {\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\n  const [uploadMessage, setUploadMessage] = useState<string>('');\n  const [fisheriesData, setFisheriesData] = useState<any>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [dataSource, setDataSource] = useState<'default' | 'uploaded'>('default');\n\n  // Default static data, will be replaced when .pkl file is uploaded\n  const [fishStocksData, setFishStocksData] = useState([\n    { region: 'Atlantic', stocks: 0 },\n    { region: 'Pacific', stocks: 0 },\n    { region: 'Indian', stocks: 0 },\n    { region: 'Arctic', stocks: 0 },\n  ]);\n\n  const [speciesDiversityData, setSpeciesDiversityData] = useState<Array<{name: string, value: number, color: string, count: string}>>([]);\n\n  const [catchData, setCatchData] = useState<Array<{\n    species: string;\n    region: string;\n    catch: string;\n    trend: string;\n    trendType: 'up' | 'down';\n    sustainability: string;\n    sustainabilityColor: string;\n  }>>([]);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.endsWith('.pkl')) {\n      setUploadStatus('error');\n      setUploadMessage('Please select a .pkl file');\n      return;\n    }\n\n    setUploadStatus('uploading');\n    setUploadMessage('Processing fisheries data...');\n\n    const formData = new FormData();\n    formData.append('pklFile', file);\n\n    try {\n      const response = await fetch('/api/fisheries-data', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      // Update charts with data from .pkl file\n      if (result.fishStocks) {\n        setFishStocksData(result.fishStocks);\n      }\n      if (result.speciesDiversity) {\n        setSpeciesDiversityData(result.speciesDiversity);\n      }\n      if (result.catchStatistics) {\n        setCatchData(result.catchStatistics);\n      }\n      setDataSource('uploaded');\n      \n      setUploadStatus('success');\n      setUploadMessage(`Successfully processed ${result.fileName}! Charts updated with new fisheries data.`);\n    } catch (error) {\n      setUploadStatus('error');\n      setUploadMessage(error instanceof Error ? error.message : 'Upload failed');\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"container mx-auto\">\n        <div className=\"mb-12\">\n          <div className=\"flex justify-between items-start mb-6\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-foreground mb-4\">Fisheries Data</h1>\n              <p className=\"text-lg text-muted-foreground\">Fish stock monitoring and sustainability analysis</p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\".pkl\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n              />\n              <Button\n                onClick={triggerFileUpload}\n                disabled={uploadStatus === 'uploading'}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                {uploadStatus === 'uploading' ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Upload .pkl File\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n          \n          {/* Upload Status */}\n          {uploadMessage && (\n            <Alert className={`mb-6 ${\n              uploadStatus === 'success' ? 'border-green-500 bg-green-500/10' :\n              uploadStatus === 'error' ? 'border-red-500 bg-red-500/10' :\n              'border-blue-500 bg-blue-500/10'\n            }`}>\n              {uploadStatus === 'success' && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n              {uploadStatus === 'error' && <AlertCircle className=\"h-4 w-4 text-red-500\" />}\n              {uploadStatus === 'uploading' && <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />}\n              <AlertDescription className={\n                uploadStatus === 'success' ? 'text-green-300' :\n                uploadStatus === 'error' ? 'text-red-300' :\n                'text-blue-300'\n              }>\n                {uploadMessage}\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Fish Stocks Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Fish Stocks by Region\n                <span className={`text-xs px-2 py-1 rounded ${\n                  dataSource === 'uploaded' \n                    ? 'text-green-400 bg-green-500/10' \n                    : 'text-gray-400 bg-gray-500/10'\n                }`}>\n                  {dataSource === 'uploaded' ? 'From .pkl file' : 'Default data'}\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <FishStocksChart data={fishStocksData} />\n            </CardContent>\n          </Card>\n          \n          {/* Species Diversity */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Species Diversity\n                <span className={`text-xs px-2 py-1 rounded ${\n                  dataSource === 'uploaded' \n                    ? 'text-green-400 bg-green-500/10' \n                    : 'text-gray-400 bg-gray-500/10'\n                }`}>\n                  {dataSource === 'uploaded' ? 'From .pkl file' : 'Default data'}\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <SpeciesDiversityChart data={speciesDiversityData} />\n            </CardContent>\n          </Card>\n          \n          {/* Catch Statistics */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Recent Catch Statistics\n                  <span className={`text-xs px-2 py-1 rounded ${\n                    dataSource === 'uploaded' \n                      ? 'text-green-400 bg-green-500/10' \n                      : 'text-gray-400 bg-gray-500/10'\n                  }`}>\n                    {dataSource === 'uploaded' ? 'From .pkl file' : 'Default data'}\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"border-b border-border\">\n                      <tr>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Species</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Region</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Catch (MT)</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Trend</th>\n                        <th className=\"text-left py-3 px-2 font-semibold text-foreground\">Sustainability</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"text-muted-foreground\">\n                      {catchData.map((row, index) => (\n                        <tr key={index} className=\"border-b border-border/50\">\n                          <td className=\"py-3 px-2\" data-testid={`species-${index}`}>{row.species}</td>\n                          <td className=\"py-3 px-2\" data-testid={`region-${index}`}>{row.region}</td>\n                          <td className=\"py-3 px-2\" data-testid={`catch-${index}`}>{row.catch}</td>\n                          <td className=\"py-3 px-2\">\n                            <span className={`inline-flex items-center ${row.trendType === \"up\" ? \"text-green-400\" : \"text-red-400\"}`}>\n                              <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                {row.trendType === \"up\" ? (\n                                  <path fillRule=\"evenodd\" d=\"M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path>\n                                ) : (\n                                  <path fillRule=\"evenodd\" d=\"M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z\" clipRule=\"evenodd\"></path>\n                                )}\n                              </svg>\n                              <span data-testid={`trend-${index}`}>{row.trend}</span>\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-2\">\n                            <Badge variant=\"secondary\" className={row.sustainabilityColor} data-testid={`sustainability-${index}`}>\n                              {row.sustainability}\n                            </Badge>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FisheriesData;\n","size_bytes":10540},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Waves, Fish, Dna, Globe, Zap, ChevronRight, Sparkles, Brain } from \"lucide-react\";\n\ninterface SearchResult {\n  answer: string;\n  source: string;\n  confidence: number;\n  related_topics: string[];\n}\n\nconst Home = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearchFocused, setIsSearchFocused] = useState(false);\n  const [currentMetric, setCurrentMetric] = useState(0);\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const metrics = [\n    { label: \"Ocean Data Points\", value: \"2.4B+\", color: \"from-cyan-400 to-blue-600\" },\n    { label: \"AI Models Active\", value: \"847\", color: \"from-purple-400 to-pink-600\" },\n    { label: \"Species Analyzed\", value: \"125K+\", color: \"from-green-400 to-teal-600\" },\n    { label: \"Real-time Sensors\", value: \"18.7K\", color: \"from-orange-400 to-red-600\" }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentMetric((prev) => (prev + 1) % metrics.length);\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) return;\n    \n    setIsSearching(true);\n    try {\n      const response = await fetch(\"/api/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ query: searchQuery }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setSearchResults(data);\n      } else {\n        console.error(\"Search failed:\", response.statusText);\n        setSearchResults({\n          answer: \"Sorry, I couldn't process your search at the moment. Please try again.\",\n          source: \"Error\",\n          confidence: 0,\n          related_topics: []\n        });\n      }\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      setSearchResults({\n        answer: \"Sorry, I couldn't connect to the search service. Please try again.\",\n        source: \"Error\",\n        confidence: 0,\n        related_topics: []\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleQuickAction = (label: string) => {\n    console.log(\"Quick action triggered:\", label);\n    // Implement quick action logic here\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 via-blue-900 to-slate-900 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0\">\n        {/* Floating Particles */}\n        <div className=\"absolute inset-0\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className={`absolute w-2 h-2 bg-blue-400 rounded-full opacity-30 animate-pulse`}\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 4}s`,\n                animationDuration: `${2 + Math.random() * 3}s`\n              }}\n            />\n          ))}\n        </div>\n        \n        {/* Grid Pattern */}\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-10\" />\n        \n        {/* Gradient Orbs */}\n        <div\n          className=\"absolute top-20 left-20 w-96 h-96 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 rounded-full blur-3xl animate-pulse\"\n          style={{ animationDelay: \"0s\" }}\n        />\n        <div\n          className=\"absolute bottom-20 right-20 w-80 h-80 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full blur-3xl animate-pulse\"\n          style={{ animationDelay: \"1s\" }}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10\">\n        {/* Hero Section */}\n        <section className=\"min-h-screen flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center max-w-6xl mx-auto\">\n            {/* Logo/Brand */}\n            <div className=\"mb-8 flex items-center justify-center space-x-3\">\n              <div className=\"relative\">\n                <Waves className=\"w-12 h-12 text-cyan-400 animate-bounce\" />\n                <div className=\"absolute inset-0 w-12 h-12 bg-cyan-400 rounded-full blur-xl opacity-30 animate-ping\" />\n              </div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                OCEANIA.AI\n              </h1>\n            </div>\n\n            {/* Main Title */}\n            <h2 className=\"text-5xl md:text-7xl lg:text-8xl font-black mb-8 leading-tight\">\n              <span className=\"bg-gradient-to-r from-white via-cyan-200 to-blue-200 bg-clip-text text-transparent\">\n                SEARCH THE\n              </span>\n              <br />\n              <span className=\"bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent animate-pulse\">\n                DIGITAL OCEAN\n              </span>\n            </h2>\n\n            <p className=\"text-xl md:text-2xl text-slate-300 mb-12 max-w-4xl mx-auto leading-relaxed\">\n              Dive into the world's most advanced AI-powered ocean intelligence platform. \n              Discover patterns, predict changes, and explore the depths of marine data like never before.\n            </p>\n\n            {/* Search Interface */}\n            <div className=\"mb-16 max-w-4xl mx-auto\">\n              <div className={`relative group transition-all duration-500 ${isSearchFocused ? 'scale-105' : ''}`}>\n                <div className=\"absolute -inset-1 bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 rounded-2xl blur opacity-30 group-hover:opacity-50 transition duration-300\" />\n                <div className=\"relative flex items-center bg-slate-800/90 backdrop-blur-xl rounded-2xl border border-slate-700/50 p-2\">\n                  <Search className=\"w-6 h-6 text-slate-400 ml-4\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ask about ocean temperatures, marine species, climate patterns...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onFocus={() => setIsSearchFocused(true)}\n                    onBlur={() => setIsSearchFocused(false)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                    className=\"flex-1 bg-transparent text-white placeholder-slate-400 px-4 py-4 text-lg focus:outline-none\"\n                  />\n                  <Button\n                    onClick={handleSearch}\n                    disabled={isSearching || !searchQuery.trim()}\n                    className=\"mr-2 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white px-8 py-4 rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isSearching ? (\n                      <>\n                        <Brain className=\"w-5 h-5 mr-2 animate-pulse\" />\n                        Searching...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"w-5 h-5 mr-2\" />\n                        Search\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Quick Actions */}\n              <div className=\"mt-8 flex flex-wrap justify-center gap-4\">\n                {[\n                  { icon: Globe, label: \"Climate Analysis\", color: \"from-green-400 to-teal-500\" },\n                  { icon: Fish, label: \"Marine Biology\", color: \"from-blue-400 to-cyan-500\" },\n                  { icon: Dna, label: \"Genomics Data\", color: \"from-purple-400 to-pink-500\" },\n                  { icon: Waves, label: \"Ocean Currents\", color: \"from-cyan-400 to-blue-500\" }\n                ].map(({ icon: Icon, label, color }, index) => (\n                  <button\n                    key={index}\n                    onClick={() => handleQuickAction(label)}\n                    className=\"group flex items-center space-x-2 px-4 py-2 bg-slate-800/50 backdrop-blur-sm border border-slate-700/30 rounded-xl hover:border-slate-600/50 transition-all duration-300 hover:scale-105\"\n                  >\n                    <div className={`p-1 rounded-lg bg-gradient-to-r ${color} opacity-80 group-hover:opacity-100`}>\n                      <Icon className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <span className=\"text-slate-300 text-sm\">{label}</span>\n                    <ChevronRight className=\"w-3 h-3 text-slate-500 group-hover:text-slate-300 transition-colors\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Search Results */}\n            {searchResults && (\n              <div className=\"mb-16 max-w-4xl mx-auto\">\n                <Card className=\"bg-slate-800/90 backdrop-blur-xl border-slate-700/50 shadow-2xl\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-cyan-400 flex items-center gap-2\">\n                        <Sparkles className=\"w-5 h-5\" />\n                        Ocean Intelligence Response\n                      </CardTitle>\n                      <Badge variant=\"secondary\" className=\"bg-cyan-500/20 text-cyan-300 border-cyan-500/30\">\n                        Confidence: {Math.round(searchResults.confidence * 100)}%\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-slate-200 leading-relaxed text-lg\">\n                      {searchResults.answer}\n                    </div>\n                    \n                    {searchResults.related_topics && searchResults.related_topics.length > 0 && (\n                      <div className=\"pt-4 border-t border-slate-700/50\">\n                        <h4 className=\"text-sm text-slate-400 mb-3\">Related Topics:</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {searchResults.related_topics.map((topic, index) => (\n                            <Badge \n                              key={index}\n                              variant=\"outline\" \n                              className=\"bg-slate-700/30 text-slate-300 border-slate-600/50 hover:bg-slate-600/50 transition-colors cursor-pointer\"\n                              onClick={() => setSearchQuery(topic)}\n                            >\n                              {topic}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"text-xs text-slate-500 pt-2\">\n                      Source: {searchResults.source} | Powered by OceanAI\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Floating Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-8 max-w-5xl mx-auto\">\n              {metrics.map((metric, index) => (\n                <div\n                  key={index}\n                  className={`relative group transition-all duration-700 ${\n                    currentMetric === index ? 'scale-110' : 'scale-100'\n                  }`}\n                >\n                  <div className=\"absolute -inset-1 bg-gradient-to-r from-slate-600/20 to-slate-400/20 rounded-xl blur opacity-0 group-hover:opacity-100 transition duration-300\" />\n                  <div className=\"relative bg-slate-800/30 backdrop-blur-sm border border-slate-700/30 rounded-xl p-4 md:p-6 hover:border-slate-600/50 transition-all duration-300\">\n                    <div className={`text-2xl md:text-3xl font-bold bg-gradient-to-r ${metric.color} bg-clip-text text-transparent mb-1`}>\n                      {metric.value}\n                    </div>\n                    <div className=\"text-slate-400 text-xs md:text-sm font-medium\">\n                      {metric.label}\n                    </div>\n                    <div className={`mt-2 h-1 bg-gradient-to-r ${metric.color} rounded-full transition-all duration-500 ${\n                      currentMetric === index ? 'opacity-100' : 'opacity-30'\n                    }`} />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* AI Features Section */}\n        <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h3 className=\"text-4xl font-bold bg-gradient-to-r from-white to-slate-300 bg-clip-text text-transparent mb-4\">\n                Powered by Advanced AI\n              </h3>\n              <p className=\"text-slate-400 text-lg max-w-2xl mx-auto\">\n                Our neural networks process petabytes of ocean data in real-time, \n                delivering insights that were previously impossible to obtain.\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              {[\n                {\n                  title: \"Predictive Analytics\",\n                  description: \"Forecast ocean conditions up to 30 days in advance using deep learning models\",\n                  icon: \"🔮\"\n                },\n                {\n                  title: \"Species Recognition\",\n                  description: \"Identify and track marine life with 99.7% accuracy using computer vision\",\n                  icon: \"🐠\"\n                },\n                {\n                  title: \"Climate Modeling\",\n                  description: \"Simulate complex ocean-atmosphere interactions with quantum-enhanced algorithms\",\n                  icon: \"🌊\"\n                }\n              ].map((feature, index) => (\n                <div\n                  key={index}\n                  className=\"group relative\"\n                  style={{ animationDelay: `${index * 200}ms` }}\n                >\n                  <div className=\"absolute -inset-1 bg-gradient-to-r from-cyan-400/20 via-blue-500/20 to-purple-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition duration-500\" />\n                  <div className=\"relative bg-slate-800/40 backdrop-blur-sm border border-slate-700/30 rounded-2xl p-8 hover:border-slate-600/50 transition-all duration-300 h-full\">\n                    <div className=\"text-4xl mb-4\">{feature.icon}</div>\n                    <h4 className=\"text-xl font-semibold text-white mb-3\">{feature.title}</h4>\n                    <p className=\"text-slate-400 leading-relaxed\">{feature.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </div>\n\n      {/* Styled-JSX for Grid Pattern */}\n      <style>{`\n        .bg-grid-pattern {\n          background-image: \n            linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px);\n          background-size: 50px 50px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Home;","size_bytes":15665},"client/src/pages/molecular-data.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useRef } from \"react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport PhylogeneticTree from \"@/components/PhylogeneticTree\";\n\nconst MolecularData = () => {\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\n  const [uploadMessage, setUploadMessage] = useState<string>('');\n  const [phylogeneticData, setPhylogeneticData] = useState<any>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Default static data, will be replaced when .pkl file is uploaded\n  const [geneticMetrics, setGeneticMetrics] = useState([\n    { name: \"Heterozygosity\", value: \"0.74\", percentage: 74 },\n    { name: \"Allelic Richness\", value: \"5.2\", percentage: 87 },\n    { name: \"FST Index\", value: \"0.12\", percentage: 12 },\n  ]);\n\n  const [sampleStatus, setSampleStatus] = useState([\n    { status: \"Processed\", count: \"1,247\", color: \"text-green-400\" },\n    { status: \"In Queue\", count: \"89\", color: \"text-yellow-400\" },\n    { status: \"Failed\", count: \"12\", color: \"text-red-400\" },\n  ]);\n\n  const [dataSource, setDataSource] = useState<'default' | 'uploaded'>('default');\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.endsWith('.pkl')) {\n      setUploadStatus('error');\n      setUploadMessage('Please select a .pkl file');\n      return;\n    }\n\n    setUploadStatus('uploading');\n    setUploadMessage('Processing phylogenetic data...');\n\n    const formData = new FormData();\n    formData.append('pklFile', file);\n\n    try {\n      const response = await fetch('/api/phylogenetic-tree', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      setPhylogeneticData(result);\n      \n      // Update genetic metrics and sample status with data from .pkl file\n      if (result.geneticMetrics) {\n        setGeneticMetrics(result.geneticMetrics);\n      }\n      if (result.sampleStatus) {\n        setSampleStatus(result.sampleStatus);\n      }\n      setDataSource('uploaded');\n      \n      setUploadStatus('success');\n      setUploadMessage(`Successfully processed ${result.fileName}! Tree updated with ${result.species.length} species.`);\n    } catch (error) {\n      setUploadStatus('error');\n      setUploadMessage(error instanceof Error ? error.message : 'Upload failed');\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 min-h-screen\">\n      <div className=\"container mx-auto\">\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">Molecular Data</h1>\n          <p className=\"text-lg text-gray-300\">Genetic diversity and molecular analysis</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Genetic Diversity Metrics */}\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center justify-between\">\n                  Genetic Diversity\n                  <span className={`text-xs px-2 py-1 rounded ${\n                    dataSource === 'uploaded' \n                      ? 'text-green-400 bg-green-500/10' \n                      : 'text-gray-400 bg-gray-500/10'\n                  }`} data-testid=\"genetic-data-source\">\n                    {dataSource === 'uploaded' ? 'From .pkl file' : 'Default data'}\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {geneticMetrics.map((metric, index) => (\n                    <div key={index}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-300\">{metric.name}</span>\n                        <span className=\"font-medium text-white\" data-testid={`metric-value-${index}`}>{metric.value}</span>\n                      </div>\n                      <div className=\"w-full h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-gradient-to-r from-blue-500 to-teal-400 rounded-full transition-all duration-500\"\n                          style={{ width: `${metric.percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center justify-between\">\n                  Sample Status\n                  <span className={`text-xs px-2 py-1 rounded ${\n                    dataSource === 'uploaded' \n                      ? 'text-green-400 bg-green-500/10' \n                      : 'text-gray-400 bg-gray-500/10'\n                  }`} data-testid=\"sample-data-source\">\n                    {dataSource === 'uploaded' ? 'From .pkl file' : 'Default data'}\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {sampleStatus.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-300\">{item.status}</span>\n                      <span className={`${item.color} font-medium transition-all duration-500`} data-testid={`sample-${item.status.toLowerCase().replace(' ', '-')}`}>\n                        {item.count}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Phylogenetic Tree */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gray-800/70 border-gray-600\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-white\">Phylogenetic Relationships</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".pkl\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                  />\n                  <Button\n                    onClick={triggerFileUpload}\n                    disabled={uploadStatus === 'uploading'}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    size=\"sm\"\n                  >\n                    {uploadStatus === 'uploading' ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload .pkl File\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* Upload Status */}\n                {uploadMessage && (\n                  <Alert className={`mb-4 ${\n                    uploadStatus === 'success' ? 'border-green-500 bg-green-500/10' :\n                    uploadStatus === 'error' ? 'border-red-500 bg-red-500/10' :\n                    'border-blue-500 bg-blue-500/10'\n                  }`}>\n                    {uploadStatus === 'success' && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n                    {uploadStatus === 'error' && <AlertCircle className=\"h-4 w-4 text-red-500\" />}\n                    {uploadStatus === 'uploading' && <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />}\n                    <AlertDescription className={\n                      uploadStatus === 'success' ? 'text-green-300' :\n                      uploadStatus === 'error' ? 'text-red-300' :\n                      'text-blue-300'\n                    }>\n                      {uploadMessage}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                {/* Phylogenetic Tree Visualization Area */}\n                <div className=\"aspect-[2/1] bg-gradient-to-b from-gray-700/20 to-gray-800 rounded-lg border border-gray-600 overflow-hidden\">\n                  {phylogeneticData ? (\n                    <PhylogeneticTree\n                      newick={phylogeneticData.treeData}\n                      species={phylogeneticData.species}\n                      metadata={phylogeneticData.metadata}\n                    />\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-center\">\n                        <Upload className=\"w-16 h-16 text-blue-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-300\">Upload a .pkl file to generate</p>\n                        <p className=\"text-gray-300\">an interactive phylogenetic tree</p>\n                        <p className=\"text-sm text-gray-400 mt-2\">AI-powered phylogenetic analysis</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-sm text-gray-400\">\n                    {phylogeneticData \n                      ? `Interactive phylogenetic tree generated from ${phylogeneticData.fileName} using AI analysis`\n                      : \"Upload a .pkl file to generate an AI-powered phylogenetic tree showing evolutionary relationships\"\n                    }\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default MolecularData;","size_bytes":10551},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/ocean-data.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\n\n// Mock Card components since we don't have access to shadcn/ui\nconst Card = ({ children, className = \"\" }) => (\n  <div className={`bg-white rounded-lg border border-gray-200 shadow-sm ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ children }) => (\n  <div className=\"p-6 pb-0\">\n    {children}\n  </div>\n);\n\nconst CardTitle = ({ children }) => (\n  <h3 className=\"text-lg font-semibold text-gray-900\">{children}</h3>\n);\n\nconst CardContent = ({ children }) => (\n  <div className=\"p-6 pt-0\">\n    {children}\n  </div>\n);\n\n// Simple Ocean Temperature Chart Component\nconst OceanTempChart = () => {\n  const data = [\n    { month: 'Jan', temp: 15.2 },\n    { month: 'Feb', temp: 15.8 },\n    { month: 'Mar', temp: 16.1 },\n    { month: 'Apr', temp: 16.7 },\n    { month: 'May', temp: 17.3 },\n    { month: 'Jun', temp: 18.1 }\n  ];\n\n  return (\n    <div className=\"space-y-3 text-gray-500\">\n      {data.map((item, index) => (\n        <div key={item.month} className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-gray-600\">{item.month}</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-20 h-2 bg-gray-200 rounded-full  overflow-hidden\">\n              <div \n                className=\"h-full bg-blue-500 rounded-full  transition-all duration-1000\" \n                style={{ width: `${(item.temp / 20) * 100}%` }}\n              ></div>\n            </div>\n            <span className=\"text-sm font-medium\">{item.temp}°C</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Leaflet Map Component\nconst LeafletMap = ({ fishData = null }) => {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n\n  useEffect(() => {\n    // Load Leaflet CSS and JS\n    const loadLeaflet = async () => {\n      // Load CSS\n      if (!document.querySelector('link[href*=\"leaflet\"]')) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css';\n        document.head.appendChild(link);\n      }\n\n      // Load JS\n      if (!window.L) {\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js';\n        script.onload = initMap;\n        document.head.appendChild(script);\n      } else {\n        initMap();\n      }\n    };\n\n    const initMap = () => {\n      if (mapRef.current && !mapInstanceRef.current) {\n        // Initialize the map\n        const map = window.L.map(mapRef.current, {\n          center: [20, 0], // Center on equator\n          zoom: 2,\n          zoomControl: true\n        });\n\n        // Add tile layer (OpenStreetMap)\n        window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '© OpenStreetMap contributors'\n        }).addTo(map);\n\n        // Use fish species data if available, otherwise default ocean stations\n        const mapData = fishData ? fishData.fishLocations : [\n          {\n            lat: 35.6762,\n            lng: 139.6503,\n            name: \"Tokyo Bay Station\",\n            temp: \"18.5°C\",\n            ph: \"8.1\",\n            depth: \"50m\"\n          },\n          {\n            lat: 40.7128,\n            lng: -74.0060,\n            name: \"New York Harbor\",\n            temp: \"16.2°C\",\n            ph: \"7.9\",\n            depth: \"30m\"\n          },\n          {\n            lat: -33.8688,\n            lng: 151.2093,\n            name: \"Sydney Harbor\",\n            temp: \"22.1°C\",\n            ph: \"8.2\",\n            depth: \"40m\"\n          },\n          {\n            lat: 51.5074,\n            lng: -0.1278,\n            name: \"Thames Estuary\",\n            temp: \"14.8°C\",\n            ph: \"7.8\",\n            depth: \"25m\"\n          },\n          {\n            lat: 25.7617,\n            lng: -80.1918,\n            name: \"Miami Coast\",\n            temp: \"26.3°C\",\n            ph: \"8.0\",\n            depth: \"60m\"\n          },\n          {\n            lat: -23.5505,\n            lng: -46.6333,\n            name: \"Santos Port\",\n            temp: \"23.7°C\",\n            ph: \"7.9\",\n            depth: \"35m\"\n          }\n        ];\n\n        // Add markers for map data (either fish species or ocean stations)\n        mapData.forEach(location => {\n          let markerColor, popupContent;\n          \n          if (fishData) {\n            // Fish species data\n            markerColor = location.markerColor || '#FF6B6B';\n            popupContent = `\n              <div class=\"p-2\">\n                <h3 class=\"font-semibold text-sm mb-2\">${location.name}</h3>\n                <div class=\"space-y-1 text-xs\">\n                  <div><strong>Species Count:</strong> ${location.speciesCount}</div>\n                  <div><strong>Abundance:</strong> ${location.abundance}</div>\n                  <div><strong>Temperature:</strong> ${location.temperature}</div>\n                  <div><strong>Depth:</strong> ${location.depth}</div>\n                  <div><strong>Salinity:</strong> ${location.salinity}</div>\n                  <div class=\"mt-2\">\n                    <strong>Species Found:</strong>\n                    <div class=\"mt-1\">\n                      ${location.species.map(species => `<span class=\"inline-block bg-blue-100 text-blue-800 text-xs px-1 py-0.5 rounded mr-1 mb-1\">${species.replace('_', ' ')}</span>`).join('')}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            `;\n          } else {\n            // Ocean station data\n            markerColor = getColorByTemp(parseFloat(location.temp));\n            popupContent = `\n              <div class=\"p-2\">\n                <h3 class=\"font-semibold text-sm mb-2\">${location.name}</h3>\n                <div class=\"space-y-1 text-xs\">\n                  <div><strong>Temperature:</strong> ${location.temp}</div>\n                  <div><strong>pH Level:</strong> ${location.ph}</div>\n                  <div><strong>Depth:</strong> ${location.depth}</div>\n                </div>\n              </div>\n            `;\n          }\n\n          const marker = window.L.circleMarker([location.lat, location.lng], {\n            radius: 8,\n            fillColor: markerColor,\n            color: '#ffffff',\n            weight: 2,\n            opacity: 1,\n            fillOpacity: 0.8\n          }).addTo(map);\n\n          // Add popup with location data\n          marker.bindPopup(popupContent);\n\n          // Add hover effect\n          marker.on('mouseover', function() {\n            this.setStyle({\n              radius: 12,\n              weight: 3\n            });\n          });\n\n          marker.on('mouseout', function() {\n            this.setStyle({\n              radius: 8,\n              weight: 2\n            });\n          });\n        });\n\n        // Add a legend\n        const legend = window.L.control({ position: 'bottomright' });\n        legend.onAdd = function(map) {\n          const div = window.L.DomUtil.create('div', 'legend');\n          \n          if (fishData) {\n            div.innerHTML = `\n              <div style=\"background: white; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n                <h4 style=\"margin: 0 0 8px 0; color: black; font-size: 12px; font-weight: bold;\">Fish Species Distribution</h4>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #96CEB4; border-radius: 50%; margin-right: 6px;\"></div>\n                  Low Abundance\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #4ECDC4; border-radius: 50%; margin-right: 6px;\"></div>\n                  Medium Abundance\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #FF6B6B; border-radius: 50%; margin-right: 6px;\"></div>\n                  High Abundance\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #45B7D1; border-radius: 50%; margin-right: 6px;\"></div>\n                  Very High Abundance\n                </div>\n              </div>\n            `;\n          } else {\n            div.innerHTML = `\n              <div style=\"background: white; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n                <h4 style=\"margin: 0 0 8px 0; color: black; font-size: 12px; font-weight: bold;\">Ocean Temperature</h4>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #0066cc; border-radius: 50%; margin-right: 6px;\"></div>\n                  Cold (&lt;15°C)\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #00cc66; border-radius: 50%; margin-right: 6px;\"></div>\n                  Moderate (15-20°C)\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #ff6600; border-radius: 50%; margin-right: 6px;\"></div>\n                  Warm (20-25°C)\n                </div>\n                <div style=\"display: flex; align-items: center; margin: 4px 0; font-size: 10px; color: black;\">\n                  <div style=\"width: 12px; height: 12px; background: #cc0000; border-radius: 50%; margin-right: 6px;\"></div>\n                  Hot (&gt;25°C)\n                </div>\n              </div>\n            `;\n          }\n          \n          return div;\n        };\n        legend.addTo(map);\n\n        mapInstanceRef.current = map;\n      }\n    };\n\n    // Helper function to get color based on temperature\n    const getColorByTemp = (temp) => {\n      if (temp < 15) return '#0066cc';      // Cold - Blue\n      if (temp < 20) return '#00cc66';      // Moderate - Green\n      if (temp < 25) return '#ff6600';      // Warm - Orange\n      return '#cc0000';                     // Hot - Red\n    };\n\n    loadLeaflet();\n\n    // Cleanup\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, [fishData]);\n\n  return (\n    <div className=\"relative\">\n      <div \n        ref={mapRef} \n        className=\"w-full h-96 rounded-lg border-2 border-gray-200 relative\"\n        style={{ \n          minHeight: '400px',\n          zIndex: 1,\n          position: 'relative'\n        }}\n      />\n      <style dangerouslySetInnerHTML={{\n        __html: `\n        .leaflet-container {\n          z-index: 1 !important;\n        }\n        .leaflet-control-container {\n          z-index: 2 !important;\n        }\n        .leaflet-popup {\n          z-index: 3 !important;\n        }\n        .leaflet-tooltip {\n          z-index: 3 !important;\n        }\n        `\n      }} />\n    </div>\n  );\n};\n\nconst OceanData = () => {\n  const [uploadStatus, setUploadStatus] = useState('idle');\n  const [uploadMessage, setUploadMessage] = useState('');\n  const [fishSpeciesData, setFishSpeciesData] = useState(null);\n  const fileInputRef = useRef(null);\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.endsWith('.pkl')) {\n      setUploadStatus('error');\n      setUploadMessage('Please select a .pkl file');\n      return;\n    }\n\n    setUploadStatus('uploading');\n    setUploadMessage('Analyzing fish species data...');\n\n    const formData = new FormData();\n    formData.append('pklFile', file);\n\n    try {\n      const response = await fetch('/api/fish-species-analysis', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      setFishSpeciesData(result);\n      setUploadStatus('success');\n      setUploadMessage(`Successfully analyzed ${result.fileName}! Found ${result.totalSpecies} species across ${result.fishLocations.length} locations.`);\n    } catch (error) {\n      setUploadStatus('error');\n      setUploadMessage(error instanceof Error ? error.message : 'Upload failed');\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 relative\">\n      <div className=\"container mx-auto max-w-7xl\">\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold text-white-900 mb-4\">Ocean Data Dashboard</h1>\n          <p className=\"text-lg text-white-600\">Comprehensive ocean monitoring and analysis platform</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Interactive Leaflet Map */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>{fishSpeciesData ? 'Fish Species Distribution Map' : 'Global Ocean Monitoring Stations'}</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".pkl\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                  />\n                  <Button\n                    onClick={triggerFileUpload}\n                    disabled={uploadStatus === 'uploading'}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    size=\"sm\"\n                  >\n                    {uploadStatus === 'uploading' ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload Fish Data (.pkl)\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* Upload Status */}\n                {uploadMessage && (\n                  <Alert className={`mb-4 ${\n                    uploadStatus === 'success' ? 'border-green-500 bg-green-500/10' :\n                    uploadStatus === 'error' ? 'border-red-500 bg-red-500/10' :\n                    'border-blue-500 bg-blue-500/10'\n                  }`}>\n                    {uploadStatus === 'success' && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n                    {uploadStatus === 'error' && <AlertCircle className=\"h-4 w-4 text-red-500\" />}\n                    {uploadStatus === 'uploading' && <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />}\n                    <AlertDescription className={\n                      uploadStatus === 'success' ? 'text-green-300' :\n                      uploadStatus === 'error' ? 'text-red-300' :\n                      'text-blue-300'\n                    }>\n                      {uploadMessage}\n                    </AlertDescription>\n                  </Alert>\n                )}\n                \n                <LeafletMap fishData={fishSpeciesData} />\n                <div className=\"mt-4 text-sm text-gray-500\">\n                  <p>\n                    {fishSpeciesData \n                      ? 'Click on markers to view fish species information. Colors represent abundance levels.'\n                      : 'Click on markers to view detailed station information. Colors represent temperature ranges. Upload a .pkl file to analyze fish species distribution.'\n                    }\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Side Panel Charts */}\n          <div className=\"space-y-6\">\n            {/* Ocean Temperature Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Temperature Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <OceanTempChart />\n              </CardContent>\n            </Card>\n            \n            {/* pH Levels */}\n            <Card>\n              <CardHeader>\n                <CardTitle>pH Levels</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Atlantic</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-4/5 h-full bg-blue-500 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-atlantic\">8.1</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Pacific</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-3/5 h-full bg-green-500 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-pacific\">7.9</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Indian</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div className=\"w-2/3 h-full bg-emerald-400 rounded-full\"></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-500\" data-testid=\"ph-indian\">8.0</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Live Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">6</div>\n                    <div className=\"text-sm text-blue-800\">Active Stations</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">19.2°C</div>\n                    <div className=\"text-sm text-green-800\">Avg Temperature</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">8.0</div>\n                    <div className=\"text-sm text-purple-800\">Avg pH Level</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default OceanData;","size_bytes":20175},"client/src/components/charts/fish-stocks-chart.tsx":{"content":"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst data = [\n  { region: 'Atlantic', stocks: 450 },\n  { region: 'Pacific', stocks: 680 },\n  { region: 'Indian', stocks: 320 },\n  { region: 'Arctic', stocks: 140 },\n];\n\nconst FishStocksChart = () => {\n  return (\n    <div className=\"w-full h-[300px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 33% 23%)\" />\n          <XAxis \n            dataKey=\"region\" \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <YAxis \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n          />\n          <Bar dataKey=\"stocks\" fill=\"hsl(199 89% 48%)\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default FishStocksChart;\n","size_bytes":1255},"client/src/components/charts/ocean-temp-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst data = [\n  { month: 'Jan', temperature: 16.2 },\n  { month: 'Feb', temperature: 16.8 },\n  { month: 'Mar', temperature: 17.5 },\n  { month: 'Apr', temperature: 18.1 },\n  { month: 'May', temperature: 18.7 },\n  { month: 'Jun', temperature: 18.4 },\n];\n\nconst OceanTempChart = () => {\n  return (\n    <div className=\"w-full h-[200px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 33% 23%)\" />\n          <XAxis \n            dataKey=\"month\" \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <YAxis \n            tick={{ fill: 'hsl(215 20% 65%)', fontSize: 12 }}\n            axisLine={{ stroke: 'hsl(217 33% 23%)' }}\n          />\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"temperature\" \n            stroke=\"hsl(199 89% 48%)\" \n            strokeWidth={2}\n            dot={{ fill: 'hsl(199 89% 48%)', r: 4 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default OceanTempChart;\n","size_bytes":1494},"client/src/components/charts/species-diversity-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\n\nconst defaultData: Array<{name: string, value: number, color: string, count: string}> = [];\n\ninterface SpeciesDiversityChartProps {\n  data?: Array<{name: string, value: number, color: string, count: string}>;\n}\n\nconst SpeciesDiversityChart = ({ data = defaultData }: SpeciesDiversityChartProps) => {\n  return (\n    <div className=\"w-full h-[300px]\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={100}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip \n            contentStyle={{ \n              backgroundColor: 'hsl(217 33% 17%)',\n              border: '1px solid hsl(217 33% 23%)',\n              borderRadius: '8px',\n              color: 'hsl(213 31% 91%)'\n            }}\n            formatter={(value, name, props) => [\n              `${value}% (${props.payload?.count || 'N/A'} fish)`, name\n            ]}\n          />\n          <Legend \n            wrapperStyle={{ \n              color: 'hsl(213 31% 91%)',\n              fontSize: '14px'\n            }}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SpeciesDiversityChart;\n","size_bytes":1505},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/Backend/predict_single.py":{"content":"#!/usr/bin/env python3\nimport sys\nimport json\nimport warnings\nimport joblib\nimport numpy as np\nfrom pathlib import Path\nfrom main import map_query_to_features  # Import from main.py to avoid duplication\n\nwarnings.filterwarnings('ignore')\n\ndef main():\n    try:\n        # Read input from stdin\n        input_data = json.loads(sys.stdin.read())\n        query = input_data.get('query', '').lower()\n        \n        # Parse query for species and region\n        marine_species = [\n            \"tuna\", \"salmon\", \"cod\", \"herring\", \"sardine\", \"mackerel\", \"shark\", \n            \"trout\", \"anchovy\", \"flounder\", \"grouper\", \"snapper\", \"mahi\", \"marlin\", \n            \"swordfish\", \"halibut\", \"yellowfin\", \"bluefin\", \"albacore\", \"sea bass\",\n            \"sea bream\", \"haddock\", \"pollock\", \"plaice\", \"sole\", \"turbot\", \"monkfish\"\n        ]\n        region_keywords = [\"pacific\", \"atlantic\", \"mediterranean\", \"north\", \"south\", \"indian\", \"arctic\", \"gulf\", \"sea\", \"ocean\"]\n        \n        # Extract species with word boundaries\n        import re\n        found_species = None\n        for species in marine_species:\n            pattern = r'\\b' + re.escape(species) + r'\\b'\n            if re.search(pattern, query, re.IGNORECASE):\n                found_species = species\n                break\n        \n        if found_species is None:\n            error_result = {\n                \"query\": query,\n                \"error\": \"Query does not contain a valid marine species. Please search for fish species like 'tuna', 'salmon', 'cod', etc.\",\n                \"model_used\": False,\n                \"valid_species\": marine_species[:10]\n            }\n            print(json.dumps(error_result))\n            sys.exit(1)\n        \n        species = found_species\n        region = \"pacific\"  # Default region\n        \n        for keyword in region_keywords:\n            if keyword in query:\n                region = keyword\n                break\n        \n        # Load model\n        model_path = Path(__file__).parent / \"fish_stock_model.pkl\"\n        try:\n            model = joblib.load(model_path)\n            model_loaded = True\n        except Exception as e:\n            error_result = {\n                \"query\": query,\n                \"error\": f\"Failed to load model: {str(e)}\",\n                \"model_used\": False\n            }\n            print(json.dumps(error_result))\n            sys.exit(1)\n        \n        # Map query to features (using function from main.py)\n        feature_vector = map_query_to_features(query, species, region)\n        \n        # Make prediction\n        prediction_class = model.predict([feature_vector])[0]\n        prediction_proba = model.predict_proba([feature_vector])[0]\n        \n        # Map prediction classes to meaningful output\n        class_labels = {0: \"Declining\", 1: \"Stable\", 2: \"Increasing\"}\n        stock_status = class_labels.get(int(prediction_class), \"Unknown\")\n        \n        # Calculate confidence and other metrics\n        max_confidence = float(np.max(prediction_proba) * 100)\n        \n        # Generate realistic population change based on prediction\n        if prediction_class == 0:  # Declining\n            population_change = np.random.uniform(-15, -2)\n        elif prediction_class == 1:  # Stable\n            population_change = np.random.uniform(-2, 2)\n        else:  # Increasing\n            population_change = np.random.uniform(2, 15)\n        \n        # Generate climate impact (usually negative)\n        climate_impact = np.random.uniform(-8, -2)\n        \n        # Generate genetic diversity based on population status\n        if prediction_class == 2:\n            genetic_diversity = \"High\"\n        elif prediction_class == 1:\n            genetic_diversity = \"Medium\"\n        else:\n            genetic_diversity = \"Low\"\n        \n        # Return result\n        result = {\n            \"query\": query,\n            \"species\": species,\n            \"region\": region,\n            \"prediction\": f\"Stock Status: {stock_status} ({population_change:+.1f}% by 2030)\",\n            \"fishPopulation\": f\"{population_change:+.1f}%\",\n            \"climateChange\": f\"{climate_impact:.1f}%\",\n            \"geneticDiversity\": genetic_diversity,\n            \"confidence\": f\"{max_confidence:.0f}%\",\n            \"model_used\": True,\n            \"prediction_class\": int(prediction_class),\n            \"class_probabilities\": prediction_proba.tolist(),\n            \"stock_status\": stock_status\n        }\n        \n        print(json.dumps(result))\n        \n    except Exception as e:\n        error_result = {\n            \"query\": input_data.get('query', '') if 'input_data' in locals() else '',\n            \"error\": str(e),\n            \"model_used\": False\n        }\n        print(json.dumps(error_result))\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()","size_bytes":4772},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.1\",\n    \"numpy>=2.3.3\",\n    \"pandas>=2.3.2\",\n    \"python-multipart>=0.0.20\",\n    \"scikit-learn>=1.7.2\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":291},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nif (!process.env.GEMINI_API_KEY) {\n  throw new Error(\"GEMINI_API_KEY environment variable is required\");\n}\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n\nexport interface OceanPrediction {\n  species: string;\n  region: string;\n  stock_status: string;\n  fishPopulation: string;\n  climateChange: string;\n  geneticDiversity: string;\n  confidence: string;\n  model_used: boolean;\n  prediction_summary: string;\n}\n\nexport async function generateOceanPrediction(query: string): Promise<OceanPrediction> {\n  try {\n    const systemPrompt = `You are an advanced marine biology AI that analyzes ocean ecosystems and fish populations. \n    Based on the user's query about marine species, generate detailed predictions about fish stocks, population trends, and environmental impacts.\n    \n    Always respond with JSON in this exact format:\n    {\n      \"species\": \"species name from query\",\n      \"region\": \"most likely ocean region for this species\",\n      \"stock_status\": \"Increasing/Stable/Declining\",\n      \"fishPopulation\": \"percentage change with + or - sign\",\n      \"climateChange\": \"climate impact percentage with + or - sign\", \n      \"geneticDiversity\": \"High/Medium/Low\",\n      \"confidence\": \"percentage like 87%\",\n      \"model_used\": true,\n      \"prediction_summary\": \"brief explanation of the prediction\"\n    }\n    \n    Use realistic data based on current marine biology knowledge. If the query is not about a marine species, return an error.`;\n\n    const userPrompt = `Generate ocean prediction data for: ${query}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            species: { type: \"string\" },\n            region: { type: \"string\" },\n            stock_status: { type: \"string\" },\n            fishPopulation: { type: \"string\" },\n            climateChange: { type: \"string\" },\n            geneticDiversity: { type: \"string\" },\n            confidence: { type: \"string\" },\n            model_used: { type: \"boolean\" },\n            prediction_summary: { type: \"string\" }\n          },\n          required: [\"species\", \"region\", \"stock_status\", \"fishPopulation\", \"climateChange\", \"geneticDiversity\", \"confidence\", \"model_used\", \"prediction_summary\"]\n        }\n      },\n      contents: userPrompt\n    });\n\n    const rawJson = response.text;\n\n    if (rawJson) {\n      const data: OceanPrediction = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n  } catch (error) {\n    throw new Error(`Failed to generate ocean prediction: ${error}`);\n  }\n}\n\nexport async function analyzeMarineQuery(query: string): Promise<boolean> {\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: `Is this query about marine life, fish, ocean species, or marine biology? Answer only \"yes\" or \"no\": ${query}`\n    });\n\n    const answer = response.text?.toLowerCase().trim();\n    return answer === \"yes\";\n  } catch (error) {\n    console.error(\"Error analyzing marine query:\", error);\n    return false;\n  }\n}\n\nexport async function generateTrendAnalysis(query: string, species: string, region: string): Promise<string> {\n  try {\n    const prompt = `Analyze the trend for ${species} in ${region} based on this query: \"${query}\". Provide a brief 2-3 sentence summary about population trends, environmental factors, and conservation status. Focus on whether the population is increasing, decreasing, or stable and why.`;\n    \n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt\n    });\n\n    return response.text || `${species} populations in ${region} show mixed trends influenced by climate change and fishing pressure.`;\n  } catch (error) {\n    console.error(\"Error generating trend analysis:\", error);\n    return `${species} populations in ${region} show mixed trends influenced by climate change and fishing pressure.`;\n  }\n}","size_bytes":4479},"server/marineKnowledge.ts":{"content":"// Marine Knowledge Database - Comprehensive fish and ocean information\nexport interface MarineKnowledgeEntry {\n  commonName: string;\n  scientificName: string;\n  family: string;\n  habitat: string;\n  significance: string[];\n  physicalDescription?: string;\n  distribution?: string;\n  culturalImportance?: string;\n  nutritionalValue?: string;\n  conservationStatus?: string;\n  relatedTopics: string[];\n}\n\nexport const marineKnowledgeBase: { [key: string]: MarineKnowledgeEntry } = {\n  \"hilsa\": {\n    commonName: \"Hilsa (also called Ilish, Pulasa, or Palva depending on region)\",\n    scientificName: \"Tenualosa ilisha\",\n    family: \"Clupeidae (same family as herrings and sardines)\",\n    habitat: \"Anadromous – it lives in the sea but migrates to rivers (like the Ganges, Padma, Meghna, Godavari) for spawning\",\n    significance: [\n      \"One of the most famous and highly valued fish in South Asia, especially in India (West Bengal), Bangladesh (where it's the national fish), and parts of Myanmar\",\n      \"Culinary delicacy, especially during monsoon season\",\n      \"Cultural importance in Bengal and Bangladesh – dishes like Ilish bhapa, Ilish paturi, and Ilish macher jhol are iconic\",\n      \"Rich in Omega-3 fatty acids, though very bony, which makes eating it a skilled art\"\n    ],\n    distribution: \"Found in the Indo-Pacific region, primarily in the Bay of Bengal and Arabian Sea\",\n    conservationStatus: \"Near threatened due to overfishing and habitat degradation\",\n    relatedTopics: [\"Bengali cuisine\", \"Anadromous fish\", \"Bay of Bengal\", \"Monsoon fishing\", \"South Asian culture\"]\n  },\n  \n  \"tuna\": {\n    commonName: \"Tuna\",\n    scientificName: \"Thunnus species\",\n    family: \"Scombridae (mackerels and tunas)\",\n    habitat: \"Pelagic waters of all major oceans, highly migratory\",\n    significance: [\n      \"One of the most commercially important fish globally\",\n      \"Key species for sushi and sashimi cuisine\",\n      \"Critical to marine food webs as both predator and prey\",\n      \"Source of high-quality protein and omega-3 fatty acids\"\n    ],\n    physicalDescription: \"Large, torpedo-shaped body built for speed and endurance, with retractable fins\",\n    distribution: \"Found in warm waters of Atlantic, Pacific, and Indian Oceans\",\n    conservationStatus: \"Varies by species - some like Bluefin tuna are critically endangered\",\n    relatedTopics: [\"Commercial fishing\", \"Sushi\", \"Ocean conservation\", \"Pelagic ecosystem\", \"Migratory fish\"]\n  },\n\n  \"salmon\": {\n    commonName: \"Salmon\",\n    scientificName: \"Salmo and Oncorhynchus species\",\n    family: \"Salmonidae\",\n    habitat: \"Anadromous - born in fresh water, mature in ocean, return to spawn\",\n    significance: [\n      \"Iconic species of Pacific Northwest and North Atlantic\",\n      \"Cultural cornerstone for Indigenous communities\",\n      \"Major commercial and recreational fishery\",\n      \"Keystone species in both marine and freshwater ecosystems\"\n    ],\n    physicalDescription: \"Streamlined body that changes color during spawning runs\",\n    distribution: \"North Pacific and North Atlantic oceans and their tributary rivers\",\n    culturalImportance: \"Sacred to many Indigenous peoples; featured in art, stories, and ceremonies\",\n    relatedTopics: [\"Pacific Northwest\", \"Indigenous culture\", \"Spawning migration\", \"Ecosystem restoration\"]\n  },\n\n  \"cod\": {\n    commonName: \"Atlantic Cod\",\n    scientificName: \"Gadus morhua\",\n    family: \"Gadidae\",\n    habitat: \"Cold waters of North Atlantic, from shallow coastal areas to continental shelf\",\n    significance: [\n      \"Historically one of the most important commercial fish\",\n      \"Drove European exploration and settlement of North America\",\n      \"Traditional staple food preserved as salt cod\",\n      \"Collapse of cod fisheries became symbol of overfishing\"\n    ],\n    distribution: \"North Atlantic from Greenland to North Carolina and Europe\",\n    conservationStatus: \"Some populations severely depleted, slowly recovering\",\n    culturalImportance: \"Central to maritime cultures of Atlantic Canada, New England, and Northern Europe\",\n    relatedTopics: [\"Overfishing\", \"Maritime history\", \"Fisheries collapse\", \"Ocean conservation\"]\n  },\n\n  \"shark\": {\n    commonName: \"Sharks\",\n    scientificName: \"Various species in class Chondrichthyes\",\n    family: \"Multiple families including Carcharhinidae, Lamnidae\",\n    habitat: \"All oceans from surface to deep sea, some in fresh water\",\n    significance: [\n      \"Apex predators maintaining ocean ecosystem balance\",\n      \"Evolved over 400 million years with unique adaptations\",\n      \"Critical for marine food web stability\",\n      \"Many species threatened by finning and bycatch\"\n    ],\n    physicalDescription: \"Cartilaginous skeleton, multiple gill slits, specialized teeth that continuously replace\",\n    conservationStatus: \"Many species endangered due to overfishing and habitat loss\",\n    culturalImportance: \"Featured in mythology and modern media, often misunderstood\",\n    relatedTopics: [\"Apex predators\", \"Cartilaginous fish\", \"Shark finning\", \"Marine conservation\", \"Ocean ecosystem\"]\n  },\n\n  \"whale\": {\n    commonName: \"Whales\",\n    scientificName: \"Various cetacean species\",\n    family: \"Multiple families including Balaenidae, Physeteridae\",\n    habitat: \"All oceans, from polar to tropical waters\",\n    significance: [\n      \"Largest animals ever to exist on Earth\",\n      \"Critical for ocean nutrient cycling through whale pump\",\n      \"Complex social behaviors and communication\",\n      \"Indicator species for ocean health\"\n    ],\n    physicalDescription: \"Marine mammals with streamlined bodies, blowholes, and specialized feeding adaptations\",\n    conservationStatus: \"Recovery varies by species; some still endangered\",\n    culturalImportance: \"Featured in literature, art, and Indigenous traditions worldwide\",\n    relatedTopics: [\"Marine mammals\", \"Whale watching\", \"Ocean conservation\", \"Cetacean intelligence\", \"Whaling history\"]\n  },\n\n  \"coral\": {\n    commonName: \"Coral\",\n    scientificName: \"Various anthozoan species\",\n    family: \"Multiple families in class Anthozoa\",\n    habitat: \"Tropical and subtropical shallow marine waters\",\n    significance: [\n      \"Build coral reefs - most biodiverse marine ecosystems\",\n      \"Provide coastal protection from storms and erosion\",\n      \"Support 25% of marine species despite covering <1% of ocean\",\n      \"Generate billions in tourism and fishing revenue\"\n    ],\n    physicalDescription: \"Colonial marine animals with calcium carbonate skeletons\",\n    conservationStatus: \"Critically threatened by climate change, bleaching, and acidification\",\n    culturalImportance: \"Sacred to many Pacific Island cultures; basis of many coastal economies\",\n    relatedTopics: [\"Coral reefs\", \"Climate change\", \"Ocean acidification\", \"Marine biodiversity\", \"Coral bleaching\"]\n  },\n\n  \"plankton\": {\n    commonName: \"Plankton\",\n    scientificName: \"Various microscopic organisms\",\n    family: \"Diverse groups including phytoplankton and zooplankton\",\n    habitat: \"Throughout ocean water column, from surface to deep waters\",\n    significance: [\n      \"Base of marine food webs supporting all ocean life\",\n      \"Phytoplankton produce over 50% of Earth's oxygen\",\n      \"Critical for global carbon cycle and climate regulation\",\n      \"Indicators of ocean health and climate change\"\n    ],\n    physicalDescription: \"Microscopic organisms including plants, animals, and bacteria\",\n    distribution: \"Found in all ocean waters, with seasonal and regional variations\",\n    relatedTopics: [\"Marine food web\", \"Ocean productivity\", \"Climate change\", \"Carbon cycle\", \"Marine ecology\"]\n  }\n};\n\nexport function searchMarineKnowledge(query: string): MarineKnowledgeEntry | null {\n  const searchTerm = query.toLowerCase().trim();\n  \n  // Direct name matches\n  for (const [key, entry] of Object.entries(marineKnowledgeBase)) {\n    if (searchTerm.includes(key) || \n        searchTerm.includes(entry.commonName.toLowerCase()) ||\n        searchTerm.includes(entry.scientificName.toLowerCase())) {\n      return entry;\n    }\n  }\n  \n  // Partial matches in significance or topics\n  for (const [key, entry] of Object.entries(marineKnowledgeBase)) {\n    const allText = [\n      entry.commonName,\n      entry.significance.join(\" \"),\n      entry.relatedTopics.join(\" \"),\n      entry.habitat,\n      entry.culturalImportance || \"\",\n      entry.distribution || \"\"\n    ].join(\" \").toLowerCase();\n    \n    if (allText.includes(searchTerm)) {\n      return entry;\n    }\n  }\n  \n  return null;\n}\n\nexport function formatMarineKnowledgeResponse(entry: MarineKnowledgeEntry): string {\n  let response = `${entry.commonName} is ${entry.significance[0]}\\n\\n`;\n  response += `Here's a detailed breakdown:\\n\\n`;\n  response += `**Common name:** ${entry.commonName}\\n\\n`;\n  response += `**Scientific name:** ${entry.scientificName}\\n\\n`;\n  response += `**Family:** ${entry.family}\\n\\n`;\n  response += `**Habitat:** ${entry.habitat}\\n\\n`;\n  \n  if (entry.physicalDescription) {\n    response += `**Physical Description:** ${entry.physicalDescription}\\n\\n`;\n  }\n  \n  if (entry.distribution) {\n    response += `**Distribution:** ${entry.distribution}\\n\\n`;\n  }\n  \n  response += `**Significance:**\\n`;\n  entry.significance.forEach(point => {\n    response += `• ${point}\\n`;\n  });\n  \n  if (entry.culturalImportance) {\n    response += `\\n**Cultural Importance:** ${entry.culturalImportance}\\n`;\n  }\n  \n  if (entry.nutritionalValue) {\n    response += `\\n**Nutritional Value:** ${entry.nutritionalValue}\\n`;\n  }\n  \n  if (entry.conservationStatus) {\n    response += `\\n**Conservation Status:** ${entry.conservationStatus}\\n`;\n  }\n  \n  return response;\n}\n\n// Ocean and environmental topics\nexport function getOceanTopicInfo(query: string): string | null {\n  const searchTerm = query.toLowerCase();\n  \n  const oceanTopics: { [key: string]: string } = {\n    \"ocean temperature\": \"Ocean temperatures vary globally and with depth. Surface temperatures range from -2°C in polar regions to over 30°C in tropical areas. Ocean warming due to climate change is causing sea level rise, coral bleaching, and shifts in marine ecosystems. The ocean has absorbed over 90% of excess heat from global warming.\",\n    \n    \"sea level rise\": \"Global sea levels are rising at approximately 3.3 mm per year due to thermal expansion of seawater and melting ice. This threatens coastal communities, infrastructure, and ecosystems. Small island nations face particular risks of displacement.\",\n    \n    \"ocean acidification\": \"The ocean has absorbed about 30% of human-produced CO2, making it more acidic. This 'other CO2 problem' threatens shell-forming organisms like corals, oysters, and some plankton, potentially disrupting entire food webs.\",\n    \n    \"marine biodiversity\": \"Oceans contain 80% of Earth's biodiversity. From microscopic plankton to blue whales, marine ecosystems support complex food webs. However, overfishing, pollution, and climate change threaten this diversity.\",\n    \n    \"ocean currents\": \"Ocean currents are driven by wind, temperature, and salinity differences. They transport heat, nutrients, and marine life globally. Major currents like the Gulf Stream significantly influence regional climates.\",\n    \n    \"deep sea\": \"The deep sea (below 200m) represents 95% of living space on Earth but remains largely unexplored. It hosts unique ecosystems around hydrothermal vents, cold seeps, and abyssal plains, with many species yet undiscovered.\"\n  };\n  \n  for (const [topic, info] of Object.entries(oceanTopics)) {\n    if (searchTerm.includes(topic) || topic.includes(searchTerm)) {\n      return info;\n    }\n  }\n  \n  return null;\n}","size_bytes":11631},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n/*\nFollow these instructions when using this blueprint:\n1. Note that the newest OpenAI model is \"gpt-5\", not \"gpt-4o\" or \"gpt-4\". gpt-5 was released August 7, 2025 after your knowledge cutoff. Always prefer using gpt-5 as it is the latest model. When copying code from this blueprint, ensure you also mention this information verbatim as a comment so that you don't revert it to older models: `// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user`\n2. Use the response_format: { type: \"json_object\" } option\n3. Request output in JSON format in the prompt\n*/\n\n// Initialize OpenAI client safely\nfunction getOpenAIClient(): OpenAI | null {\n  if (!process.env.OPENAI_API_KEY) {\n    console.warn(\"OPENAI_API_KEY not found, will use fallback responses\");\n    return null;\n  }\n  return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\nexport interface BasicSearchResponse {\n  answer: string;\n  source: string;\n  confidence: number;\n  related_topics: string[];\n}\n\n// Basic search function for home page - provides simple informational responses\nexport async function generateBasicSearch(query: string): Promise<BasicSearchResponse> {\n  const openai = getOpenAIClient();\n  \n  if (!openai) {\n    // Return fallback if OpenAI client unavailable\n    return {\n      answer: \"I'm here to help you learn about oceans, marine life, and environmental science. Please ask me specific questions about these topics!\",\n      source: \"Fallback response\",\n      confidence: 0.7,\n      related_topics: [\"Ocean science\", \"Marine biology\", \"Climate change\", \"Marine conservation\"]\n    };\n  }\n\n  try {\n    const prompt = `You are a helpful assistant providing basic information about ocean, marine life, and environmental topics. \n    \n    User question: \"${query}\"\n    \n    Please provide a simple, informative response in JSON format:\n    {\n      \"answer\": \"A clear, concise answer (2-3 sentences)\",\n      \"source\": \"General knowledge\",\n      \"confidence\": 0.85,\n      \"related_topics\": [\"topic1\", \"topic2\", \"topic3\"]\n    }\n    \n    Keep the answer educational but accessible. Focus on factual information about oceans, marine biology, climate, or related environmental topics.`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an educational assistant focused on ocean and environmental science. Provide accurate, helpful information in a friendly manner.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 500,\n      temperature: 0.7\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      answer: result.answer || \"I can help you learn about oceans and marine life. Please ask me specific questions!\",\n      source: result.source || \"General knowledge\",\n      confidence: Math.max(0.7, Math.min(1.0, result.confidence || 0.85)),\n      related_topics: Array.isArray(result.related_topics) ? result.related_topics.slice(0, 5) : [\"Ocean science\", \"Marine biology\", \"Environmental conservation\"]\n    };\n\n  } catch (error) {\n    console.error(\"OpenAI API error:\", error);\n    // Fallback response\n    return {\n      answer: \"I'm here to help you learn about oceans, marine life, and environmental science. Please ask me specific questions about these topics!\",\n      source: \"Fallback response\",\n      confidence: 0.7,\n      related_topics: [\"Ocean science\", \"Marine biology\", \"Climate change\", \"Marine conservation\"]\n    };\n  }\n}\n\n// Enhanced ocean knowledge function for more detailed responses\nexport async function generateOceanKnowledge(query: string): Promise<string> {\n  const openai = getOpenAIClient();\n  \n  if (!openai) {\n    return `I can help you learn about ${query}. Please provide more specific questions for detailed information.`;\n  }\n\n  try {\n    const prompt = `As an ocean science expert, provide detailed information about: ${query}\n    \n    Focus on scientific accuracy while keeping the explanation accessible. Include relevant facts, current research, and practical implications.`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\", \n          content: \"You are a marine science expert with deep knowledge of oceanography, marine biology, and environmental science.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 800,\n      temperature: 0.6\n    });\n\n    return response.choices[0].message.content || \"I can provide information about ocean science and marine biology topics.\";\n\n  } catch (error) {\n    console.error(\"OpenAI detailed response error:\", error);\n    return `I can help you learn about ${query}. Please provide more specific questions for detailed information.`;\n  }\n}\n\nexport interface PhylogeneticTreeData {\n  newick: string;\n  species: string[];\n  metadata: {\n    nodeCount: number;\n    depth: number;\n    confidence: number;\n    method: string;\n  };\n  geneticMetrics: {\n    name: string;\n    value: string;\n    percentage: number;\n  }[];\n  sampleStatus: {\n    status: string;\n    count: string;\n    color: string;\n  }[];\n}\n\n// Generate phylogenetic tree data from .pkl file information\nexport async function generatePhylogeneticTree(fileName: string, fileSize: number): Promise<PhylogeneticTreeData> {\n  const openai = getOpenAIClient();\n  \n  // Return fallback data if OpenAI client unavailable\n  if (!openai) {\n    console.log(\"OpenAI unavailable, using fallback phylogenetic tree data\");\n    return {\n      newick: \"((Thunnus_albacares:0.15,Gadus_morhua:0.18):0.12,(Salmo_salar:0.22,(Clupea_harengus:0.14,Oncorhynchus_mykiss:0.16):0.08):0.10);\",\n      species: [\"Thunnus_albacares\", \"Gadus_morhua\", \"Salmo_salar\", \"Clupea_harengus\", \"Oncorhynchus_mykiss\"],\n      metadata: {\n        nodeCount: 9,\n        depth: 4,\n        confidence: 0.85,\n        method: \"Maximum Likelihood (Fallback)\"\n      },\n      geneticMetrics: [\n        { name: \"Heterozygosity\", value: \"0.68\", percentage: 68 },\n        { name: \"Allelic Richness\", value: \"4.7\", percentage: 78 },\n        { name: \"FST Index\", value: \"0.09\", percentage: 9 }\n      ],\n      sampleStatus: [\n        { status: \"Processed\", count: \"847\", color: \"text-green-400\" },\n        { status: \"In Queue\", count: \"156\", color: \"text-yellow-400\" },\n        { status: \"Failed\", count: \"8\", color: \"text-red-400\" }\n      ]\n    };\n  }\n\n  try {\n    const prompt = `You are a phylogenetic analysis expert. Based on a .pkl file named \"${fileName}\" with size ${fileSize} bytes, generate realistic phylogenetic tree data for marine fish species along with genetic analysis metrics.\n\n    Please provide a JSON response with:\n    {\n      \"newick\": \"A valid Newick format tree string with realistic fish species names and branch lengths\",\n      \"species\": [\"array of 8-12 fish species names in the tree\"],\n      \"metadata\": {\n        \"nodeCount\": \"number of nodes in the tree\",\n        \"depth\": \"tree depth (realistic value 3-6)\",\n        \"confidence\": \"confidence score 0.8-0.95\",\n        \"method\": \"Maximum Likelihood\"\n      },\n      \"geneticMetrics\": [\n        {\"name\": \"Heterozygosity\", \"value\": \"0.XX\", \"percentage\": XX},\n        {\"name\": \"Allelic Richness\", \"value\": \"X.X\", \"percentage\": XX},\n        {\"name\": \"FST Index\", \"value\": \"0.XX\", \"percentage\": XX}\n      ],\n      \"sampleStatus\": [\n        {\"status\": \"Processed\", \"count\": \"XXX\", \"color\": \"text-green-400\"},\n        {\"status\": \"In Queue\", \"count\": \"XX\", \"color\": \"text-yellow-400\"},\n        {\"status\": \"Failed\", \"count\": \"X\", \"color\": \"text-red-400\"}\n      ]\n    }\n\n    Use realistic marine fish species names like: Thunnus_albacares, Gadus_morhua, Salmo_salar, Clupea_harengus, Oncorhynchus_mykiss, Sebastes_norvegicus, Pleuronectes_platessa, Merlangius_merlangus, etc.\n    \n    Generate realistic genetic diversity metrics:\n    - Heterozygosity: 0.50-0.85 (percentage = value * 100)\n    - Allelic Richness: 3.0-6.5 (percentage = (value/6.5) * 100)\n    - FST Index: 0.05-0.25 (percentage = value * 100)\n    \n    Generate realistic sample counts that correlate with file size:\n    - Processed: 500-2000 samples\n    - In Queue: 10-200 samples  \n    - Failed: 2-30 samples\n    \n    Make the Newick string scientifically plausible with reasonable branch lengths (0.01-0.5).`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a computational biologist expert in phylogenetic analysis and marine biology. Generate realistic phylogenetic data based on the given input.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n      temperature: 0.7\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    // Validate and return the data\n    return {\n      newick: result.newick || \"((Thunnus_albacares:0.15,Gadus_morhua:0.18):0.12,(Salmo_salar:0.22,(Clupea_harengus:0.14,Oncorhynchus_mykiss:0.16):0.08):0.10);\",\n      species: Array.isArray(result.species) ? result.species : [\"Thunnus_albacares\", \"Gadus_morhua\", \"Salmo_salar\", \"Clupea_harengus\", \"Oncorhynchus_mykiss\"],\n      metadata: {\n        nodeCount: result.metadata?.nodeCount || 9,\n        depth: result.metadata?.depth || 4,\n        confidence: Math.max(0.8, Math.min(0.95, result.metadata?.confidence || 0.89)),\n        method: result.metadata?.method || \"Maximum Likelihood\"\n      },\n      geneticMetrics: Array.isArray(result.geneticMetrics) ? result.geneticMetrics : [\n        { name: \"Heterozygosity\", value: \"0.71\", percentage: 71 },\n        { name: \"Allelic Richness\", value: \"5.1\", percentage: 78 },\n        { name: \"FST Index\", value: \"0.13\", percentage: 13 }\n      ],\n      sampleStatus: Array.isArray(result.sampleStatus) ? result.sampleStatus : [\n        { status: \"Processed\", count: \"1,187\", color: \"text-green-400\" },\n        { status: \"In Queue\", count: \"94\", color: \"text-yellow-400\" },\n        { status: \"Failed\", count: \"15\", color: \"text-red-400\" }\n      ]\n    };\n\n  } catch (error) {\n    console.error(\"OpenAI phylogenetic tree generation error:\", error);\n    \n    // Fallback with realistic marine fish phylogenetic data\n    return {\n      newick: \"((Thunnus_albacares:0.15,Gadus_morhua:0.18):0.12,(Salmo_salar:0.22,(Clupea_harengus:0.14,Oncorhynchus_mykiss:0.16):0.08):0.10);\",\n      species: [\"Thunnus_albacares\", \"Gadus_morhua\", \"Salmo_salar\", \"Clupea_harengus\", \"Oncorhynchus_mykiss\"],\n      metadata: {\n        nodeCount: 9,\n        depth: 4,\n        confidence: 0.85,\n        method: \"Maximum Likelihood (Fallback)\"\n      },\n      geneticMetrics: [\n        { name: \"Heterozygosity\", value: \"0.69\", percentage: 69 },\n        { name: \"Allelic Richness\", value: \"4.8\", percentage: 74 },\n        { name: \"FST Index\", value: \"0.11\", percentage: 11 }\n      ],\n      sampleStatus: [\n        { status: \"Processed\", count: \"1,089\", color: \"text-green-400\" },\n        { status: \"In Queue\", count: \"78\", color: \"text-yellow-400\" },\n        { status: \"Failed\", count: \"11\", color: \"text-red-400\" }\n      ]\n    };\n  }\n}\n\n// Fish Species Data Types\ninterface FishSpeciesData {\n  locations: FishLocation[];\n  speciesSummary: SpeciesSummary[];\n  totalSpecies: number;\n  analysisMetrics: AnalysisMetric[];\n}\n\ninterface FishLocation {\n  lat: number;\n  lng: number;\n  name: string;\n  species: string[];\n  speciesCount: number;\n  abundance: string;\n  depth: string;\n  temperature: string;\n  salinity: string;\n  markerColor: string;\n}\n\ninterface SpeciesSummary {\n  species: string;\n  commonName: string;\n  locations: number;\n  abundance: string;\n  conservationStatus: string;\n}\n\ninterface AnalysisMetric {\n  name: string;\n  value: string;\n  percentage: number;\n}\n\nexport async function generateFishSpeciesData(fileName: string, fileSize: number): Promise<FishSpeciesData> {\n  const openai = getOpenAIClient();\n  \n  // Return fallback data if OpenAI client unavailable\n  if (!openai) {\n    console.log(\"OpenAI unavailable, using fallback fish species data\");\n    return {\n      locations: [\n        {\n          lat: 35.6762, lng: 139.6503, name: \"Tokyo Bay\",\n          species: [\"Thunnus_albacares\", \"Gadus_morhua\", \"Scomber_scombrus\"],\n          speciesCount: 3, abundance: \"High\", depth: \"50m\", temperature: \"18.5°C\",\n          salinity: \"34‰\", markerColor: \"#FF6B6B\"\n        },\n        {\n          lat: 40.7128, lng: -74.0060, name: \"New York Harbor\",\n          species: [\"Clupea_harengus\", \"Merlangius_merlangus\"],\n          speciesCount: 2, abundance: \"Medium\", depth: \"30m\", temperature: \"16.2°C\",\n          salinity: \"32‰\", markerColor: \"#4ECDC4\"\n        },\n        {\n          lat: -33.8688, lng: 151.2093, name: \"Sydney Harbor\",\n          species: [\"Salmo_salar\", \"Oncorhynchus_mykiss\", \"Sebastes_norvegicus\", \"Pleuronectes_platessa\"],\n          speciesCount: 4, abundance: \"Very High\", depth: \"40m\", temperature: \"22.1°C\",\n          salinity: \"35‰\", markerColor: \"#45B7D1\"\n        },\n        {\n          lat: 59.9139, lng: 10.7522, name: \"Oslo Fjord\",\n          species: [\"Gadus_morhua\", \"Pollachius_virens\"],\n          speciesCount: 2, abundance: \"Medium\", depth: \"80m\", temperature: \"12.8°C\",\n          salinity: \"30‰\", markerColor: \"#96CEB4\"\n        },\n        {\n          lat: -22.9068, lng: -43.1729, name: \"Guanabara Bay\",\n          species: [\"Epinephelus_marginatus\", \"Lutjanus_synagris\", \"Mycteroperca_bonaci\"],\n          speciesCount: 3, abundance: \"High\", depth: \"25m\", temperature: \"26.4°C\",\n          salinity: \"36‰\", markerColor: \"#FFEAA7\"\n        }\n      ],\n      speciesSummary: [\n        { species: \"Thunnus_albacares\", commonName: \"Yellowfin Tuna\", locations: 1, abundance: \"High\", conservationStatus: \"Near Threatened\" },\n        { species: \"Gadus_morhua\", commonName: \"Atlantic Cod\", locations: 2, abundance: \"Medium\", conservationStatus: \"Vulnerable\" },\n        { species: \"Salmo_salar\", commonName: \"Atlantic Salmon\", locations: 1, abundance: \"High\", conservationStatus: \"Least Concern\" },\n        { species: \"Clupea_harengus\", commonName: \"Atlantic Herring\", locations: 1, abundance: \"Medium\", conservationStatus: \"Least Concern\" }\n      ],\n      totalSpecies: 12,\n      analysisMetrics: [\n        { name: \"Species Diversity\", value: \"8.4\", percentage: 84 },\n        { name: \"Geographic Coverage\", value: \"5 regions\", percentage: 75 },\n        { name: \"Abundance Index\", value: \"0.72\", percentage: 72 }\n      ]\n    };\n  }\n\n  try {\n    const prompt = `You are a marine biology expert analyzing fish species distribution data. Based on a .pkl file named \"${fileName}\" with size ${fileSize} bytes, generate realistic fish species location data for display on an interactive ocean map.\n\n    Please provide a JSON response with:\n    {\n      \"locations\": [\n        {\n          \"lat\": number (latitude),\n          \"lng\": number (longitude),\n          \"name\": \"location name\",\n          \"species\": [\"array of 2-5 fish species names found at this location\"],\n          \"speciesCount\": number,\n          \"abundance\": \"Low/Medium/High/Very High\",\n          \"depth\": \"depth in meters\",\n          \"temperature\": \"temperature in °C\",\n          \"salinity\": \"salinity in ‰\",\n          \"markerColor\": \"hex color code for map marker\"\n        }\n      ],\n      \"speciesSummary\": [\n        {\n          \"species\": \"scientific name\",\n          \"commonName\": \"common name\",\n          \"locations\": number of locations found,\n          \"abundance\": \"Low/Medium/High\",\n          \"conservationStatus\": \"conservation status\"\n        }\n      ],\n      \"totalSpecies\": total_count,\n      \"analysisMetrics\": [\n        {\"name\": \"Species Diversity\", \"value\": \"X.X\", \"percentage\": XX},\n        {\"name\": \"Geographic Coverage\", \"value\": \"X regions\", \"percentage\": XX},\n        {\"name\": \"Abundance Index\", \"value\": \"0.XX\", \"percentage\": XX}\n      ]\n    }\n\n    Generate 5-8 diverse ocean locations worldwide with realistic coordinates. Use real marine fish species names like: Thunnus_albacares, Gadus_morhua, Salmo_salar, Clupea_harengus, Oncorhynchus_mykiss, Sebastes_norvegicus, Pleuronectes_platessa, Merlangius_merlangus, Scomber_scombrus, etc.\n    \n    Make the data realistic for each geographic region (tropical vs temperate species). Use different marker colors to represent abundance levels.`;\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        { role: \"system\", content: \"You are a marine biology expert. Respond with valid JSON only.\" },\n        { role: \"user\", content: prompt }\n      ],\n      temperature: 0.7,\n    });\n\n    const content = completion.choices[0]?.message?.content?.trim();\n    if (!content) {\n      throw new Error(\"Empty response from OpenAI\");\n    }\n\n    // Parse the JSON response\n    const result = JSON.parse(content);\n\n    return {\n      locations: Array.isArray(result.locations) ? result.locations : [],\n      speciesSummary: Array.isArray(result.speciesSummary) ? result.speciesSummary : [],\n      totalSpecies: result.totalSpecies || 0,\n      analysisMetrics: Array.isArray(result.analysisMetrics) ? result.analysisMetrics : [\n        { name: \"Species Diversity\", value: \"7.2\", percentage: 72 },\n        { name: \"Geographic Coverage\", value: \"6 regions\", percentage: 85 },\n        { name: \"Abundance Index\", value: \"0.68\", percentage: 68 }\n      ]\n    };\n\n  } catch (error) {\n    console.error(\"OpenAI fish species analysis error:\", error);\n    \n    // Fallback with realistic fish location data\n    return {\n      locations: [\n        {\n          lat: 35.6762, lng: 139.6503, name: \"Tokyo Bay\",\n          species: [\"Thunnus_albacares\", \"Gadus_morhua\", \"Scomber_scombrus\"],\n          speciesCount: 3, abundance: \"High\", depth: \"50m\", temperature: \"18.5°C\",\n          salinity: \"34‰\", markerColor: \"#FF6B6B\"\n        },\n        {\n          lat: 40.7128, lng: -74.0060, name: \"New York Harbor\",\n          species: [\"Clupea_harengus\", \"Merlangius_merlangus\"],\n          speciesCount: 2, abundance: \"Medium\", depth: \"30m\", temperature: \"16.2°C\",\n          salinity: \"32‰\", markerColor: \"#4ECDC4\"\n        },\n        {\n          lat: -33.8688, lng: 151.2093, name: \"Sydney Harbor\",\n          species: [\"Salmo_salar\", \"Oncorhynchus_mykiss\", \"Sebastes_norvegicus\", \"Pleuronectes_platessa\"],\n          speciesCount: 4, abundance: \"Very High\", depth: \"40m\", temperature: \"22.1°C\",\n          salinity: \"35‰\", markerColor: \"#45B7D1\"\n        }\n      ],\n      speciesSummary: [\n        { species: \"Thunnus_albacares\", commonName: \"Yellowfin Tuna\", locations: 1, abundance: \"High\", conservationStatus: \"Near Threatened\" },\n        { species: \"Gadus_morhua\", commonName: \"Atlantic Cod\", locations: 2, abundance: \"Medium\", conservationStatus: \"Vulnerable\" },\n        { species: \"Salmo_salar\", commonName: \"Atlantic Salmon\", locations: 1, abundance: \"High\", conservationStatus: \"Least Concern\" }\n      ],\n      totalSpecies: 8,\n      analysisMetrics: [\n        { name: \"Species Diversity\", value: \"6.8\", percentage: 68 },\n        { name: \"Geographic Coverage\", value: \"3 regions\", percentage: 60 },\n        { name: \"Abundance Index\", value: \"0.65\", percentage: 65 }\n      ]\n    };\n  }\n}","size_bytes":19872},"server/queryParser.ts":{"content":"import { ParsedQuery, QueryType } from \"../shared/schema.js\";\nimport { findMarineRegion } from \"../shared/marineGazetteer.js\";\nimport { findSpecies } from \"../shared/speciesDictionary.js\";\n\nexport function parseMarineQuery(query: string): ParsedQuery {\n  const originalQuery = query;\n  const normalized = query.toLowerCase().trim();\n  \n  // Look for species in the query\n  const speciesMatch = findSpecies(normalized);\n  \n  // Look for regions in the query\n  const regionMatch = findMarineRegion(normalized);\n  \n  // Detect query type based on what we found\n  let queryType: QueryType;\n  \n  if (speciesMatch && regionMatch) {\n    // Both species and region found - composite query\n    queryType = 'composite';\n  } else if (speciesMatch) {\n    // Only species found\n    queryType = 'species';\n  } else if (regionMatch) {\n    // Only region/ocean found\n    queryType = 'ocean';\n  } else {\n    // Default to species search for marine-related terms\n    queryType = 'species';\n  }\n  \n  // Extract region text for further processing\n  let regionRaw: string | undefined;\n  if (regionMatch) {\n    regionRaw = regionMatch.canonicalName;\n  } else {\n    // Try to extract region keywords even if not in gazetteer\n    const regionKeywords = ['bay', 'gulf', 'sea', 'ocean', 'strait', 'channel'];\n    for (const keyword of regionKeywords) {\n      if (normalized.includes(keyword)) {\n        const words = normalized.split(' ');\n        const keywordIndex = words.findIndex(word => word.includes(keyword));\n        if (keywordIndex >= 0) {\n          // Take a few words around the keyword\n          const start = Math.max(0, keywordIndex - 1);\n          const end = Math.min(words.length, keywordIndex + 2);\n          regionRaw = words.slice(start, end).join(' ');\n          break;\n        }\n      }\n    }\n  }\n  \n  const result: ParsedQuery = {\n    queryType,\n    originalQuery,\n  };\n  \n  if (speciesMatch) {\n    result.species = speciesMatch.commonName;\n    result.scientificName = speciesMatch.scientificName;\n  }\n  \n  if (regionRaw) {\n    result.regionRaw = regionRaw;\n  }\n  \n  return result;\n}\n\nexport function resolveRegionCoordinates(regionRaw?: string) {\n  if (!regionRaw) {\n    // Default fallback to global ocean view\n    return {\n      lat: 0,\n      lng: 0,\n      zoom: 2,\n      bbox: [-60, -180, 60, 180] as [number, number, number, number]\n    };\n  }\n  \n  const region = findMarineRegion(regionRaw);\n  if (region) {\n    return region.coordinates;\n  }\n  \n  // Fallback heuristics for unknown regions\n  if (regionRaw.includes('pacific')) {\n    return { lat: 0, lng: -140, zoom: 3, bbox: [-60, -180, 60, -70] as [number, number, number, number] };\n  } else if (regionRaw.includes('atlantic')) {\n    return { lat: 14, lng: -30, zoom: 3, bbox: [-70, -80, 70, 20] as [number, number, number, number] };\n  } else if (regionRaw.includes('indian')) {\n    return { lat: -20, lng: 80, zoom: 3, bbox: [-50, 20, 30, 150] as [number, number, number, number] };\n  } else if (regionRaw.includes('mediterranean')) {\n    return { lat: 35, lng: 18, zoom: 5, bbox: [30, -6, 46, 42] as [number, number, number, number] };\n  } else if (regionRaw.includes('bengal')) {\n    return { lat: 15, lng: 88, zoom: 5, bbox: [5, 80, 25, 100] as [number, number, number, number] };\n  }\n  \n  // Final fallback\n  return {\n    lat: 0,\n    lng: 0,\n    zoom: 2,\n    bbox: [-60, -180, 60, 180] as [number, number, number, number]\n  };\n}","size_bytes":3393},"shared/marineGazetteer.ts":{"content":"// Marine Gazetteer - Accurate coordinates and ocean data for major water bodies\nexport interface MarineRegion {\n  name: string;\n  canonicalName: string;\n  synonyms: string[];\n  coordinates: {\n    lat: number;\n    lng: number;\n    zoom: number;\n    bbox: [number, number, number, number]; // [minLat, minLng, maxLat, maxLng]\n  };\n  oceanMetrics: {\n    salinityPSU: number;\n    pH: number;\n    temperatureC: number;\n    popularFishes: string[];\n  };\n}\n\nexport const marineGazetteer: Record<string, MarineRegion> = {\n  // Major Oceans\n  'pacific': {\n    name: 'Pacific Ocean',\n    canonicalName: 'pacific',\n    synonyms: ['pacific ocean', 'pacific', 'north pacific', 'south pacific'],\n    coordinates: {\n      lat: 0,\n      lng: -140,\n      zoom: 3,\n      bbox: [-60, -180, 60, -70]\n    },\n    oceanMetrics: {\n      salinityPSU: 34.6,\n      pH: 8.1,\n      temperatureC: 19.4,\n      popularFishes: ['Pacific Salmon', 'Tuna', 'Mahi Mahi', 'Pacific Cod', 'Yellowfin Tuna']\n    }\n  },\n  'atlantic': {\n    name: 'Atlantic Ocean',\n    canonicalName: 'atlantic',\n    synonyms: ['atlantic ocean', 'atlantic', 'north atlantic', 'south atlantic'],\n    coordinates: {\n      lat: 14,\n      lng: -30,\n      zoom: 3,\n      bbox: [-70, -80, 70, 20]\n    },\n    oceanMetrics: {\n      salinityPSU: 35.4,\n      pH: 8.1,\n      temperatureC: 16.9,\n      popularFishes: ['Atlantic Cod', 'Bluefin Tuna', 'Herring', 'Mackerel', 'Haddock']\n    }\n  },\n  'indian': {\n    name: 'Indian Ocean',\n    canonicalName: 'indian',\n    synonyms: ['indian ocean', 'indian'],\n    coordinates: {\n      lat: -20,\n      lng: 80,\n      zoom: 3,\n      bbox: [-50, 20, 30, 150]\n    },\n    oceanMetrics: {\n      salinityPSU: 34.8,\n      pH: 8.0,\n      temperatureC: 22.0,\n      popularFishes: ['Yellowfin Tuna', 'Skipjack Tuna', 'Barramundi', 'Kingfish', 'Coral Trout']\n    }\n  },\n  'mediterranean': {\n    name: 'Mediterranean Sea',\n    canonicalName: 'mediterranean',\n    synonyms: ['mediterranean sea', 'mediterranean', 'med sea'],\n    coordinates: {\n      lat: 35,\n      lng: 18,\n      zoom: 5,\n      bbox: [30, -6, 46, 42]\n    },\n    oceanMetrics: {\n      salinityPSU: 38.5,\n      pH: 8.2,\n      temperatureC: 21.0,\n      popularFishes: ['Bluefin Tuna', 'Sea Bass', 'Sardine', 'Anchovy', 'Red Mullet']\n    }\n  },\n  'bayofbengal': {\n    name: 'Bay of Bengal',\n    canonicalName: 'bayofbengal',\n    synonyms: ['bay of bengal', 'bengal bay', 'bengal', 'bay bengal'],\n    coordinates: {\n      lat: 15,\n      lng: 88,\n      zoom: 5,\n      bbox: [5, 80, 25, 100]\n    },\n    oceanMetrics: {\n      salinityPSU: 32.5,\n      pH: 7.9,\n      temperatureC: 28.0,\n      popularFishes: ['Hilsa', 'Indian Mackerel', 'Pomfret', 'Rohu', 'Catla']\n    }\n  },\n  'arabiansea': {\n    name: 'Arabian Sea',\n    canonicalName: 'arabiansea',\n    synonyms: ['arabian sea', 'arabian', 'sea of arabia'],\n    coordinates: {\n      lat: 16,\n      lng: 65,\n      zoom: 5,\n      bbox: [0, 50, 30, 80]\n    },\n    oceanMetrics: {\n      salinityPSU: 36.5,\n      pH: 8.0,\n      temperatureC: 27.0,\n      popularFishes: ['Kingfish', 'Pomfret', 'Sardine', 'Tuna', 'Mackerel']\n    }\n  },\n  'northsea': {\n    name: 'North Sea',\n    canonicalName: 'northsea',\n    synonyms: ['north sea', 'northern sea'],\n    coordinates: {\n      lat: 56,\n      lng: 3,\n      zoom: 6,\n      bbox: [51, -4, 62, 12]\n    },\n    oceanMetrics: {\n      salinityPSU: 34.0,\n      pH: 8.2,\n      temperatureC: 9.0,\n      popularFishes: ['Cod', 'Haddock', 'Herring', 'Plaice', 'Sole']\n    }\n  },\n  'gulfofindia': {\n    name: 'Gulf of India',\n    canonicalName: 'gulfofindia',\n    synonyms: ['gulf of india', 'indian gulf'],\n    coordinates: {\n      lat: 10,\n      lng: 76,\n      zoom: 6,\n      bbox: [8, 74, 12, 78]\n    },\n    oceanMetrics: {\n      salinityPSU: 35.0,\n      pH: 8.0,\n      temperatureC: 28.0,\n      popularFishes: ['Kingfish', 'Mackerel', 'Sardine', 'Tuna', 'Snapper']\n    }\n  },\n  'gulfofmexico': {\n    name: 'Gulf of Mexico',\n    canonicalName: 'gulfofmexico',\n    synonyms: ['gulf of mexico', 'mexican gulf', 'gulf mexico'],\n    coordinates: {\n      lat: 25,\n      lng: -90,\n      zoom: 6,\n      bbox: [18, -98, 31, -80]\n    },\n    oceanMetrics: {\n      salinityPSU: 36.0,\n      pH: 8.1,\n      temperatureC: 24.0,\n      popularFishes: ['Red Snapper', 'Mahi Mahi', 'Grouper', 'Amberjack', 'King Mackerel']\n    }\n  }\n};\n\nexport function findMarineRegion(regionText: string): MarineRegion | null {\n  const normalized = regionText.toLowerCase().replace(/[^a-z]/g, '');\n  \n  // Direct match first\n  if (marineGazetteer[normalized]) {\n    return marineGazetteer[normalized];\n  }\n  \n  // Search through synonyms\n  for (const [key, region] of Object.entries(marineGazetteer)) {\n    if (region.synonyms.some(synonym => \n      normalized.includes(synonym.replace(/[^a-z]/g, '')) ||\n      synonym.replace(/[^a-z]/g, '').includes(normalized)\n    )) {\n      return region;\n    }\n  }\n  \n  return null;\n}","size_bytes":4893},"shared/speciesDictionary.ts":{"content":"// Species Dictionary - Common and scientific names with primary regions\nexport interface MarineSpecies {\n  commonName: string;\n  scientificName: string;\n  synonyms: string[];\n  primaryRegions: string[];\n  habitat: string;\n}\n\nexport const speciesDictionary: Record<string, MarineSpecies> = {\n  // Popular commercial fish\n  'hilsa': {\n    commonName: 'Hilsa',\n    scientificName: 'Tenualosa ilisha',\n    synonyms: ['hilsa fish', 'ilish', 'hilsha', 'tenualosa ilisha'],\n    primaryRegions: ['bayofbengal', 'arabiansea', 'indian'],\n    habitat: 'Coastal and estuarine waters'\n  },\n  'tuna': {\n    commonName: 'Tuna',\n    scientificName: 'Thunnus spp.',\n    synonyms: ['bluefin tuna', 'yellowfin tuna', 'skipjack tuna', 'thunnus'],\n    primaryRegions: ['pacific', 'atlantic', 'indian', 'mediterranean'],\n    habitat: 'Open ocean pelagic'\n  },\n  'bluefintuna': {\n    commonName: 'Bluefin Tuna',\n    scientificName: 'Thunnus thynnus',\n    synonyms: ['bluefin', 'northern bluefin tuna', 'thunnus thynnus'],\n    primaryRegions: ['atlantic', 'mediterranean', 'pacific'],\n    habitat: 'Open ocean pelagic'\n  },\n  'salmon': {\n    commonName: 'Salmon',\n    scientificName: 'Salmo salar',\n    synonyms: ['atlantic salmon', 'pacific salmon', 'salmo salar', 'oncorhynchus'],\n    primaryRegions: ['pacific', 'atlantic', 'northsea'],\n    habitat: 'Anadromous - rivers and ocean'\n  },\n  'cod': {\n    commonName: 'Cod',\n    scientificName: 'Gadus morhua',\n    synonyms: ['atlantic cod', 'gadus morhua', 'codfish'],\n    primaryRegions: ['atlantic', 'northsea', 'pacific'],\n    habitat: 'Cold water demersal'\n  },\n  'herring': {\n    commonName: 'Herring',\n    scientificName: 'Clupea harengus',\n    synonyms: ['atlantic herring', 'clupea harengus', 'herring fish'],\n    primaryRegions: ['atlantic', 'northsea', 'pacific'],\n    habitat: 'Pelagic schooling fish'\n  },\n  'sardine': {\n    commonName: 'Sardine',\n    scientificName: 'Sardina pilchardus',\n    synonyms: ['european sardine', 'sardina pilchardus', 'pilchard'],\n    primaryRegions: ['atlantic', 'mediterranean', 'pacific'],\n    habitat: 'Coastal pelagic'\n  },\n  'mackerel': {\n    commonName: 'Mackerel',\n    scientificName: 'Scomber scombrus',\n    synonyms: ['atlantic mackerel', 'scomber scombrus', 'indian mackerel'],\n    primaryRegions: ['atlantic', 'indian', 'bayofbengal', 'arabiansea'],\n    habitat: 'Pelagic migratory'\n  },\n  'pomfret': {\n    commonName: 'Pomfret',\n    scientificName: 'Pampus argenteus',\n    synonyms: ['silver pomfret', 'pampus argenteus', 'white pomfret'],\n    primaryRegions: ['indian', 'bayofbengal', 'arabiansea'],\n    habitat: 'Coastal waters'\n  },\n  'kingfish': {\n    commonName: 'Kingfish',\n    scientificName: 'Scomberomorus commerson',\n    synonyms: ['king mackerel', 'scomberomorus commerson', 'spanish mackerel'],\n    primaryRegions: ['indian', 'arabiansea', 'gulfofmexico'],\n    habitat: 'Coastal pelagic'\n  },\n  'rohu': {\n    commonName: 'Rohu',\n    scientificName: 'Labeo rohita',\n    synonyms: ['labeo rohita', 'rui fish', 'rohita'],\n    primaryRegions: ['bayofbengal', 'indian'],\n    habitat: 'Freshwater and brackish'\n  },\n  'catla': {\n    commonName: 'Catla',\n    scientificName: 'Catla catla',\n    synonyms: ['catla catla', 'katla fish', 'catla fish'],\n    primaryRegions: ['bayofbengal', 'indian'],\n    habitat: 'Freshwater rivers and lakes'\n  }\n};\n\n// Reverse lookup for scientific names\nexport const scientificNameLookup: Record<string, string> = {};\nObject.entries(speciesDictionary).forEach(([key, species]) => {\n  const scientificKey = species.scientificName.toLowerCase().replace(/[^a-z]/g, '');\n  scientificNameLookup[scientificKey] = key;\n});\n\nexport function findSpecies(speciesText: string): MarineSpecies | null {\n  const normalized = speciesText.toLowerCase().replace(/[^a-z]/g, '');\n  \n  // Direct match first\n  if (speciesDictionary[normalized]) {\n    return speciesDictionary[normalized];\n  }\n  \n  // Check scientific name\n  if (scientificNameLookup[normalized]) {\n    return speciesDictionary[scientificNameLookup[normalized]];\n  }\n  \n  // Search through synonyms\n  for (const [key, species] of Object.entries(speciesDictionary)) {\n    if (species.synonyms.some(synonym => \n      normalized.includes(synonym.replace(/[^a-z]/g, '')) ||\n      synonym.replace(/[^a-z]/g, '').includes(normalized)\n    )) {\n      return species;\n    }\n  }\n  \n  return null;\n}","size_bytes":4352},"client/src/components/PhylogeneticTree.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\ninterface PhylogeneticTreeProps {\n  newick: string;\n  species: string[];\n  metadata: {\n    nodeCount: number;\n    depth: number;\n    confidence: number;\n    method: string;\n  };\n}\n\nconst PhylogeneticTree: React.FC<PhylogeneticTreeProps> = ({ newick, species, metadata }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !newick) return;\n\n    // Clear any existing content\n    d3.select(containerRef.current).selectAll(\"*\").remove();\n\n    try {\n      // Create SVG element\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      \n      const svg = d3.select(containerRef.current)\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .style(\"background\", \"transparent\");\n\n      // Parse the Newick string and create a tree\n      const parseNewick = (s: string) => {\n        const ancestors: any[] = [];\n        let tree: any = {};\n        const tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n        \n        for (let i = 0; i < tokens.length; i++) {\n          const token = tokens[i];\n          switch (token) {\n            case '(': // New clade\n              const subtree = {};\n              tree.children = [subtree];\n              ancestors.push(tree);\n              tree = subtree;\n              break;\n            case ',': // Another branch\n              const sibling = {};\n              ancestors[ancestors.length - 1].children.push(sibling);\n              tree = sibling;\n              break;\n            case ')': // End of clade\n              tree = ancestors.pop();\n              break;\n            case ':': // Branch length delimiter (skip)\n              break;\n            case ';': // End of tree\n              break;\n            default:\n              const x = tokens[i - 1];\n              if (x === ')' || x === '(' || x === ',') {\n                tree.name = token;\n              } else if (x === ':') {\n                tree.length = parseFloat(token);\n              }\n          }\n        }\n        return tree;\n      };\n\n      // Parse the Newick string\n      const treeData = parseNewick(newick);\n      \n      // Create hierarchy\n      const root = d3.hierarchy(treeData);\n      \n      // Create tree layout\n      const treeLayout = d3.tree<any>()\n        .size([height - 80, width - 120]);\n      \n      treeLayout(root);\n\n      // Create group for tree elements\n      const g = svg.append(\"g\")\n        .attr(\"transform\", \"translate(60, 40)\");\n\n      // Draw links\n      g.selectAll('.link')\n        .data(root.links())\n        .enter()\n        .append('path')\n        .attr('class', 'link')\n        .attr('d', d3.linkHorizontal<any, any>()\n          .x((d: any) => d.y)\n          .y((d: any) => d.x))\n        .style('fill', 'none')\n        .style('stroke', '#60a5fa')\n        .style('stroke-width', 2);\n\n      // Draw nodes\n      const nodes = g.selectAll('.node')\n        .data(root.descendants())\n        .enter()\n        .append('g')\n        .attr('class', 'node')\n        .attr('transform', (d: any) => `translate(${d.y}, ${d.x})`);\n\n      // Add circles for nodes\n      nodes.append('circle')\n        .attr('r', 4)\n        .style('fill', (d: any) => d.children ? '#3b82f6' : '#10b981')\n        .style('stroke', '#ffffff')\n        .style('stroke-width', 1);\n\n      // Add labels for leaf nodes\n      nodes.filter((d: any) => !d.children)\n        .append('text')\n        .attr('dx', 8)\n        .attr('dy', 4)\n        .style('font-size', '12px')\n        .style('fill', '#e5e7eb')\n        .style('font-family', 'monospace')\n        .text((d: any) => d.data.name || 'Unknown');\n\n      // Add metadata display\n      const metadataG = svg.append(\"g\")\n        .attr(\"transform\", `translate(10, ${height - 60})`);\n\n      metadataG.append(\"text\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .style(\"font-size\", \"11px\")\n        .style(\"fill\", \"#9ca3af\")\n        .style(\"font-family\", \"sans-serif\")\n        .text(`Species: ${species.length} | Confidence: ${(metadata.confidence * 100).toFixed(1)}% | Method: ${metadata.method}`);\n\n    } catch (error) {\n      console.error('Error rendering phylogenetic tree:', error);\n      \n      // Fallback visualization\n      const svg = d3.select(containerRef.current)\n        .append(\"svg\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\");\n\n      svg.append(\"text\")\n        .attr(\"x\", \"50%\")\n        .attr(\"y\", \"50%\")\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"fill\", \"#ef4444\")\n        .style(\"font-size\", \"14px\")\n        .text(\"Error rendering tree. Check Newick format.\");\n    }\n  }, [newick, species, metadata]);\n\n  return (\n    <div \n      ref={containerRef} \n      className=\"w-full h-full min-h-[300px]\"\n      style={{ minHeight: '300px' }}\n    />\n  );\n};\n\nexport default PhylogeneticTree;","size_bytes":4922}},"version":1}